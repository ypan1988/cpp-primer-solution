** Exercise 1.1
   
   #+BEGIN_QUOTE
   Review the documentation for your compiler and determine what file
   naming convention it uses. Compile and run the main program from
   page 2.
   #+END_QUOTE
   
- [[http://labor-liber.org/en/gnu-linux/development/extensions][GCC and File Extensions]]
- [[https://msdn.microsoft.com/en-us/library/3awe4781.aspx][File Types Created for Visual C++ Projects]]
  
** Exercise 1.2
   
   #+BEGIN_QUOTE
   Change the program to return -1. A return value of -1 is often
   treated as an indicator that the program failed. Recompile and
   rerun your program to see how your system treats a failure
   indicator from main.
   #+END_QUOTE
   
   #+BEGIN_SRC C
int main()
{
  return -1;
}
   #+END_SRC
   
*** Linux
    [[./img/fig01_02a.png]]
    
    255 means "Exit status out of range".

*** Windows
    [[./img/fig01_02b.png]]
        
** Exercise 1.3
   
   #+BEGIN_QUOTE
   Write a program to print ~Hello, World~ on the standard output.
   #+END_QUOTE
   
   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Hello, World" << std::endl;
  return 0;
}
   #+END_SRC
** Exercise 1.4
   
   #+BEGIN_QUOTE
   Our program used the addition operator, +, to add two
   numbers. Write a program that uses the multiplication operator, *,
   to print the product instead.
   #+END_QUOTE

   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Enter two numbers:" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;
  std::cout << "The product of " << v1 << " and " << v2
            << " is " << v1 * v2 << std::endl;
  return 0;
}
   #+END_SRC
   
** Exercise 1.5
   
   #+BEGIN_QUOTE
   We wrote the output in one large statement. Rewrite the program to use
   a separate statement to print each operand.
   #+END_QUOTE
   
   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Enter two numbers:" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;
  std::cout << "The product of ";
  std::cout << v1;
  std::cout << " and ";
  std::cout << v2;
  std::cout << " is ";
  std::cout << v1 * v2;
  std::cout << std::endl;
  return 0;
}
   #+END_SRC
** Exercise 1.6

   #+BEGIN_QUOTE
   Explain whether the following program fragment is legal.
   #+END_QUOTE

   #+BEGIN_SRC C
std::cout << "The sum of " << v1;
          << " and " << v2;
          << " is " << v1 + v2 << std::endl;
   #+END_SRC

   #+BEGIN_QUOTE
   If the program is legal, what does it do? If the program is not
   legal, why not? How would you fix it?
   #+END_QUOTE

   It is illegal. The spare semicolons should be removed.

   #+BEGIN_SRC C
std::cout << "The sum of " << v1 
          << " and " << v2 
          << " is " << v1 + v2 << std::endl;
   #+END_SRC

** Exercise 1.7

   #+BEGIN_QUOTE
   Compile a program that has incorrectly nested comments.
   #+END_QUOTE

   Example:
   #+BEGIN_SRC C
/*
 * comment pairs /*   */ cannot nest.
 * "cannot nest" is considered source code,
 * as is the rest of the program
 */
int main()
{
  return 0;
}   
   #+END_SRC

   [[./img/fig01_07.png]]

** Exercise 1.8

   #+BEGIN_QUOTE
   Indicate which, if any, of the following output statements are
   legal: 
   #+END_QUOTE

   #+BEGIN_SRC C
std::cout << "/*";
std::cout << "*/";
std::cout << /* "*/" */;
std::cout << /*  "*/" /* "/*"  */;
   #+END_SRC

   #+BEGIN_QUOTE
   After you’ve predicted what will happen, test your answers by
   compiling a program with each of these statements. Correct any
   errors you encounter.
   #+END_QUOTE

   The third statement is wrong.
   [[./img/fig01_08.png]]

   It can be fixed by adding a quote:
   #+BEGIN_SRC C
std::cout << /* "*/" */";
   #+END_SRC
   
** Exercise 1.9

   #+BEGIN_QUOTE
   Write a program that uses a ~while~ to sum the numbers from 50
   to 100.
   #+END_QUOTE

   #+BEGIN_SRC C
#include <iostream>

int main()
{
  int sum = 0, val = 50;
  // keep executing the while as long as val is less than or equal to 100
  while (val <= 100) {
    sum += val;                 // assigns sum + val to sum
    ++val;                      // add 1 to val
  }
  std::cout << "Sum of 50 to 100 inclusive is "
            << sum << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 1.10
   
   #+BEGIN_QUOTE
   In addition to the ++ operator that adds 1 to its operand, there is
   a decrement operator (--) that subtracts 1. Use the decrement
   operator to write a ~while~ that prints the numbers from ten down
   to zero.
   #+END_QUOTE

   #+BEGIN_SRC C
#include <iostream>

int main()
{
  int val = 10;
  while (val >= 0) {
    std::cout << val << std::endl;
    --val;
  }
  return 0;
}
   #+END_SRC

** Exercise 1.11

   #+BEGIN_QUOTE
   Write a program that prompts the user for two integers. Print each
   number in the range specified by those two integers.
   #+END_QUOTE

   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Enter two numbers(v1 < v2):" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;

  int val = v1;
  while (val <= v2) {
    std::cout << val << std::endl;
    ++val;
  }
  
  return 0;
}
   #+END_SRC
   
** Exercise 1.12

   #+BEGIN_QUOTE
   What does the following ~for~ loop do? What is the final value of
   ~sum~?
   #+END_QUOTE

   #+BEGIN_SRC C
int sum = 0;
for (int i = -100; i <= 100; ++i)
    sum += i;
   #+END_SRC

   The ~for~ loop sums the numbers from from -100 to 100. The final
   value of ~sum~ is zero.

** Exercise 1.13

   #+BEGIN_QUOTE
   Rewrite the exercises from § 1.4.1 (p. 13) using ~for~ loops.
   #+END_QUOTE

   ex01_09:
   
   #+BEGIN_SRC C
#include <iostream>

int main()
{
  int sum = 0;
  for (int val = 50; val <= 100; ++val)
    sum += val;                 // assigns sum + val to sum  
  std::cout << "Sum of 50 to 100 inclusive is "
            << sum << std::endl;

  return 0;
}
   #+END_SRC

   ex01_10:
   
   #+BEGIN_SRC C
#include <iostream>

int main()
{
  for (int val = 10; val >= 0; --val)
    std::cout << val << std::endl;
 
  return 0;
}
   #+END_SRC

   ex01_11:
   
   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Enter two numbers(v1 < v2):" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;

  for (int val = v1; val <= v2; ++val)
    std::cout << val << std::endl;
  
  return 0;
}
   #+END_SRC

** Exercise 1.14

   #+BEGIN_QUOTE
   Compare and contrast the loops that used a ~for~ with those using a
   ~while~. Are there advantages or disadvantages to using either
   form?
   #+END_QUOTE

   The main difference between the ~for~'s and the ~while~'s is a
   matter of pragmatics: we usually use ~for~ when there is a known
   number of iterations, and use ~while~ constructs when the number of
   iterations in not known in advance.
   
** Exercise 1.15

   #+BEGIN_QUOTE
   Write programs that contain the common errors discussed in the box
   on page 16. Familiarize yourself with the messages the compiler
   generates.
   #+END_QUOTE

   Okay :) 

** Exercise 1.16
   
   #+BEGIN_QUOTE
   Write your own version of a program that prints the sum of
   a set of integers read from ~cin~.
   #+END_QUOTE

   #+BEGIN_SRC C
#include <iostream>

int main()
{
  int sum = 0, value = 0;

  // read until end-of-file, calculating a running total of all values read
  while (std::cin >> value)
    sum += value;               // equivalent to sum = sum + value
  std::cout << "Sum is: " << sum << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 1.17
   
   #+BEGIN_QUOTE
   What happens in the program presented in this section if the input
   values are all equal? What if there are no duplicated values?
   #+END_QUOTE

   If the input values are all equal, the program will print a line
   which shows the number of the value you input.

   If there are no duplicated values, the program will print a line
   when different values input.

** Exercise 1.18

   #+BEGIN_QUOTE
   Compile and run the program from this section giving it only equal
   values as input. Run it again giving it values in which no number
   is repeated.
   #+END_QUOTE

   [[./img/fig01_18.png]]

** Exercise 1.19
   
   #+BEGIN_QUOTE
   Revise the program you wrote for the exercises in § 1.4.1 (p.13)
   that printed a range of numbers so that it handles input in which
   the first number is smaller than the second.
   #+END_QUOTE

   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Enter two numbers:" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;

  if (v1 > v2) {
    int temp = v1;
    v1 = v2;
    v2 = temp;
  }
  
  int val = v1;
  while (val <= v2) {
    std::cout << val << std::endl;
    ++val;
  }
  
  return 0;
}
   #+END_SRC
