** Exercise 1.1
   
   #+BEGIN_QUOTE
   Review the documentation for your compiler and determine what file
   naming convention it uses. Compile and run the main program from
   page 2.
   #+END_QUOTE
   
- [[http://labor-liber.org/en/gnu-linux/development/extensions][GCC and File Extensions]]
- [[https://msdn.microsoft.com/en-us/library/3awe4781.aspx][File Types Created for Visual C++ Projects]]
  
** Exercise 1.2
   
   #+BEGIN_QUOTE
   Change the program to return -1. A return value of -1 is often
   treated as an indicator that the program failed. Recompile and
   rerun your program to see how your system treats a failure
   indicator from main.
   #+END_QUOTE
   
   #+BEGIN_SRC C
int main()
{
  return -1;
}
   #+END_SRC
   
*** Linux
    [[./img/fig01_02a.png]]
    
    255 means "Exit status out of range".

*** Windows
    [[./img/fig01_02b.png]]
        
** Exercise 1.3
   
   #+BEGIN_QUOTE
   Write a program to print ~Hello, World~ on the standard output.
   #+END_QUOTE
   
   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Hello, World" << std::endl;
  return 0;
}
   #+END_SRC
** Exercise 1.4
   
   #+BEGIN_QUOTE
   Our program used the addition operator, +, to add two
   numbers. Write a program that uses the multiplication operator, *,
   to print the product instead.
   #+END_QUOTE

   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Enter two numbers:" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;
  std::cout << "The product of " << v1 << " and " << v2
            << " is " << v1 * v2 << std::endl;
  return 0;
}
   #+END_SRC
   
** Exercise 1.5
   
   #+BEGIN_QUOTE
   We wrote the output in one large statement. Rewrite the program to use
   a separate statement to print each operand.
   #+END_QUOTE
   
   #+BEGIN_SRC C
#include <iostream>

int main()
{
  std::cout << "Enter two numbers:" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;
  std::cout << "The product of ";
  std::cout << v1;
  std::cout << " and ";
  std::cout << v2;
  std::cout << " is ";
  std::cout << v1 * v2;
  std::cout << std::endl;
  return 0;
}
   #+END_SRC
** Exercise 1.6

   #+BEGIN_QUOTE
   Explain whether the following program fragment is legal.
   #+END_QUOTE

   #+BEGIN_SRC C
std::cout << "The sum of " << v1;
          << " and " << v2;
          << " is " << v1 + v2 << std::endl;
   #+END_SRC

   #+BEGIN_QUOTE
   If the program is legal, what does it do? If the program is not
   legal, why not? How would you fix it?
   #+END_QUOTE

   It is illegal. The spare semicolons should be removed.

   #+BEGIN_SRC C
std::cout << "The sum of " << v1 
          << " and " << v2 
          << " is " << v1 + v2 << std::endl;
   #+END_SRC

** Exercise 1.7

   #+BEGIN_QUOTE
   Compile a program that has incorrectly nested comments.
   #+END_QUOTE

   Example:
   #+BEGIN_SRC C
/*
 * comment pairs /*   */ cannot nest.
 * "cannot nest" is considered source code,
 * as is the rest of the program
 */
int main()
{
  return 0;
}   
   #+END_SRC

   [[./img/fig01_07.png]]

** Exercise 1.8

   #+BEGIN_QUOTE
   Indicate which, if any, of the following output statements are
   legal: 
   #+END_QUOTE

   #+BEGIN_SRC C
std::cout << "/*";
std::cout << "*/";
std::cout << /* "*/" */;
std::cout << /*  "*/" /* "/*"  */;
   #+END_SRC

   #+BEGIN_QUOTE
   After youâ€™ve predicted what will happen, test your answers by
   compiling a program with each of these statements. Correct any
   errors you encounter.
   #+END_QUOTE

   The third statement is wrong.
   [[./img/fig01_08.png]]

   It can be fixed by adding a quote:
   #+BEGIN_SRC C
std::cout << /* "*/" */";
   #+END_SRC
   
** Exercise 1.9

   #+BEGIN_QUOTE
   Write a program that uses a ~while~ to sum the numbers from 50
   to 100.
   #+END_QUOTE

   #+BEGIN_SRC C
#include <iostream>

int main()
{
  int sum = 0, val = 50;
  // keep executing the while as long as val is less than or equal to 100
  while (val <= 100) {
    sum += val;                 // assigns sum + val to sum
    ++val;                      // add 1 to val
  }
  std::cout << "Sum of 50 to 100 inclusive is "
            << sum << std::endl;

  return 0;
}
   #+END_SRC
