* Exercises Section 11.1
** Exercise 11.1
   #+BEGIN_QUOTE
   Describe the differences between a ~map~ and a ~vector~.
   #+END_QUOTE

   Associative and sequential containers differ from one another in a
   fundamental way: Elements in an associative container are stored and
   retrieved by a key. In contrast, elements in a sequential container are
   stored and accessed sequentially by their position in the container.

   Although the associative containers share much of the behavior of the
   sequential containers, they differ from the sequential containers in ways
   that reflect the use of keys.
 
** Exercise 11.2
   #+BEGIN_QUOTE
   Give an example of when each of ~list~, ~vector~, ~deque~, ~map~, and ~set~
   might be most useful.
   #+END_QUOTE
   
   + ~list~ : When a doubly-linked list is required.
   + ~vector~ : When a dynamic array is required.
   + ~deque~ : When we need "fast access" to insert/deletes at both ends of the
     line.
   + ~map~ : A dictionary would be a good use for a map: The word would be the
     key, and its definition would be the value.
   + ~set~ : We might use a set to hold words that we want to ignore during some
     kind of text processing.

** Exercise 11.3
   #+BEGIN_QUOTE
   Write your own version of the word-counting program.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <cstddef>
using std::size_t;

#include <string>
using std::string;

#include <map>
using std::map;

int main()
{
  // count the number of times each word occurs in the input
  map<string, size_t> word_count; // empty map from string to size_t
  string word;
  while (cin >> word)
    ++word_count[word];		// fetch and increment the counter for word
  for (const auto &w : word_count) // for each element in the map
    // print the results
    cout << w.first << " occurs " << w.second
	 << ((w.second > 1) ? " times" : " time") << endl;

  return 0;
}   
   #+END_SRC

** Exercise 11.4
   #+BEGIN_QUOTE
   Extend your program to ignore case and punctuation. For example, “example.”
   “example,” and “Example” should all increment the same counter.
   #+END_QUOTE
