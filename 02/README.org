* Exercises Section 2.1.1
** Exercise 2.1

   #+BEGIN_QUOTE
   What are the differences between ~int~, ~long~, ~long long~, and
   ~short~?  Between an unsigned and a signed type? Between a ~float~
   and a ~double~?
   #+END_QUOTE

   The language guarantees that an ~int~ will be as least as large as
   ~short~, a ~long~ at least as large as an ~int~, and ~long long~ at
   least as large as ~long~.

   A signed type represents negative or positive numbers (including
   zero); an unsigned type represents only values greater than or
   equal to zero.

   A float type represents single-precision values; a double type
   represents double-precision values.

** Exercise 2.2

   #+BEGIN_QUOTE
   To calculate a mortgage payment, what types would you use for the
   rate, principal, and payment? Explain why you selected each type.
   #+END_QUOTE

   ~double~.

   Use ~double~ for floating-point computations; ~float~ usually does
   not have enough precision, and the cost of double-precision
   calculations versus single-precision is negligible. In fact, on
   some machines, double-precision operations are faster than
   single. The precision offered by ~long double~ usually is
   unnecessary and often entails considerable run-time cost.

* Exercises Section 2.1.2
** Exercise 2.3

   #+BEGIN_QUOTE
   What output will the following code produce?
   #+END_QUOTE

   #+BEGIN_SRC C++ :include <iostream>
unsigned u = 10, u2 = 42;
std::cout << u2 - u << std::endl;
std::cout << u - u2 << std::endl;
int i = 10, i2 = 42;
std::cout << i2 - i << std::endl;
std::cout << i - i2 << std::endl;
 
std::cout << i - u << std::endl;
std::cout << u - i << std::endl;
   #+END_SRC
   
   [[./img/fig02_03.png]]

** Exercise 2.4

   #+BEGIN_QUOTE
   Write a program to check whether your predictions were correct. If
   not, study this section until you understand what the problem is.
   #+END_QUOTE

   Please refer to ex02_03.

* Exercises Section 2.1.3
** Exercise 2.5

   #+BEGIN_QUOTE
   Determine the type of each of the following literals. Explain the
   differences among the literals in each of the four examples:
   1. 'a', L'a', "a", L"a"
   2. 10, 10u, 10L, 10uL, 012, 0xC
   3. 3.14, 3.14f, 3.14L
   4. 10, 10u, 10., 10e-2
   #+END_QUOTE

   1. 'a', L'a', "a", L"a"
      + 'a': character literal, type is char 
      + L'a': wide character literal, type is wchar_t
      + "a": character string literal, type is array of constant char 
      + L"a": wide character string literal, type is array of constant wchar_t
        
   2. 10, 10u, 10L, 10uL, 012, 0xC
      + 10: integer literal, type is signed
      + 10u: unsigned integer literal, type is unsigned
      + 10L: integer literal, type is long
      + 10uL: unsigned integer literal, type is unsigned long
      + 012: integer literal (octal), type is signed
      + 0xC: integer literal (hexadecimal), type is signed 

   3. 3.14, 3.14f, 3.14L
      + 3.14: double-precision floating-point literal, type is double
      + 3.14f: single-precision floating-point literal, type is float
      + 3.14L: extended-precision floating-point literal, type is long double
        
   4. 10, 10u, 10., 10e-2
      + 10: integer literal, type is signed
      + 10u: unsigned integer literal, type is unsigned
      + 10.: double-precision floating-point literal, type is double
      + 10e-2: double-precision floating-point literal, type is double

** Exercise 2.6
   
   #+BEGIN_QUOTE
   What, if any, are the differences between the following
   definitions:
   #+END_QUOTE

   #+BEGIN_SRC C++
int month = 9, day = 7;
int month = 09, day = 07;
   #+END_SRC

   In the first line, both 9 and 7 are integer literals in
   decimal. While in the second line, 09 is invalid and 07 is a
   integer literal in octal.

** Exercise 2.7
   
   #+BEGIN_QUOTE
   What values do these literals represent? What type does each have?
   1. "Who goes with F\145rgus?\012"
   2. 3.14e1L
   3. 1024f
   4. 3.14L
   #+END_QUOTE

   1. Who goes with Fergus?\n, type is array of constant chars
   2. 31.4, type is double
   3. error: invalid suffix "f" on integer constant
   4. 3.14, type is long double

** Exercise 2.8
   
   #+BEGIN_QUOTE
   Using escape sequences, write a program to print ~2M~ followed by a
   newline. Modify the program to print ~2~, then a tab, then an ~M~,
   followed by a newline.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

int main()
{
  std::cout << "2M\n";
  std::cout << "2\tM\n";

  return 0;
}
   #+END_SRC
* Exercises Section 2.2.1
** Exercise 2.9
#+BEGIN_QUOTE
Explain the following definitions. For those that are illegal,
explain what's wrong and how to correct it.
+ (a) std::cin << int input_value;
+ (b) int i = { 3.14 };
+ (c) double salary = wage = 9999.99;
+ (d) int i = 3.14;
#+END_QUOTE
   
      + (a) Wrong. The variable input_value should be defined first.
        #+BEGIN_SRC C++
        int input_value; 
        std::cin >> input_value;
        #+END_SRC
      + (b) Wrong. The compiler will not let us list initialize variables of
        build-in typeif the initializer might lead to the loss of information.
        #+BEGIN_SRC C++
        double i = {3.14};
        #+END_SRC
      + (c) Wrong. The variable wage should be defined first.
        #+BEGIN_SRC C++
        double wage = 9999.99;
        double salary = 9999.99;
        #+END_SRC   
      + (d) Okay.

** Exercise 2.10
#+BEGIN_QUOTE
What are the initial values, if any, of each of the following variables?
#+END_QUOTE
#+BEGIN_SRC C++
std::string global_str;
int global_int;
int main()
{
    int local_int;
    std::string local_str;
}
#+END_SRC
Variables of build-in type defined outside any function body are initialized to
zero. The value of an uninitialized variable of build-in type is undefined. Most
classes let us define objects without explicit initializers. Here the initial
value of ~global_str~ is an empty string; the initial value of ~global_int~ is
zero; the value of ~local_int~ is undefined; the initial value of ~local_str~ is
an empty string.
* Exercises Section 2.2.2
** Exercise 2.11
#+BEGIN_QUOTE
Explain whether each of the following is a declaration or a
definition:
+ (a) extern int ix = 1024;
+ (b) int iy;
+ (c) extern int iz;
#+END_QUOTE
+ (a) definition. Any declaration that includes an explicit initializer is a
  definition. We can provide an initializer on a variable defined as ~extern~,
  but doing so overrides the ~extern~. An ~extern~ that has an initializer is a
  definition.
+ (b) definition.
+ (c) declaration. To obtain a declaration that is not also a definition, we add
  the ~extern~ keyword and may not provide an explicit initializer
* Exercises Section 2.2.3
** Exercise 2.12
#+BEGIN_QUOTE
Explain whether each of the following is a declaration or a
definition:
+ (a) extern int ix = 1024;
+ (b) int iy;
+ (c) extern int iz;
#+END_QUOTE
+ (a) definition. Any declaration that includes an explicit initializer is a
  definition. We can provide an initializer on a variable defined as ~extern~,
  but doing so overrides the ~extern~. An ~extern~ that has an initializer is a
  definition.
+ (b) definition.
+ (c) declaration. To obtain a declaration that is not also a definition, we add
  the ~extern~ keyword and may not provide an explicit initializer
#+BEGIN_QUOTE
Which, if any, of the following names are invalid?
+ (a) int double = 3.14;
+ (b) int _;
+ (c) int catch-22;
+ (d) int 1_or_2 = 1;
+ (e) double Double = 3.14;
#+END_QUOTE

(a),(c),(d) are invalid. Identifiers in C++ can be composed of letters, digits,
and the underscore character. The language imposes no limit on name
length. Identifiers must begin wih either a letter or an underscore. Identifiers
are case-sensitive; upper- and lowercase letters are distinct.
* Exercises Section 2.2.4
** Exercise 2.13
#+BEGIN_QUOTE
What is the value of j in the following program?
#+END_QUOTE
#+BEGIN_SRC C++
int i = 42;
int main()
{
int i = 100;
int j = i;
}
#+END_SRC
100
** Exercise 2.14
#+BEGIN_QUOTE
Is the following program legal? If so, what values are printed?
#+END_QUOTE
#+BEGIN_SRC C++
int i = 100, sum = 0;
for (int i = 0; i != 10; ++i)
sum += i;
std::cout << i << " " << sum << std::endl;
#+END_SRC
100 45
