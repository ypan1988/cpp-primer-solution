* Exercises Section 2.1.1
** Exercise 2.1

   #+BEGIN_QUOTE
   What are the differences between ~int~, ~long~, ~long long~, and
   ~short~?  Between an unsigned and a signed type? Between a ~float~
   and a ~double~?
   #+END_QUOTE

   The language guarantees that an ~int~ will be as least as large as
   ~short~, a ~long~ at least as large as an ~int~, and ~long long~ at
   least as large as ~long~.

   A signed type represents negative or positive numbers (including
   zero); an unsigned type represents only values greater than or
   equal to zero.

   A float type represents single-precision values; a double type
   represents double-precision values.

** Exercise 2.2

   #+BEGIN_QUOTE
   To calculate a mortgage payment, what types would you use for the
   rate, principal, and payment? Explain why you selected each type.
   #+END_QUOTE

   ~double~.

   Use ~double~ for floating-point computations; ~float~ usually does
   not have enough precision, and the cost of double-precision
   calculations versus single-precision is negligible. In fact, on
   some machines, double-precision operations are faster than
   single. The precision offered by ~long double~ usually is
   unnecessary and often entails considerable run-time cost.

* Exercises Section 2.1.2
** Exercise 2.3

   #+BEGIN_QUOTE
   What output will the following code produce?
   #+END_QUOTE

   #+BEGIN_SRC C++ :include <iostream>
unsigned u = 10, u2 = 42;
std::cout << u2 - u << std::endl;
std::cout << u - u2 << std::endl;
int i = 10, i2 = 42;
std::cout << i2 - i << std::endl;
std::cout << i - i2 << std::endl;
 
std::cout << i - u << std::endl;
std::cout << u - i << std::endl;
   #+END_SRC
   
   [[./img/fig02_03.png]]

** Exercise 2.4

   #+BEGIN_QUOTE
   Write a program to check whether your predictions were correct. If
   not, study this section until you understand what the problem is.
   #+END_QUOTE

   Please refer to ex02_03.

* Exercises Section 2.1.3
** Exercise 2.5

   #+BEGIN_QUOTE
   Determine the type of each of the following literals. Explain the
   differences among the literals in each of the four examples:
   1. 'a', L'a', "a", L"a"
   2. 10, 10u, 10L, 10uL, 012, 0xC
   3. 3.14, 3.14f, 3.14L
   4. 10, 10u, 10., 10e-2
   #+END_QUOTE

   1. 'a', L'a', "a", L"a"
      + 'a': character literal, type is char 
      + L'a': wide character literal, type is wchar_t
      + "a": character string literal, type is array of constant char 
      + L"a": wide character string literal, type is array of constant wchar_t
        
   2. 10, 10u, 10L, 10uL, 012, 0xC
      + 10: integer literal, type is signed
      + 10u: unsigned integer literal, type is unsigned
      + 10L: integer literal, type is long
      + 10uL: unsigned integer literal, type is unsigned long
      + 012: integer literal (octal), type is signed
      + 0xC: integer literal (hexadecimal), type is signed 

   3. 3.14, 3.14f, 3.14L
      + 3.14: double-precision floating-point literal, type is double
      + 3.14f: single-precision floating-point literal, type is float
      + 3.14L: extended-precision floating-point literal, type is long double
        
   4. 10, 10u, 10., 10e-2
      + 10: integer literal, type is signed
      + 10u: unsigned integer literal, type is unsigned
      + 10.: double-precision floating-point literal, type is double
      + 10e-2: double-precision floating-point literal, type is double

** Exercise 2.6
   
   #+BEGIN_QUOTE
   What, if any, are the differences between the following
   definitions:
   #+END_QUOTE

   #+BEGIN_SRC C++
int month = 9, day = 7;
int month = 09, day = 07;
   #+END_SRC

   In the first line, both 9 and 7 are integer literals in
   decimal. While in the second line, 09 is invalid and 07 is a
   integer literal in octal.

** Exercise 2.7
   
   #+BEGIN_QUOTE
   What values do these literals represent? What type does each have?
   1. "Who goes with F\145rgus?\012"
   2. 3.14e1L
   3. 1024f
   4. 3.14L
   #+END_QUOTE

   1. Who goes with Fergus?\n, type is array of constant chars
   2. 31.4, type is double
   3. error: invalid suffix "f" on integer constant
   4. 3.14, type is long double

** Exercise 2.8
   
   #+BEGIN_QUOTE
   Using escape sequences, write a program to print ~2M~ followed by a
   newline. Modify the program to print ~2~, then a tab, then an ~M~,
   followed by a newline.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

int main()
{
  std::cout << "2M\n";
  std::cout << "2\tM\n";

  return 0;
}
   #+END_SRC
* Exercises Section 2.2.1
** Exercise 2.9
#+BEGIN_QUOTE
Explain the following definitions. For those that are illegal,
explain what's wrong and how to correct it.
+ (a) std::cin << int input_value;
+ (b) int i = { 3.14 };
+ (c) double salary = wage = 9999.99;
+ (d) int i = 3.14;
#+END_QUOTE
   
      + (a) Wrong. The variable input_value should be defined first.
        #+BEGIN_SRC C++
        int input_value; 
        std::cin >> input_value;
        #+END_SRC
      + (b) Wrong. The compiler will not let us list initialize variables of
        build-in typeif the initializer might lead to the loss of information.
        #+BEGIN_SRC C++
        double i = {3.14};
        #+END_SRC
      + (c) Wrong. The variable wage should be defined first.
        #+BEGIN_SRC C++
        double wage = 9999.99;
        double salary = 9999.99;
        #+END_SRC   
      + (d) Okay.

** Exercise 2.10
#+BEGIN_QUOTE
What are the initial values, if any, of each of the following variables?
#+END_QUOTE
#+BEGIN_SRC C++
std::string global_str;
int global_int;
int main()
{
    int local_int;
    std::string local_str;
}
#+END_SRC
Variables of build-in type defined outside any function body are initialized to
zero. The value of an uninitialized variable of build-in type is undefined. Most
classes let us define objects without explicit initializers. Here the initial
value of ~global_str~ is an empty string; the initial value of ~global_int~ is
zero; the value of ~local_int~ is undefined; the initial value of ~local_str~ is
an empty string.
* Exercises Section 2.2.2
** Exercise 2.11
#+BEGIN_QUOTE
Explain whether each of the following is a declaration or a
definition:
+ (a) extern int ix = 1024;
+ (b) int iy;
+ (c) extern int iz;
#+END_QUOTE
+ (a) definition. Any declaration that includes an explicit initializer is a
  definition. We can provide an initializer on a variable defined as ~extern~,
  but doing so overrides the ~extern~. An ~extern~ that has an initializer is a
  definition.
+ (b) definition.
+ (c) declaration. To obtain a declaration that is not also a definition, we add
  the ~extern~ keyword and may not provide an explicit initializer
* Exercises Section 2.2.3
** Exercise 2.12
#+BEGIN_QUOTE
Explain whether each of the following is a declaration or a
definition:
+ (a) extern int ix = 1024;
+ (b) int iy;
+ (c) extern int iz;
#+END_QUOTE
+ (a) definition. Any declaration that includes an explicit initializer is a
  definition. We can provide an initializer on a variable defined as ~extern~,
  but doing so overrides the ~extern~. An ~extern~ that has an initializer is a
  definition.
+ (b) definition.
+ (c) declaration. To obtain a declaration that is not also a definition, we add
  the ~extern~ keyword and may not provide an explicit initializer
#+BEGIN_QUOTE
Which, if any, of the following names are invalid?
+ (a) int double = 3.14;
+ (b) int _;
+ (c) int catch-22;
+ (d) int 1_or_2 = 1;
+ (e) double Double = 3.14;
#+END_QUOTE

(a),(c),(d) are invalid. Identifiers in C++ can be composed of letters, digits,
and the underscore character. The language imposes no limit on name
length. Identifiers must begin wih either a letter or an underscore. Identifiers
are case-sensitive; upper- and lowercase letters are distinct.
* Exercises Section 2.2.4
** Exercise 2.13
#+BEGIN_QUOTE
What is the value of j in the following program?
#+END_QUOTE
#+BEGIN_SRC C++
int i = 42;
int main()
{
int i = 100;
int j = i;
}
#+END_SRC
100
** Exercise 2.14
#+BEGIN_QUOTE
Is the following program legal? If so, what values are printed?
#+END_QUOTE
#+BEGIN_SRC C++
int i = 100, sum = 0;
for (int i = 0; i != 10; ++i)
sum += i;
std::cout << i << " " << sum << std::endl;
#+END_SRC
100 45
* Exercises Section 2.3.1
** Exercise 2.15
#+BEGIN_QUOTE
Which of the following definitions, if any, are invalid? Why?
+ (a) int ival = 1.01;
+ (b) int &rval1 = 1.01;
+ (c) int &rval2 = ival;
+ (d) int &rval3;
#+END_QUOTE
+ (a) valid.
+ (b) invalid. initializer must be an object.
+ (c) valid.
+ (d) invalid. a reference must be initialized.
** Exercise 2.16
#+BEGIN_QUOTE
Which, if any, of the following assignments are invalid? If they are valid,
explain what they do.
+ int i = 0, &r1 = i; double d = 0, &r2 = d;
+ (a) r2 = 3.14159;
+ (b) r2 = r1;
+ (c) i = r2;
+ (d) r1 = d;
#+END_QUOTE
+ (a) valid. assigning to r2 actually assigns to d. 
+ (b) valid. convert an int to double, change the value of d and r2. 
+ (c) valid. convert an double to int.
+ (d) valid. convert an double to int, change the value of i and r1.
** Exercise 2.17
#+BEGIN_QUOTE
What does the following code print?
#+END_QUOTE
#+BEGIN_SRC C++
int i, &ri = i;
i = 5; ri = 10;
std::cout << i << " " << ri << std::endl;
#+END_SRC
10 10
* Exercises Section 2.3.2
** Exercise 2.18
#+BEGIN_QUOTE
Write code to change the value of a pointer. Write code to change the
value to which the pointer points.
#+END_QUOTE

#+BEGIN_SRC C++
#include <iostream>

int main()
{
  int ival1 = 42, ival2 = 1024;
  int *p1 = &ival1, *p2 = &ival2;

  std::cout << ival1 << " " << *p1 << std::endl;
  p1 = p2;			// change the value of a pointer
  std::cout << *p1 << std::endl;

  std::cout << ival2 << " " << *p2 << std::endl;
  *p2 = 0;			// change the value to which the pointer points
  std::cout << *p2 << std::endl;

  return 0;
} 
#+END_SRC

** Exercise 2.19
#+BEGIN_QUOTE
Explain the key differences between pointers and references.
#+END_QUOTE
Both pointers and references give indirect accesss to other objects. However,
there are important differences in how they do so. The most important is that a
reference is not an object. Once we have defined a reference, there is no way to
make that reference refer to a different object. When we use a reference, we
always get the object to which the reference was initially bound. There is no
such identity between a pointer and the address that it holds. As with any other
(nonreference) variable, when we assign to a pointer, we give the pointer itself
a new value. Assignment makes the pointer point to a different object.

** Exercise 2.20
#+BEGIN_QUOTE
What does the following program do?
#+END_QUOTE
#+BEGIN_SRC C++
int i = 42;
int *p1 = &i;
*p1 = *p1 * *p1;
#+END_SRC
Initialize p1 to hold the address of i and change value of i to 1764 (42 * 42).

** Exercise 2.21
#+BEGIN_QUOTE
Explain each of the following definitions. Indicate whether any are illegal and,
if so, why.
+ int i = 0;
+ (a) double* dp = &i;
+ (b) int *ip = i;
+ (c) int *p = &i;
#+END_QUOTE
+ (a) illegal. The types must match because the type of the pointer is used to
  infer the type of the object to which the pointer points. If a pointer
  addressed an object of another type, operations performed on the underlying
  object would fail.

+ (b) illegal. The initializer should be the address of a double.

+ (c) legal.

** Exercise 2.22
#+BEGIN_QUOTE
Assuming ~p~ is a pointer to ~int~, explain the following code:
+ if (p) // ...
+ if (*p) // ...
#+END_QUOTE
+ if (p) // the condition evaluates as false when p has value nullptr or 0.
+ if (*p) // the condition evaluetes as true when the object p points to has
  a nonzero value.

** Exercise 2.23
#+BEGIN_QUOTE
Given a pointer ~p~, can you determine whether ~p~ points to a valid object? If
so, how? If not, why not?
#+END_QUOTE
No. Under most compilers, when we use an uninitialized pointer, the bits in the
memory in which the pointer resides are used as an address. Using an
uninitialized pointer is a request to access a supposed object at that supposed
location. There is no way to distinguish a valid address from an invalid one
formed from the bits that happen to be in the memory in which the pointer was
allocated.

** Exercise 2.24
#+BEGIN_QUOTE
Why is the initialization of ~p~ legal but that of ~lp~ illegal?
+ int i = 42; void *p = &i; long *lp = &i;
#+END_QUOTE
The type void* is a special pointer type that can hold the address of any
object, hence the initialization of ~p~ is legal. The types must match because
the type of the pointer is used to infer the type of the object to which the
pointer points, so the initialization of ~lp~ is illegal.
* Exercises Section 2.3.3
** Exercise 2.25
#+BEGIN_QUOTE
Determine the types and values of each of the following variables.
+ (a) int* ip, &r = ip;
+ (b) int i, *ip = 0;
+ (c) int* ip, ip2;
#+END_QUOTE
+ (a) ip is a pointer to int, r is reference to the pointer ip.
+ (b) i is an int, ip is a pointer to int.
+ (c) ip is a pointer to int, ip2 is an int.
* Exercises Section 2.4
** Exercise 2.26
#+BEGIN_QUOTE
Which of the following are legal? For those that are illegal, explain why.
+ (a) const int buf;
+ (b) int cnt = 0;
+ (c) const int sz = cnt;
+ (d) ++cnt; ++sz;
#+END_QUOTE  
+ (a) illegal. buf is uninitialized const.
+ (b) legal.
+ (c) legal.
+ (d) illegal. sz is const and we cannot change its value.

* Exercises Section 2.4.2
** Exercise 2.27
#+BEGIN_QUOTE
Which of the following initializations are legal? Explain why.
+ (a) int i = -1, &r = 0;
+ (b) int *const p2 = &i2;
+ (c) const int i = -1, &r = 0;
+ (d) const int *const p3 = &i2;
+ (e) const int *p1 = &i2;
+ (f) const int &const r2;
+ (g) const int i2 = i, &r = i;
#+END_QUOTE
+ (a) illegal. initializer for r must be an object.
+ (b) legal.
+ (c) legal. we can initialize a reference to const from any expression that can
  be converted to the type of the reference.
+ (d) legal.
+ (e) legal.
+ (f) illegal. r2 is a reference which cannot be const.
+ (g) legal.

** Exercise 2.28
#+BEGIN_QUOTE
Explain the following definitions. Identify any that are illegal.
+ (a) int i, *const cp;
+ (b) int *p1, *const p2;
+ (c) const int ic, &r = ic;
+ (d) const int *const p3;
+ (e) const int *p;
#+END_QUOTE
+ (a) illegal. cp nust be initialized.
+ (b) illegal. p2 must be initialized.
+ (c) illegal. ic must be initialized.
+ (d) illegal. p3 must be initialized.
+ (e) legal. p is a pointer to a const int. 

** Exercise 2.29
#+BEGIN_QUOTE
Using the variables in the previous exercise, which of the following assignments
are legal? Explain why.
+ (a) i = ic;
+ (b) p1 = p3;
+ (c) p1 = &ic;
+ (d) p3 = &ic;
+ (e) p2 = p1;
+ (f) ic = *p3;
#+END_QUOTE
+ (a) legal.
+ (b) illegal. p1 is a plain pointer.
+ (c) illegal. p1 is a plain pointer.
+ (d) illegal. p3 is a const pointer.
+ (e) illegal. p2 is a const pointer.
+ (f) illegal. ic is a const int.


* Exercises Section 2.4.3
** Exercise 2.30
#+BEGIN_QUOTE
For each of the following declarations indicate whether the object
being declared has top-level or low-level ~const~.
#+END_QUOTE
#+BEGIN_SRC C++
const int v2 = 0; int v1 = v2;
int *p1 = &v1, &r1 = v1;
const int *p2 = &v2, *const p3 = &i, &r2 = v2;
#+END_SRC
~v2~ has a top-level const, ~p2~ has a low-level const, ~p3~ has both
a top-level and low-level ~const~.

** Exercise 3.31
#+BEGIN_QUOTE
Given the declarations in the previous exercise determine whether the
following assignments are legal. Explain how the top-level or
low-level const applies in each case.
#+END_QUOTE
#+BEGIN_SRC C++
r1 = v2;
p1 = p2; p2 = p1;
p1 = p3; p2 = p3;
#+END_SRC
+ r1 = v2; // legal. copying the value of ~v2~, top-level const in
  ~v2~ is ignored.
+ p1 = p2; // illegal. ~p2~ has a low-level const but ~p1~ doesn't.
+ p2 = p1; // legal. When we copy an object, both objects must have
  the same low-level const qualification or there must be a conversion
  between the types of the two objects. In general, we can convert a
  nonconst to const but not the other way round.
+ p1 = p3;  // illegal. ~p3~ has a low-level const but ~p1~ doesn't.
+ p2 = p3; // legal. ~p2~ and ~p3~ have the same low-level const
  qualification.
