** Exercise 2.1

   #+BEGIN_QUOTE
   What are the differences between ~int~, ~long~, ~long long~, and
   ~short~?  Between an unsigned and a signed type? Between a ~float~
   and a ~double~?
   #+END_QUOTE

   The language guarantees that an ~int~ will be as least as large as
   ~short~, a ~long~ at least as large as an ~int~, and ~long long~ at
   least as large as ~long~.

   A signed type represents negative or positive numbers (including
   zero); an unsigned type represents only values greater than or
   equal to zero.

   A float type represents single-precision values; a double type
   represents double-precision values.

** Exercise 2.2

   #+BEGIN_QUOTE
   To calculate a mortgage payment, what types would you use for the
   rate, principal, and payment? Explain why you selected each type.
   #+END_QUOTE

   ~double~.

   Use ~double~ for floating-point computations; ~float~ usually does
   not have enough precision, and the cost of double-precision
   calculations versus single-precision is negligible. In fact, on
   some machines, double-precision operations are faster than
   single. The precision offered by ~long double~ usually is
   unnecessary and often entails considerable run-time cost.

