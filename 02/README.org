** Exercise 2.1

   #+BEGIN_QUOTE
   What are the differences between ~int~, ~long~, ~long long~, and
   ~short~?  Between an unsigned and a signed type? Between a ~float~
   and a ~double~?
   #+END_QUOTE

   The language guarantees that an ~int~ will be as least as large as
   ~short~, a ~long~ at least as large as an ~int~, and ~long long~ at
   least as large as ~long~.

   A signed type represents negative or positive numbers (including
   zero); an unsigned type represents only values greater than or
   equal to zero.

   A float type represents single-precision values; a double type
   represents double-precision values.

** Exercise 2.2

   #+BEGIN_QUOTE
   To calculate a mortgage payment, what types would you use for the
   rate, principal, and payment? Explain why you selected each type.
   #+END_QUOTE

   ~double~.

   Use ~double~ for floating-point computations; ~float~ usually does
   not have enough precision, and the cost of double-precision
   calculations versus single-precision is negligible. In fact, on
   some machines, double-precision operations are faster than
   single. The precision offered by ~long double~ usually is
   unnecessary and often entails considerable run-time cost.

** Exercise 2.3

   #+BEGIN_QUOTE
   What output will the following code produce?
   #+END_QUOTE

   #+BEGIN_SRC C++ :include <iostream>
unsigned u = 10, u2 = 42;
std::cout << u2 - u << std::endl;
std::cout << u - u2 << std::endl;
int i = 10, i2 = 42;
std::cout << i2 - i << std::endl;
std::cout << i - i2 << std::endl;
 
std::cout << i - u << std::endl;
std::cout << u - i << std::endl;
   #+END_SRC
   
   [[./img/fig02_03.png]]

** Exercise 2.4

   #+BEGIN_QUOTE
   Write a program to check whether your predictions were correct. If
   not, study this section until you understand what the problem is.
   #+END_QUOTE

   Please refer to ex02_03.

** Exercise 2.5

   #+BEGIN_QUOTE
   Determine the type of each of the following literals. Explain the
   differences among the literals in each of the four examples:
   (a) 'a', L'a', "a", L"a" \\
   (b) 10, 10u, 10L, 10uL, 012, 0xC \\
   (c) 3.14, 3.14f, 3.14L \\
   (d) 10, 10u, 10., 10e-2 \\
   #+END_QUOTE

   (a)
   + 'a': character literal, type is char 
   + L'a': wide character literal, type is wchar_t
   + "a": character string literal, type is array of constant char 
   + L"a": wide character string literal, type is array of constant wchar_t
