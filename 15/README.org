* Exercises Section 15.2.1
** Exercise 15.1

#+BEGIN_QUOTE
What is a virtual member?
#+END_QUOTE
  
The base class defines as ~virtual~ those functions it expects its derived
classes to override.
 
** Exercise 15.2 

#+BEGIN_QUOTE
How does the ~protected~ access specifier differ from ~private~?
#+END_QUOTE

Like any other code that uses the base class, a derived class may access the
~public~ members of its base class but may not access the ~private~ members.
However, sometimes a base class has members that it wants to let its derived
classes use while still prohibiting access to those same members by other users.
We specify such members after a ~protected~ access specifier.

** Exercise 15.3

#+BEGIN_QUOTE
Define your own versions of the ~Quote~ class and the ~print_total~ function.
#+END_QUOTE

Define ~Quote~ class (Quote1.h):
#+BEGIN_SRC C++
class Quote {
  public:
    Quote() = default;            // = default see 7.1.4 (p.264)
  Quote(const std::string &book, double sales_price) :
    bookNo(book), price(sales_price) { }

    std::string isbn() const { return bookNo; }

    // returns the total sales price for the specified number of items
    // derived classes will override and apply different discount algorithms
    virtual double net_price(std::size_t n) const
    { return n * price; }

    virtual ~Quote() = default;   // dynamic binding for the destructor

  private:
    std::string bookNo;           // ISBN number of this item

  protected:
    double price = 0.0;           // normal, undiscounted price 
};
#+END_SRC

Define ~print_total~ function (Quote1.cc):
#+BEGIN_SRC C++
// calculate and print the price for the give number if copies, applying any
// discount
double print_total(ostream &os, const Quote &item, size_t n)
{
  // depending on the type of the object bound to the item parameter
  // calls either Quote::net_price or Bulk_quote::net_price
  double ret = item.net_price(n);
  os << "ISBN: " << item.isbn() // calls Quote::isbn
     << " # sold@ "<< n << " total due: " << ret << endl;
  return ret;
}
#+END_SRC


* Exercises Section 15.2.2
** Exercise 15.4

#+BEGIN_QUOTE
Which of the following declarations, if any, are incorrect? Explain why.
#+END_QUOTE

#+BEGIN_SRC C++
class Base { ... };
(a) class Derived : public Derived { ... };
(b) class Derived : private Base { ... };
(c) class Derived : public Base;
#+END_SRC

+ (a) error: it is impossible to derive a class from itself.
+ (b) error: it is a definition instead of a declaration.
+ (c) error: derivation lists can's appear here, should be "class Derived;".

** Exercise 15.5

#+BEGIN_QUOTE
Define your own version of the ~Bulk_quote~ class
#+END_QUOTE

Define ~Bulk_quote~ class (Quote1.h):
#+BEGIN_SRC C++
class Bulk_quote : public Quote { // Bulk_quote inherits from Quote
 public:
  Bulk_quote() = default;
 Bulk_quote(const std::string& book, double p, std::size_t qty, double disc) :
  Quote(book, p), min_qty(qty), discount(disc) { }

  // overrides the base version in order to implement the bulk purchase discount
  // policy
  double net_price(std::size_t) const override;

 private:
  std::size_t min_qty = 0;      // minimum purchase for the discount to apply
  double discount = 0.0;        // fractional discount to apply
};
#+END_SRC

Define ~Bulk_quote~ class (Quote1.cc):
#+BEGIN_SRC C++
// if the specified number of items are purchased, use the discounted price
double Bulk_quote::net_price(size_t cnt) const
{
  if (cnt >= min_qty)
    return cnt * (1 - discount) * price;
  else
    return cnt * price;
}
#+END_SRC

** Exercise 15.6

#+BEGIN_QUOTE
Test your ~print_total~ function from the exercises in § 15.2.1 (p. 595) by
passing both ~Quote~ and ~Bulk_quote~ objects to that function.
#+END_QUOTE

#+BEGIN_SRC C++
#include <iostream>
using std::cout;

#include "Quote1.h"

int main()
{
  Quote base("0-201-82470-1", 50);
  print_total(cout, base, 10);  // calls Quotes::net_price

  Bulk_quote derived("0-201-82470-1", 50, 5, 0.19);
  print_total(cout, derived, 10);  // calls Bulk_quotes::net_price

  return 0;
}
#+END_SRC

[[./img/fig15_06.png]]

** Exercise 15.7

#+BEGIN_QUOTE
Define a class that implements a limited discount strategy, which applies a
discount to books purchased up to a given limit. If the number of copies exceeds
that limit, the normal price applies to those purchased beyond the limit.
#+END_QUOTE

Define ~Lim_quote~ class (Quote1.h):
#+BEGIN_SRC C++
class Lim_quote : public Quote { // Lim_quote inherits from Quote
  public:
    Lim_quote() = default;
  Lim_quote(const std::string& book, double p, std::size_t qty, double disc) :
    Quote(book, p), max_qty(qty), discount(disc) { }

    // overrides the base version in order to implement limited discount policy
    double net_price(std::size_t) const override;

  private:
    std::size_t max_qty = 0;      // maximum purchase for the discount to apply
    double discount = 0.0;        // fractional discount to apply
};
#+END_SRC

Define ~Lim_quote~ class (Quote1.cc):
#+BEGIN_SRC C++
// use discounted price for up to a specified number of items
// additional items priced at normal, undiscounted price
double Lim_quote::net_price(size_t cnt) const
{
  if (cnt <= max_qty)
    return cnt * (1 - discount) * price;
  else
    return cnt * price - max_qty * discount * price;
}
#+END_SRC


* Exercises Section 15.2.3
** Exercise 15.8

#+BEGIN_QUOTE
Define static type and dynamic type.
#+END_QUOTE

The *static* type of an expression is always known at compile time -- it is the
type with which a variable is declared or that an expression yields. The *dynamic*
type is the type of the object in memory that the variable or expression
represents. The dynamic type may not be known until run time.

** Exercise 15.9

#+BEGIN_QUOTE
When is it possible for an expression’s static type to differ from its dynamic
type? Give three examples in which the static and dynamic type differ.
#+END_QUOTE

Virtuals are resolved at run time only if the call is made through a reference
or pointer. Only in these cases is it possible for an object's dynamic type to
differ from its static type.

#+BEGIN_SRC C++
#include<iostream>
#include "Quote1.h"

int main()
{
    Bulk_quote derived("0-201-82470-1", 50, 5, 0.19);

    Quote &quote_ref = derived;
    quote_ref.net_price(10);

    Quote *quote_ptr = &derived;
    quote_ptr->net_price(10);

    return 0;
}
#+END_SRC

** Exercise 15.10
#+BEGIN_QUOTE
Recalling the discussion from §8.1 (p. 311), explain how the program on page 317
that passed an ~ifstream~ to the ~Sales_data~ read function works.
#+END_QUOTE


* Exercises Section 15.3
** Exercise 15.11
#+BEGIN_QUOTE
Add a virtual ~debug~ function to your ~Quote~ class hierarchy that displays the
data members of the respective classes.
#+END_QUOTE

Add virtual ~debug~ functions (Quote1.h):
#+BEGIN_SRC C++
class Quote {
  public:
    Quote() = default;            // = default see 7.1.4 (p.264)
  Quote(const std::string &book, double sales_price) :
    bookNo(book), price(sales_price) { }

    std::string isbn() const { return bookNo; }

    // returns the total sales price for the specified number of items
    // derived classes will override and apply different discount algorithms
    virtual double net_price(std::size_t n) const
    { return n * price; }

    virtual void debug() const;

    virtual ~Quote() = default;   // dynamic binding for the destructor

  private:
    std::string bookNo;           // ISBN number of this item

  protected:
    double price = 0.0;           // normal, undiscounted price
};

class Bulk_quote : public Quote { // Bulk_quote inherits from Quote
  public:
    Bulk_quote() = default;
  Bulk_quote(const std::string& book, double p, std::size_t qty, double disc) :
    Quote(book, p), min_qty(qty), discount(disc) { }

    // overrides the base version in order to implement the bulk purchase discount
    // policy
    double net_price(std::size_t) const override;

    void debug() const override;

  private:
    std::size_t min_qty = 0;      // minimum purchase for the discount to apply
    double discount = 0.0;        // fractional discount to apply
};

class Lim_quote : public Quote { // Lim_quote inherits from Quote
  public:
    Lim_quote() = default;
  Lim_quote(const std::string& book, double p, std::size_t qty, double disc) :
    Quote(book, p), max_qty(qty), discount(disc) { }

    // overrides the base version in order to implement limited discount policy
    double net_price(std::size_t) const override;

    void debug() const override;

  private:
    std::size_t max_qty = 0;      // maximum purchase for the discount to apply
    double discount = 0.0;        // fractional discount to apply
};
#+END_SRC

Add virtual ~debug~ functions (Quote1.cc):
#+BEGIN_SRC C++
void Quote::debug() const
{
  cout << "Data members of the class: " << endl
       << "bookNo = " << this->bookNo << endl
       << "price = " << this->price << endl;
}

void Bulk_quote::debug() const
{
  Quote::debug();
  cout << "min_qty = " << this->min_qty << endl
       << "discount = " << this->discount << endl;
}

void Lim_quote::debug() const
{
  Quote::debug();
  cout << "max_qty = " << this->max_qty << endl
       << "discount = " << this->discount << endl;
}
#+END_SRC


** Exercise 15.12 

#+BEGIN_QUOTE
Is it ever useful to declare a member function as both ~override~ and ~final~?
Why or why not?
#+END_QUOTE

Yes. It is useful. ~override~ explicitly note that a derived class intends a
member function to override a virtual that it inherits. ~final~ is used to
prevent a class from being used as a base.

** Exercise 15.13
#+BEGIN_QUOTE
Given the following classes, explain each ~print~ function:
#+END_QUOTE

#+BEGIN_SRC C++
class base {
public:
  string name() { return basename; }
  virtual void print(ostream &os) { os << basename; }
private:
  string basename;
};
class derived : public base {
public:
  void print(ostream &os) { print(os); os << " " << i; }
private:
  int i;
};
#+END_SRC

#+BEGIN_QUOTE
If there is a problem in this code, how would you fix it?
#+END_QUOTE

*  Exercise Section 15.5
**  Exercise 15.18
#+BEGIN_QUOTE
Given the classes from page 612 and page 613, and assuming each object has the
type specified in the comments, determine which of these assignments are legal.
Explain why those that are illegal aren’t allowed:
#+END_QUOTE

#+BEGIN_SRC C++
Base *p = &d1;  //  d1 has type Pub_Derv
p = &d2;        //  d2 has type Priv_Derv
p = &d3;        //  d3 has type Prot_Derv
p = &dd1;       //  dd1 has type Derived_from_Public
p = &dd2;       //  dd2 has type Derived_from_Private
p = &dd3;       //  dd3 has type Derived_from_Protected
#+END_SRC 

+ Base *p = &d1;  // legal
+ p = &d2;        // illegal
+ p = &d3;        // illegal
+ p = &dd1;       // legal
+ p = &dd2;       // illegal
+ p = &dd3;       // illegal
