** Exercise 15.1

#+BEGIN_QUOTE
What is a virtual member?
#+END_QUOTE
  
The base class defines as ~virtual~ those functions it expects its derived
classes to override.
 
** Exercise 15.2 

#+BEGIN_QUOTE
How does the ~protected~ access specifier differ from ~private~?
#+END_QUOTE

Like any other code that uses the base class, a derived class may access the
~public~ members of its base class but may not access the ~private~ members.
However, sometimes a base class has members that it wants to let its derived
classes use while still prohibiting access to those same members by other users.
We specify such members after a ~protected~ access specifier.

** Exercise 15.3

#+BEGIN_QUOTE
Define your own versions of the ~Quote~ class and the ~print_total~ function.
#+END_QUOTE

** Exercise 15.4

#+BEGIN_QUOTE
Which of the following declarations, if any, are incorrect? Explain why.
#+END_QUOTE

#+BEGIN_SRC C++
class Base { ... };
(a) class Derived : public Derived { ... };
(b) class Derived : private Base { ... };
(c) class Derived : public Base;
#+END_SRC

+ (a) error: it is impossible to derive a class from itself
+ (b) error: it is a definition instead of a declaration
+ (c) error: derivation lists can's appear here

** Exercise 15.5

#+BEGIN_QUOTE
Define your own version of the ~Bulk_quote~ class
#+END_QUOTE

** Exercise 15.8

#+BEGIN_QUOTE
Define static type and dynamic type.
#+END_QUOTE

The *static* type of an expression is always known at compile time -- it is the
type with which a variable is declared or that an expression yields. The *dynamic*
type is the type of the object in memory that the variable or expression
represents. The dynamic type may not be known until run time.
