* Exercises Section 3.1
** Exercise 3.1
   
   #+BEGIN_QUOTE
   Rewrite the exercises from ยง 1.4.1 (p. 13) and ยง 2.6.2 (p. 76) with appropriate
   ~using~ declarations.
   #+END_QUOTE
   
   ยง 1.4.1
   #+BEGIN_SRC C++
#include <iostream>
using std::cout;
using std::endl;

int main()
{
  int sum = 0, val = 1;
  // keep executing the while as long as val is less than or equal to 10
  while (val <= 10) {
    sum += val;                 // assigns sum + val to sum
    ++val;                      // add 1 to val
  }
  cout << "Sum of 1 to 10 inclusive is "
       << sum << endl;

  return 0;
}
   #+END_SRC
   
   ยง 2.6.2
   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include "Sales_data.h"

using std::cin;
using std::cout;
using std::endl;
using std::cerr;

int main()
{
  Sales_data data1, data2;

  // code to read into data1 and data2
  double price = 0;		// price per book, used to calculate total revenue

  // read the first transactions: ISBN, number of books sold, price per book
  cin >> data1.bookNo >> data1.units_sold >> price;
  // calculate total revenue from price and units_sold
  data1.revenue = data1.units_sold * price;

  // read the second transaction
  cin >> data2.bookNo >> data2.units_sold >> price;
  data2.revenue = data2.units_sold * price;

  // code to check whether data1 and data2 have the same ISBN
  //      and if so print the sum of data1 and data2
  if (data1.bookNo == data2.bookNo) {
    unsigned totalCnt = data1.units_sold + data2.units_sold;
    double totalRevenue = data1.revenue + data2.revenue;
    // print: ISBN, total sold, total revenue, average price per book
    cout << data1.bookNo << " " << totalCnt
	 << " " << totalRevenue << " ";
    if (totalCnt != 0)
      cout << totalRevenue/totalCnt << endl;
    else
      cout << "(no sales)" << endl;
    return 0;			// indicate success
  } else {			// transactions were's for the same ISBN
    cerr << "Data must refer to the same ISBN"
	 << endl;
    return -1;			// indicate failure
  }
}
   #+END_SRC
   
* Exercises Section 3.2.2
** Exercise 3.2
   
   #+BEGIN_QUOTE
   Write a program to read the standard input a line at a time. Modify your
   program to read a word at a time.
   #+END_QUOTE
   
   - read the standard input a line at a time
   #+BEGIN_SRC C++
#include <string>
using std::string; using std::getline;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string line;

  while (getline(cin, line))
    cout << line << endl;

  return 0;
}   
   #+END_SRC
   
   - read a word at a time
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string word;

  while (cin >> word)
    cout << word << endl;

  return 0;
}   
   #+END_SRC

** Exercise 3.3

   #+BEGIN_QUOTE
   Explain how whitespace characters are handled in the ~string~ input operator
   and in the ~getline~ function.
   #+END_QUOTE

   The ~string~ input operator reads and discards any leading whitespace (e.g.,
   spaces, newlines, tabs). It then reads characters untill the next whitespace
   character is encountered. Sometimes we do not want to ignore the whitespace
   in our input. In such cases, we can use the ~getline~ function instead of the
   >> operator.

** Exercise 3.4

   #+BEGIN_QUOTE
   Write a program to read two ~strings~ and report whether the ~strings~ are
   equal. If not, report which of the two is larger. Now, change the program to
   report whether the ~strings~ have the same length, and if not, report which
   is longer.
   #+END_QUOTE

   - read two ~strings~ and report whether the ~strings~ are equal. If not,
     report which of the two is larger.
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string s1, s2;
  cin >> s1 >> s2;
  cout << "s1: " << s1 << endl
       << "s2: " << s2 << endl;
  
  if (s1 == s2)
    cout << "s1 is equal to s2" << endl;
  else
    if (s1 > s2) cout << "s1 is greater than s2" << endl;
    else cout << "s1 is smaller than s2" << endl;

  return 0;
}   
   #+END_SRC

   - whether the ~strings~ have the same length, and if not, report which is
     longer.
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string s1, s2;
  cin >> s1 >> s2;
  cout << "s1: " << s1 << endl
       << "s2: " << s2 << endl;
  
  if (s1.size() == s2.size())
    cout << "s1 and s2 have the same length" << endl;
  else
    if (s1.size() > s2.size()) cout << "s1 is longer than s2" << endl;
    else cout << "s2 is longer than s1" << endl;

  return 0;
}   
   #+END_SRC

** Exercise 3.5
   
   #+BEGIN_QUOTE
   Write a program to read strings from the standard input, concatenating what
   is read into one large string. Print the concatenated string. Next, change
   the program to separate adjacent input strings by a space.
   #+END_QUOTE

   - print the concatenated string
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string word, s;
  while (cin >> word)
    s += word;
  
  cout << "s: " << s  << endl;
  
  return 0;
}   
   #+END_SRC

   - separate adjacent input strings by a space
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string word, s;
  while (cin >> word)
    s += " " + word;
  
  cout << "s: " << s  << endl;
  
  return 0;
}   
   #+END_SRC

* Exercises Section 3.2.3
** Exercise 3.6
   
   #+BEGIN_QUOTE
   Use a range ~for~ to change all the characters in a ~string~ to X.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cout; using std::endl;

int main()
{
  string s("Hello World!!!");
  for (auto &c : s) c = 'X';
  cout << s << endl;

  return 0;
}   
   #+END_SRC
   
** Exercise 3.7
   #+BEGIN_QUOTE
   What would happen if you define the loop control variable in the previous
   exercise as type ~char~? Predict the results and then change your program to
   use a ~char~ to see if you were right.
   #+END_QUOTE
   
   Nothing will be changed after the for loop when the control variable is
   defined as ~char~. If we want to change the value of the characters in a
   string, we must define the loop variable as a reference type.
   
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cout; using std::endl;

int main()
{
  string s("Hello World!!!");
  for (char c : s) c = 'X';
  cout << s << endl;

  return 0;
}   
   #+END_SRC
   
** Exercise 3.8
   #+BEGIN_QUOTE
   Rewrite the program in the first exercise, first using a ~while~ and again
   using a traditional ~for~ loop. Which of the three approaches do you prefer
   and why?
   #+END_QUOTE
   
   while:
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cout; using std::endl;

int main()
{
  string s("Hello World!!!");

  decltype(s.size()) index = 0;
  while (index != s.size())
    s[index++] = 'X';

  cout << s << endl;

  return 0;
}   
   #+END_SRC
   
   for:
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cout; using std::endl;

int main()
{
  string s("Hello World!!!");
  for (decltype(s.size()) index = 0; index != s.size(); ++index)
    s[index] = 'X';

  cout << s << endl;

  return 0;
}   
   #+END_SRC
   
   If we want to do something to every character in a string, by far the best
   approach is to use a statement introduced by the new standard: the range for
   statement.

** Exercise 3.9
   #+BEGIN_QUOTE
   What does the following program do? Is it valid? If not, why not?
   #+END_QUOTE
   #+BEGIN_SRC C++
string s;
cout << s[0] << endl;   
   #+END_SRC

   Before accessing the character, we need to check that ~s~ is not empty. Any
   time we use a subscript, we must ensure that there is a value at the given
   location. If ~s~ is empty, then ~s[0]~ is undefined.

** Exercise 3.10
   #+BEGIN_QUOTE
   Write a program that reads a string of characters including punctuation and
   writes what was read but with the punctuation removed.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <cctype>
using std::ispunct;

#include <iostream>
using std::cin; using std::cout; using std::endl;


int main()
{
  string s;
  cin >> s;

  for (auto &c : s)
    if (!ispunct(c))
      cout << c;

  cout << endl;
  
  return 0;
}   
   #+END_SRC

** Exercise 3.11 
   #+BEGIN_QUOTE
   Is the following range ~for~ legal? If so, what is the type of ~c~?
   #+END_QUOTE

   #+BEGIN_SRC C++
const string s = "Keep out!";
for (auto &c : s) { /* ... */ }
   #+END_SRC

   Yes, the type of ~c~ is const char&, and we cannot assign a new value to ~c~.

* Exercises Section 3.3.1
** Exercise 3.12

   #+BEGIN_QUOTE
   Which, if any, of the following ~vector~ definitions are in error? For those
   that are legal, explain what the definition does. For those that are not
   legal, explain why they are illegal.

   + (a) vector<vector<int>> ivec;
   + (b) vector<string> svec = ivec;
   + (c) vector<string> svec(10, "null");
   #+END_QUOTE
   
   + (a) legal, define a empty vector ivec that holds objects of type
     vector<int>.
   + (b) illegal, svec holds strings, not vector<int>.
   + (c) legal, define a vector svec that holds ten strings; each element is
     "null".

** Exercise 3.13

   #+BEGIN_QUOTE
   How many elements are there in each of the following vectors? What are the
   values of the elements?
   
   + (a) vector<int> v1;
   + (b) vector<int> v2(10);
   + (c) vector<int> v3(10, 42);
   + (d) vector<int> v4{10};
   + (e) vector<int> v5{10, 42};
   + (f) vector<string> v6{10};
   + (g) vector<string> v7{10, "hi"};
   #+END_QUOTE
   
   + (a) v1 is an empty vector.
   + (b) v2 has ten elements with value 0.
   + (c) v3 has ten elements with value 42.
   + (d) v4 has one elements with value 10.
   + (e) v5 has two elements with value 10, 42.
   + (f) v6 has ten default-initialized elements.
   + (g) v7 has ten elements with value "hi".

* Exercises Section 3.3.2
** Exercise 3.14

   #+BEGIN_QUOTE
   Write a program to read a sequence of ~int~s from ~cin~ and store those
   values in a ~vector~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin;

#include <vector>
using std::vector;

int main()
{
  int i;
  vector<int> v1;

  while (cin >> i)
    v1.push_back(i);

  return 0;
}   
   #+END_SRC

** Exercise 3.15

   #+BEGIN_QUOTE
   Repeat the previous program but read ~strings~ this time.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  string s;
  vector<string> v2;

  while (cin >> s)
    v2.push_back(s);

  return 0;
}
   #+END_SRC

* Exercises Section 3.3.3
** Exercise 3.16

   #+BEGIN_QUOTE
   Write a program to print the size and contents of the ~vector~s from exercise
   3.13. Check whether your answers to that exercise were correct. If not,
   restudy ยง 3.3.1 (p. 97) until you understand why you were wrong.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  vector<int> v1;
  vector<int> v2(10);
  vector<int> v3(10, 42);
  vector<int> v4{10};
  vector<int> v5{10, 42};
  vector<string> v6{10};
  vector<string> v7{10, "hi"};

  cout << "v1 has " << v1.size() << " elements" << endl;
  for (auto i : v1)
    cout << i << " ";
  cout << endl;

  cout << "v2 has " << v2.size() << " elements" << endl;
  for (auto i : v2)
    cout << i << " ";
  cout << endl;
  
  cout << "v3 has " << v3.size() << " elements" << endl;
  for (auto i : v3)
    cout << i << " ";
  cout << endl;

  cout << "v4 has " << v4.size() << " elements" << endl;
  for (auto i : v4)
    cout << i << " ";
  cout << endl;

  cout << "v5 has " << v5.size() << " elements" << endl;
  for (auto i : v5)
    cout << i << " ";
  cout << endl;

  cout << "v6 has " << v6.size() << " elements" << endl;
  for (auto s : v6)
    cout << s << " ";
  cout << endl;
  
  cout << "v7 has " << v7.size() << " elements" << endl;
  for (auto s : v7)
    cout << s << " ";
  cout << endl;

  return 0;
}   
   #+END_SRC

** Exercise 3.17 

   #+BEGIN_QUOTE
   Read a sequence of words from ~cin~ and store the values a ~vector~. After
   you've read all the words, process the ~vector~ and change each word to
   uppercase. Print the transformed elements, eight words to a line.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <cctype>
using std::toupper;

#include <vector>
using std::vector;

int main()
{
  string word;
  vector<string> text;
  while (cin >> word) {
    text.push_back(word);
  }

  for (auto &s : text)
    for (auto &c : s)
      c = toupper(c);

  for (decltype(text.size()) index = 0, cnt = 0; index != text.size(); ++index) {
    cout << text[index] << " ";
    if (++cnt % 8 == 0) cout << endl;
  }

  cout << endl;
  
  return 0;
}   
   #+END_SRC

** Exercise 3.18
   #+BEGIN_QUOTE
   Is the following program legal? If not, how might you fix it?
   #+END_QUOTE
   #+BEGIN_SRC C++
vector<int> ivec;
ivec[0] = 42;
   #+END_SRC

   illegal. It is an error to subscript an element that doesnโt exist.
   #+BEGIN_SRC C++
vector<int> ivec;
ivec.push_back(42);   
   #+END_SRC

** Exercise 3.19
   #+BEGIN_QUOTE
   List three ways to define a ~vector~ and give it ten elements, each with the
   value 42. Indicate whether there is a preferred way to do so and why.
   #+END_QUOTE

   #+BEGIN_SRC C++
vector<int> v1(10, 42);
vector<int> v2{42, 42, 42, 42, 42, 42, 42, 42, 42, 42};
vector<int> v3;
for (int i = 0; i != 10; ++i) v3.push_back(42);
   #+END_SRC

** Exercise 3.20
   #+BEGIN_QUOTE
   Read a set of integers into a ~vector~. Print the sum of each pair of
   adjacent elements. Change your program so that it prints the sum of the first
   and last elements, followed by the sum of the second and second-to-last, and
   so on.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  int i;
  vector<int> ivec;
  while (cin >> i)
    ivec.push_back(i);

  for (decltype(ivec.size()) index = 0; index != ivec.size() - 1; ++index)
    cout << ivec[index] + ivec[index + 1] << " ";
  cout << endl;

  for (decltype(ivec.size()) index = 0; index != ivec.size()/2; ++index)
    cout << ivec[index] + ivec[ivec.size() - 1 - index] << " ";
  cout << endl;

  return 0;
}   
   #+END_SRC

* Exercise Section 3.4.1
** Exercise 3.21
   #+BEGIN_QUOTE
   Redo the first exercise from ยง 3.3.3 (p. 105) using iterators.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  vector<int> v1;
  vector<int> v2(10);
  vector<int> v3(10, 42);
  vector<int> v4{10};
  vector<int> v5{10, 42};
  vector<string> v6{10};
  vector<string> v7{10, "hi"};

  cout << "v1 has " << v1.size() << " elements" << endl;
  for (auto it = v1.begin(); it != v1.end(); ++it)
    cout << *it << " ";
  cout << endl;

  cout << "v2 has " << v2.size() << " elements" << endl;
  for (auto it = v2.begin(); it != v2.end(); ++it)
    cout << *it << " ";
  cout << endl;
  
  cout << "v3 has " << v3.size() << " elements" << endl;
  for (auto it = v3.begin(); it != v3.end(); ++it)
    cout << *it << " ";
  cout << endl;

  cout << "v4 has " << v4.size() << " elements" << endl;
  for (auto it = v4.begin(); it != v4.end(); ++it)
    cout << *it << " ";
  cout << endl;

  cout << "v5 has " << v5.size() << " elements" << endl;
  for (auto it = v5.begin(); it != v5.end(); ++it)
    cout << *it << " ";
  cout << endl;

  cout << "v6 has " << v6.size() << " elements" << endl;
  for (auto it = v6.begin(); it != v6.end(); ++it)
    cout << *it << " ";
  cout << endl;
  
  cout << "v7 has " << v7.size() << " elements" << endl;
  for (auto it = v7.begin(); it != v7.end(); ++it)
    cout << *it << " ";
  cout << endl;

  return 0;
}      
   #+END_SRC

** Exercise 3.22
   
   #+BEGIN_QUOTE
   Revise the loop that printed the first paragraph in ~text~ to instead change
   the elements in ~text~ that correspond to the first paragraph to all
   uppercase. After youโve updated ~text~, print its contents.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <cctype>
using std::islower; using std::toupper;

#include <vector>
using std::vector;


int main()
{
  string word;
  vector<string> text;
  while (cin >> word)
    text.push_back(word);

  for (auto it1 = text.begin();
       it1 != text.end() && !it1->empty(); ++it1) 
    for (auto it2 = it1->begin(); it2 != it1->end(); ++it2) 
      if (islower(*it2))
	*it2 = toupper(*it2);

  for (auto it = text.begin();
       it != text.end() && !it->empty(); ++it) 
    cout << *it << " ";
  cout << endl;
  
  return 0;
}   
   #+END_SRC

** Exercise 3.23
   
   #+BEGIN_QUOTE
   Write a program to create a ~vector~ with ten ~int~ elements. Using an
   iterator, assign each element a value that is twice its current value. Test
   your program by printing the ~vector~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  vector<int> ivec = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};

  for (auto it = ivec.begin(); it != ivec.end(); ++it)
    *it *= 2;

  for (auto it = ivec.begin(); it != ivec.end(); ++it)
    cout << *it << " ";
  cout << endl;

  return 0;
}    
   #+END_SRC

* Exercises Section 3.4.2
** Exercise 3.24
   #+BEGIN_QUOTE
   Redo the last exercise from ยง 3.3.3 (p. 105) using iterators.
   #+END_QUOTE
   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  int i;
  vector<int> ivec;
  while (cin >> i)
    ivec.push_back(i);

  for (auto it = ivec.cbegin(); it != ivec.cend() - 1; ++it)
    cout << *it + *(it+1) << " ";
  cout << endl;

  for (auto lit = ivec.cbegin(), rit = ivec.cend() - 1;
       lit < rit; ++lit, --rit)
    cout << *lit + *rit << " ";
  cout << endl;

  return 0;
}
   #+END_SRC

** Exercise 3.25
   #+BEGIN_QUOTE
   Rewrite the grade clustering program from ยง 3.3.3 (p.104) using iterators
   instead of subscripts.
   #+END_QUOTE
   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  // hold the grades we read from the standard input
  vector<unsigned> grades;
  
  // count the number of grades by clusters of ten:
  // 0--9, 10--19, ... , 90--99, 100
  vector<unsigned> scores(11, 0);	// 11 buckets, all initially 0
  
  unsigned grade;
  while (cin >> grade) {	// read the grade
    if (grade <= 100) {		// handle only valid grades
      grades.push_back(grade);
      ++(*(scores.begin() + grade/10));
    }
  }
  
  cout << "grades.size = " << grades.size() << endl;
  for (auto it : grades)
    cout << it << " ";
  cout << endl;

  cout << "scores.size = " << scores.size() << endl;
  for (auto it : scores)
    cout << it << " ";
  cout << endl;

  return 0;
}   
   #+END_SRC

** Exercise 3.26
   #+BEGIN_QUOTE
   In the binary search program on page 112, why did we write ~mid = beg +
   (end - beg) / 2;~ instead of ~mid = (beg + end) /2;~?
   #+END_QUOTE

   ~(beg + end)~ is meaningless.

* Exercises Section 3.5.1
** Exercise 3.27
   #+BEGIN_QUOTE
   Assuming ~txt_size~ is a function that takes no arguments and returns an
   ~int~ value, which of the following definitions are illegal? Explain why.
   + ~unsigned buf_size = 1024;
   + (a) int ia[buf_size];
   + (b) int ia[4 * 7 - 14];
   + (c) int ia[txt_size()];
   + (d) char st[11] = "fundamental";
   #+END_QUOTE
    
   + (a) illegal. ~buf_size~ is not a constant expression.
   + (b) legal.
   + (c) legal if ~txt_size~ is constexpr, error otherwise.
   + (d) illegal. no space for the null!
