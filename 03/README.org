* Exercises Section 3.1
** Exercise 3.1
   
   #+BEGIN_QUOTE
   Rewrite the exercises from § 1.4.1 (p. 13) and § 2.6.2 (p. 76) with appropriate
   ~using~ declarations.
   #+END_QUOTE
   
   § 1.4.1
   #+BEGIN_SRC C++
#include <iostream>
using std::cout;
using std::endl;

int main()
{
  int sum = 0, val = 1;
  // keep executing the while as long as val is less than or equal to 10
  while (val <= 10) {
    sum += val;                 // assigns sum + val to sum
    ++val;                      // add 1 to val
  }
  cout << "Sum of 1 to 10 inclusive is "
       << sum << endl;

  return 0;
}
   #+END_SRC
   
   § 2.6.2
   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include "Sales_data.h"

using std::cin;
using std::cout;
using std::endl;
using std::cerr;

int main()
{
  Sales_data data1, data2;

  // code to read into data1 and data2
  double price = 0;		// price per book, used to calculate total revenue

  // read the first transactions: ISBN, number of books sold, price per book
  cin >> data1.bookNo >> data1.units_sold >> price;
  // calculate total revenue from price and units_sold
  data1.revenue = data1.units_sold * price;

  // read the second transaction
  cin >> data2.bookNo >> data2.units_sold >> price;
  data2.revenue = data2.units_sold * price;

  // code to check whether data1 and data2 have the same ISBN
  //      and if so print the sum of data1 and data2
  if (data1.bookNo == data2.bookNo) {
    unsigned totalCnt = data1.units_sold + data2.units_sold;
    double totalRevenue = data1.revenue + data2.revenue;
    // print: ISBN, total sold, total revenue, average price per book
    cout << data1.bookNo << " " << totalCnt
	 << " " << totalRevenue << " ";
    if (totalCnt != 0)
      cout << totalRevenue/totalCnt << endl;
    else
      cout << "(no sales)" << endl;
    return 0;			// indicate success
  } else {			// transactions were's for the same ISBN
    cerr << "Data must refer to the same ISBN"
	 << endl;
    return -1;			// indicate failure
  }
}
   #+END_SRC
   
* Exercises Section 3.2.2
** Exercise 3.2
   
   #+BEGIN_QUOTE
   Write a program to read the standard input a line at a time. Modify your
   program to read a word at a time.
   #+END_QUOTE
   
   - read the standard input a line at a time
   #+BEGIN_SRC C++
#include <string>
using std::string; using std::getline;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string line;

  while (getline(cin, line))
    cout << line << endl;

  return 0;
}   
   #+END_SRC
   
   - read a word at a time
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string word;

  while (cin >> word)
    cout << word << endl;

  return 0;
}   
   #+END_SRC

** Exercise 3.3

   #+BEGIN_QUOTE
   Explain how whitespace characters are handled in the ~string~ input operator
   and in the ~getline~ function.
   #+END_QUOTE

   The ~string~ input operator reads and discards any leading whitespace (e.g.,
   spaces, newlines, tabs). It then reads characters untill the next whitespace
   character is encountered. Sometimes we do not want to ignore the whitespace
   in our input. In such cases, we can use the ~getline~ function instead of the
   >> operator.

** Exercise 3.4

   #+BEGIN_QUOTE
   Write a program to read two ~strings~ and report whether the ~strings~ are
   equal. If not, report which of the two is larger. Now, change the program to
   report whether the ~strings~ have the same length, and if not, report which
   is longer.
   #+END_QUOTE

   - read two ~strings~ and report whether the ~strings~ are equal. If not,
     report which of the two is larger.
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string s1, s2;
  cin >> s1 >> s2;
  cout << "s1: " << s1 << endl
       << "s2: " << s2 << endl;
  
  if (s1 == s2)
    cout << "s1 is equal to s2" << endl;
  else
    if (s1 > s2) cout << "s1 is greater than s2" << endl;
    else cout << "s1 is smaller than s2" << endl;

  return 0;
}   
   #+END_SRC

   - whether the ~strings~ have the same length, and if not, report which is
     longer.
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string s1, s2;
  cin >> s1 >> s2;
  cout << "s1: " << s1 << endl
       << "s2: " << s2 << endl;
  
  if (s1.size() == s2.size())
    cout << "s1 and s2 have the same length" << endl;
  else
    if (s1.size() > s2.size()) cout << "s1 is longer than s2" << endl;
    else cout << "s2 is longer than s1" << endl;

  return 0;
}   
   #+END_SRC

** Exercise 3.5
   
   #+BEGIN_QUOTE
   Write a program to read strings from the standard input, concatenating what
   is read into one large string. Print the concatenated string. Next, change
   the program to separate adjacent input strings by a space.
   #+END_QUOTE

   - print the concatenated string
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string word, s;
  while (cin >> word)
    s += word;
  
  cout << "s: " << s  << endl;
  
  return 0;
}   
   #+END_SRC

   - separate adjacent input strings by a space
   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  string word, s;
  while (cin >> word)
    s += " " + word;
  
  cout << "s: " << s  << endl;
  
  return 0;
}   
   #+END_SRC

* Exercises Section 3.2.3
** Exercise 3.6

   #+BEGIN_QUOTE
   Use a range ~for~ to change all the characters in a ~string~ to X.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cout; using std::endl;

int main()
{
  string s("Hello World!!!");
  for (auto &c : s) c = 'X';
  cout << s << endl;

  return 0;
}   
   #+END_SRC

** Exercise 3.7
   #+BEGIN_QUOTE
   What would happen if you define the loop control variable in the previous
   exercise as type ~char~? Predict the results and then change your program to
   use a ~char~ to see if you were right.
   #+END_QUOTE

   Nothing will be changed after the for loop when the control variable is
   defined as ~char~. If we want to change the value of the characters in a
   string, we must define the loop variable as a reference type.

   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <iostream>
using std::cout; using std::endl;

int main()
{
  string s("Hello World!!!");
  for (char c : s) c = 'X';
  cout << s << endl;

  return 0;
}   
   #+END_SRC
