* Exercises Section 9.1
** Exercise 9.1
   #+BEGIN_QUOTE
   Which is the most appropriate—a ~vector~, a ~deque~, or a ~list~ — for the
   following program tasks? Explain the rationale for your choice. If there is
   no reason to prefer one or another container, explain why not.
   + (a) Read a fixed number of words, inserting them in the container
     alphabetically as they are entered. We’ll see in the next chapter that
     associative containers are better suited to this problem.
   + (b) Read an unknown number of words. Always insert new words at the back.
     Remove the next value from the front.
   + (c) Read an unknown number of integers from a file. Sort the numbers and
     then print them to standard output.
   #+END_QUOTE

   (a) ~list~, (b) ~deque~, (c) ~vector~.

* Exercises Section 9.2
** Exercise 9.2
   #+BEGIN_QUOTE
   Define a ~list~ that holds elements that are ~deque~ s that hold ~int~ s.
   #+END_QUOTE

   #+BEGIN_SRC C++
   list<deque<int>> v1;
   #+END_SRC

* Exercises Section 9.2.1
** Exercise 9.3
   #+BEGIN_QUOTE
   What are the constraints on the iterators that form iterator ranges?
   #+END_QUOTE

   The iterators ~begin~ and ~end~ must refer to the same container. The
   iterator ~end~ may be equal to ~begin~ but must not refer to an element
   before the one denoted by ~begin~.

** Exercise 9.4
   #+BEGIN_QUOTE
   Write a function that takes a pair of iterators to a ~vector<int>~ and an
   ~int~ value. Look for that value in the range and return a ~bool~ indicating
   whether it was found.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

bool CheckVal(int val, vector<int>::const_iterator begin, vector<int>::const_iterator end)
{
  while (begin != end) {
    if (*begin == val) return true;
    ++begin;
  }

  return false;
}

int main()
{
  vector<int> ivec = {1, 2, 3, 4, 5};
  cout << CheckVal(3, ivec.cbegin(), ivec.cend()) << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.5
   #+BEGIN_QUOTE
   Rewrite the previous program to return an iterator to the requested element.
   Note that the program must handle the case where the element is not found.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

vector<int>::const_iterator FindVal(int val, vector<int>::const_iterator begin, vector<int>::const_iterator end)
{
  while (begin != end) {
    if (*begin == val) return begin;
    ++begin;
  }

  return end;
}

int main()
{
  vector<int> ivec = {1, 2, 3, 4, 5};
  auto iter = FindVal(3, ivec.cbegin(), ivec.cend());
  cout << *iter << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.6
   #+BEGIN_QUOTE
   What is wrong with the following program? How might you correct it?
   #+END_QUOTE
   #+BEGIN_SRC C++
list<int> lst1;
list<int>::iterator iter1 = lst1.begin(),
                    iter2 = lst1.end();
while (iter1 < iter2) /* ... */
   #+END_SRC

   Fixed:
   #+BEGIN_SRC C++
while (iter1 != iter2) /* ... */
   #+END_SRC

   operator ~<~ is not implemented in ~std::list~.

* Exercises Section 9.2.2
** Exercise 9.7
   #+BEGIN_QUOTE
   What type should be used as the index into a ~vector~ of ~int~ s?
   #+END_QUOTE

   ~vector<int>::size_type~

** Exercise 9.8
   #+BEGIN_QUOTE
   What type should be used to read elements in a ~list~ of ~string~ s? To write
   them?
   #+END_QUOTE

   use ~list<string>::const_iterator~ to read, and use ~list<string>::iterator~
   to write.

* Exercises Section 9.2.3
** Exercise 9.9
   #+BEGIN_QUOTE
   What is the difference between the ~begin~ and ~cbegin~ functions?
   #+END_QUOTE

   ~begin~ returns ~iterator~ and ~cbegin~ returns ~const_iterator~.

** Exercise 9.10
   #+BEGIN_QUOTE
   What are the types of the following four objects?
   #+END_QUOTE
   #+BEGIN_SRC
vector<int> v1;
const vector<int> v2;
auto it1 = v1.begin();
auto it2 = v2.begin();
auto it3 = v1.cbegin();
auto it4 = v2.cbegin();
   #+END_SRC

   ~it1~ is a ~vector<int>::iterator~, ~it2~, ~it3~ and ~it4~ are
   ~vector<int>::const_iterator~.

* Exercises Section 9.2.4
** Exercise 9.11
   #+BEGIN_QUOTE
   Show an example of each of the six ways to create and initialize a ~vector~.
   Explain what values each ~vector~ contains.
   #+END_QUOTE

   #+BEGIN_SRC C++
vector<int> vec1;                            // 0
vector<int> vec2(5);                         // 0, 0, 0, 0, 0
vector<int> vec3(5, 1);                      // 1, 1, 1, 1, 1
vector<int> vec4 = {1, 2, 3, 4, 5};          // 1, 2, 3, 4, 5
vector<int> vec5(vec4);                      // 1, 2, 3, 4, 5
vector<int> vec6(vec4.begin(), vec4.end());  // 1, 2, 3, 4, 5
   #+END_SRC

** Exercise 9.12
   #+BEGIN_QUOTE
   Explain the differences between the constructor that takes a container to
   copy and the constructor that takes two iterators.
   #+END_QUOTE

   To create a container as a copy of another container, the container and
   element types must match. When we pass iterators, there is no requirement
   that the container types be identical. Moreover, the element types in the new
   and original containers can differ as long as it is possible to convert the
   elements we’re copying to the element type of the container we are
   initializing.

** Exercise 9.13
   #+BEGIN_QUOTE
   How would you initialize a ~vector<double>~ from a ~list<int>~? From a
   ~vector<int>~? Write code to check your answers.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

#include <list>
using std::list;

int main()
{
  list<int> ilst = {1, 2, 3, 4, 5};
  vector<int> ivec = {6, 7, 8, 9, 10};

  vector<double> dvec1(ilst.begin(), ilst.end());
  vector<double> dvec2(ivec.begin(), ivec.end());

  cout << "dvec1 =" << endl;
  for (const auto &dval : dvec1)
    cout << dval << endl;

  cout << "dvec2 =" << endl;
  for (const auto &dval : dvec2)
    cout << dval << endl;

  return 0;
}
   #+END_SRC

* Exercises Section 9.2.5
** Exercise 9.14
   #+BEGIN_QUOTE
   Write a program to assign the elements from a ~list~ of ~char*~ pointers to
   C-style character strings to a ~vector~ of ~string~ s.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

#include <list>
using std::list;

int main()
{
  list<const char*> clst = {"C++", "primer", "5th"};
  vector<string> svec;
  svec.assign(clst.begin(), clst.end());

  for (const auto &str : svec)
    cout << str << endl;

  return 0;
}
   #+END_SRC

* Exercises Section 9.2.7
** Exercise 9.15
   #+BEGIN_QUOTE
   Write a program to determine whether two ~vector<int>~ s are equal.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  vector<int> v1 = {1, 3, 5, 7, 9, 12};
  vector<int> v2 = {1, 3, 9};

  std::cout << (v1 == v2 ? "v1 == v2" : "v1 != v2") << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 9.16
   #+BEGIN_QUOTE
   Repeat the previous program, but compare elements in a ~list<int>~ to a
   ~vector<int>~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

#include <list>
using std::list;

int main()
{
  vector<int> v1 = {1, 3, 5, 7, 9, 12};
  list<int> v2 = {1, 3, 9};

  std::cout << (v1 == vector<int>(v1.begin(), v1.end()) ? "v1 == v2" : "v1 != v2") << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 9.17
   #+BEGIN_QUOTE
   Assuming ~c1~ and ~c2~ are containers, what (if any) constraints does the
   following usage place on the types of ~c1~ and ~c2~?
   #+END_QUOTE
   #+BEGIN_SRC C++
if (c1 < c2)
   #+END_SRC

   Every container type supports the equality operators (== and !=); all the
   containers except the unordered associative containers also support the
   relational operators (>, >=, <, <=). The right- and left-hand operands must
   be the same kind of container and must hold elements of the same type.

   The container equality operators use the element’s == operator, and the
   relational operators use the element’s < operator. If the element type
   doesn’t support the required operator, then we cannot use the corresponding
   operations on containers holding that type.

* Exercises Section 9.3.1
** Exercise 9.18
   #+BEGIN_QUOTE
   Write a program to read a sequence of ~string~ s from the standard input into
   a ~deque~. Use iterators to write a loop to print the elements in the
   ~deque~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <deque>
using std::deque;

int main()
{
  string word;
  deque<string> sdeq;

  while (cin >> word)
    sdeq.push_back(word);

  for (const auto &str : sdeq) {
    cout << str << endl;
  }

  return 0;
}
   #+END_SRC

** Exercise 9.19
   #+BEGIN_QUOTE
   Rewrite the program from the previous exercise to use a ~list~. List the
   changes you needed to make.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <list>
using std::list;

int main()
{
  string word;
  list<string> slst;

  while (cin >> word)
    slst.push_back(word);

  for (const auto &str : slst) {
    cout << str << endl;
  }

  return 0;
}
   #+END_SRC

** Exercise 9.20
   #+BEGIN_QUOTE
   Write a program to copy elements from a ~list<int>~ into two ~deque~ s. The
   even-valued elements should go into one ~deque~ and the odd ones into the
   other.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <deque>
using std::deque;

#include <list>
using std::list;

int main()
{
  list<int> ilst = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10};
  deque<int> ideq1, ideq2;

  for (const auto &ival : ilst) {
    ival % 2 == 0 ? ideq1.push_back(ival) : ideq2.push_back(ival);
  }

  for (const auto &ival : ideq1) {
    cout << ival << " ";
  }
  cout << endl;

  for (const auto &ival : ideq2) {
    cout << ival << " ";
  }
  cout << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.21
   #+BEGIN_QUOTE
   Explain how the loop from page 345 that used the return from ~insert~ to add
   elements to a ~list~ would work if we inserted into a ~vector~ instead.
   #+END_QUOTE

   #+BEGIN_SRC C++
vector<string> svec;
auto iter = svec.begin();
while (cin >> word)
iter = svec.insert(iter, word); // same as calling push_front
   #+END_SRC

   Before the loop, we initialize iter to ~svec.begin()~. The first call to
   ~insert~ takes the ~string~ we just read and puts it in front of the element
   denoted by ~iter~. The value returned by ~insert~ is an iterator referring to
   this new element. We assign that iterator to ~iter~ and repeat the ~while~,
   reading another word. As long as there are words to insert, each trip through
   the ~while~ inserts a new element ahead of ~iter~ and reassigns to ~iter~ the
   location of the newly inserted element. That element is the (new) first
   element. Thus, each iteration inserts an element ahead of the first element
   in the ~vector~.

** Exercise 9.22
   #+BEGIN_QUOTE
   Assuming ~iv~ is a ~vector~ of ~int~ s, what is wrong with the following
   program? How might you correct the problem(s)?
   #+END_QUOTE
   #+BEGIN_SRC C++
vector<int>::iterator iter = iv.begin(),
                       mid = iv.begin() + iv.size()/2;
while (iter != mid)
  if (*iter == some_val)
    iv.insert(iter, 2 * some_val);
   #+END_SRC

   It is a infinite loop since ~iter~ will never equal to ~mid~.

   (TODO: ~mid~ will be invalid after the ~insert~.)

* Exercises Section 9.3.2
** Exercise 9.23
   #+BEGIN_QUOTE
   In the first program in this section on page 346, what would the values of
   ~val~, ~val2~, ~val3~, and ~val4~ be if ~c.size()~ is 1?
   #+END_QUOTE

   They have the same value that equal to the only element in ~c~.

** Exercise 9.24
   #+BEGIN_QUOTE
   Write a program that fetches the first element in a ~vector~ using ~at~, the
   subscript operator, ~front~, and ~begin~. Test your program on an empty
   ~vector~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  vector<int> ivec;

  cout << ivec.at(0) << endl;
  cout << ivec[0] << endl;       // Segmentation fault
  cout << ivec.front() << endl;  // Segmentation fault
  cout << *ivec.begin() << endl; // Segmentation fault

  return 0;
}
   #+END_SRC

* Exercises Section 9.3.3
** Exercise 9.25
   #+BEGIN_QUOTE
   In the program on page 349 that erased a range of elements, what happens if
   ~elem1~ and ~elem2~ are equal? What if ~elem2~ or both ~elem1~ and ~elem2~
   are the off-the-end iterator?
   #+END_QUOTE

   if ~elem1~ and ~elem2~ are equal (including both are the off-the-end
   iterator), no elements will be erased. if ~elem2~ is the off-the-end iterator
   and ~elem1~ is not, the range of elements between two iterators will be
   deleted.

** Exercise 9.26
   #+BEGIN_QUOTE
   Using the following definition of ~ia~, copy ~ia~ into a ~vector~ and into a
   ~list~. Use the single-iterator form of ~erase~ to remove the elements with odd
   values from your ~list~ and the even values from your ~vector~.
   #+END_QUOTE
   #+BEGIN_SRC C++
array<int, 11> ia = { 0, 1, 1, 2, 3, 5, 8, 13, 21, 55, 89 };
   #+END_SRC

   #+BEGIN_SRC
#include <iostream>
using std::cout; using std::endl;

#include <array>
using std::array;

#include <vector>
using std::vector;

#include <list>
using std::list;

int main()
{
  array<int, 11> ia = { 0, 1, 1, 2, 3, 5, 8, 13, 21, 55, 89 };
  vector<int> ivec(ia.begin(), ia.end());
  list<int> ilst(ia.begin(), ia.end());

  cout << "array: ";
  for (const auto &ival : ia)
    cout << ival << " ";
  cout << endl;

  auto iter1 = ivec.begin();
  while(iter1 != ivec.end()) {
    if (!(*iter1 % 2)) iter1 = ivec.erase(iter1);
    else ++iter1;
  }

  cout << "vector: ";
  for (const auto &ival : ivec)
    cout << ival << " ";
  cout << endl;

  auto iter2 = ilst.begin();
  while(iter2 != ilst.end()) {
    if (*iter2 % 2) iter2 = ilst.erase(iter2);
    else ++iter2;
  }

  cout << "list: ";
  for (const auto &ival : ilst)
    cout << ival << " ";
  cout << endl;

  return 0;
}
   #+END_SRC

* Exercises Section 9.3.4
** Exercise 9.27
   #+BEGIN_QUOTE
   Write a program to find and remove the odd-valued elements in a
   ~forward_list<int>~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <forward_list>
using std::forward_list;

int main()
{
  forward_list<int> ilst = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

  auto prev = ilst.before_begin();
  auto curr = ilst.begin();
  while (curr != ilst.end()) {
    if (*curr % 2) curr = ilst.erase_after(prev);
    else {
      prev = curr;
      ++curr;
    }
  }

  cout << "forward_list: ";
  for (const auto &ival : ilst)
    cout << ival << " ";
  cout << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.28
   #+BEGIN_QUOTE
   Write a function that takes a ~forward_list<string>~ and two additional
   ~string~ arguments. The function should find the first ~string~ and insert
   the second immediately following the first. If the first ~string~ is not
   found, then insert the second ~string~ at the end of the list.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

#include <forward_list>
using std::forward_list;

void find_and_insert(forward_list<string> &list,
		     const string &to_find,
		     const string &to_add)
{
  auto prev = list.before_begin();
  auto curr = list.begin();
  while (curr != list.end()) {
    if (*curr == to_find) {
      curr = list.insert_after(curr, to_add);
      return;
    } else {
      prev = curr;
      ++curr;
    }
  }

  list.insert_after(prev, to_add);
}

int main()
{
  forward_list<string> slst = {"hello0", "hello1", "hello2"};
  string s1 = "hello", s2 = "world";

  find_and_insert(slst, s1, s2);

  cout << "forward_list: ";
  for (const auto &str : slst)
    cout << str << " ";
  cout << endl;

  return 0;
}
   #+END_SRC

* Exercises Section 9.3.5
** Exercise 9.29
   #+BEGIN_QUOTE
   Given that ~vec~ holds 25 elements, what does ~vec.resize(100)~ do? What if
   we next wrote ~vec.resize(10)~?
   #+END_QUOTE

   adds 75 elements to the back of ~vec~, and erases 90 elements from the back
   of ~vec~.

** Exercise 9.30
   #+BEGIN_QUOTE
   What, if any, restrictions does using the version of resize that takes a
   single argument place on the element type?
   #+END_QUOTE

   If the container holds elements of a class type and resize adds elements,
   we must supply an initializer or the element type must have a default
   constructor.

* Exercises Section 9.3.6
** Exercise 9.31
   #+BEGIN_QUOTE
   The program on page 354 to remove even-valued elements and duplicate odd ones
   will not work on a ~list~ or ~forward_list~. Why? Revise the program so that
   it works on these types as well.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

#include <list>
using std::list;

#include <forward_list>
using std::forward_list;

#include <iterator>
using std::advance;

int main()
{
  // the program on page 354
  // silly loop to remove even-valued elements and insert a duplicate of odd-valued elements
  vector<int> vi = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  auto iter = vi.begin();       // call begin, not cbegin because we're changing vi
  while (iter != vi.end()) {
    if (*iter % 2) {
      iter = vi.insert(iter, *iter); // duplicate the current elements
      iter += 2;                     // advance past this element and the one inserted before it
    } else {
      iter = vi.erase(iter);    // remove even elements
      // don't advance the iterator; iter denotes the element after the one we erased
    }
  }

  for (auto ival : vi) {
    cout << ival << " ";
  }
  cout << endl;

  // list
  list<int> li = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  auto iter2 = li.begin();
  while (iter2 != li.end()) {
    if (*iter2 % 2) {
      iter2 = li.insert(iter2, *iter2);
      advance(iter2, 2);
    } else {
      iter2 = li.erase(iter2);
    }
  }

  for (auto ival : li) {
    cout << ival << " ";
  }
  cout << endl;

  // forward_list
  forward_list<int> fli = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  auto prev = fli.before_begin();
  auto curr = fli.begin();
  while (curr != fli.end()) {
    if (*curr % 2) {
      curr = fli.insert_after(prev, *curr);
      advance(prev, 2); advance(curr, 2);
    } else {
      curr = fli.erase_after(prev);
    }
  }

  for (auto ival : fli) {
    cout << ival << " ";
  }
  cout << endl;


  return 0;
}
   #+END_SRC

** Exercise 9.32
   #+BEGIN_QUOTE
   In the program on page 354 would it be legal to write the call to ~insert~ as
   follows? If not, why not?
   #+END_QUOTE
   #+BEGIN_SRC C++
iter = vi.insert(iter, *iter++);
   #+END_SRC

   illegal. The order of evaluation of arguments is unspecified.

** Exercise 9.33
   #+BEGIN_QUOTE
   In the final example in this section what would happen if we did not assign
   the result of ~insert~ to ~begin~? Write a program that omits this assignment
   to see if your expectation was correct.
   #+END_QUOTE

   The program will crash since the iterator will be invalid after inserting the
   element.

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  vector<int> v = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  auto begin = v.begin();
  while (begin != v.end()) {
    ++begin;               // advance begin because we want to insert after this
    // v.insert(begin, 42);
    begin = v.insert(begin, 42); // insert the new value
    ++begin;                     // advance begin past the element we just added
  }

  for (auto ival : v) {
    cout << ival << " ";
  }
  cout << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.34
   #+BEGIN_QUOTE
   Assuming ~vi~ is a container of ~int~ s that includes even and odd values,
   predict the behavior of the following loop. After you’ve analyzed this loop,
   write a program to test whether your expectations were correct.
   #+END_QUOTE
   #+BEGIN_SRC C++
iter = vi.begin();
while (iter != vi.end())
if (*iter % 2)
iter = vi.insert(iter, *iter);
++iter;
   #+END_SRC

   It is an infinite loop.

   Fixed:
   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  vector<int> vi = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};
  auto iter = vi.begin();
  while (iter != vi.end()) {
    if (*iter % 2) {
      iter = vi.insert(iter, *iter);
      advance(iter, 2);
    } else {
      ++iter;
    }
  }

  for (auto ival : vi) {
    cout << ival << " ";
  }
  cout << endl;

  return 0;
}
   #+END_SRC

* Exercises Section 9.4
** Exercise 9.35
   #+BEGIN_QUOTE
   Explain the difference between a vector’s capacity and its size.
   #+END_QUOTE

   The size of a container is the number of elements it already holds; its
   capacity is how many elements it can hold before more space must be
   allocated.

** Exercise 9.36
   #+BEGIN_QUOTE
   Can a container have a capacity less than its size?
   #+END_QUOTE

   No.

** Exercise 9.37
   #+BEGIN_QUOTE
   Why don’t ~list~ or ~array~ have a capacity member?
   #+END_QUOTE

   The elements of ~list~ are not contiguous, and the size of ~array~ is not
   flexible.

** Exercise 9.38
   #+BEGIN_QUOTE
   Write a program to explore how vectors grow in the library you use.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  vector<int> ivec;

  // size should be zero; capacity is implementation defined
  cout << "ivec: size: " << ivec.size()
       << " capacity: " << ivec.capacity() << endl;

  // give ivec 24 elements
  for (vector<int>::size_type ix = 0; ix != 24; ++ix)
    ivec.push_back(ix);

  // size should be 24; capacity will be >= 24 and is implementation defined
  cout << "ivec: size: " << ivec.size()
       << " capacity: " << ivec.capacity() << endl;

  ivec.reserve(50); 		// sets capacity to at least 50; might be more

  // size should be 24; capacity to at least 50; might be more
  cout << "ivec: size: " << ivec.size()
       << " capacity: "  << ivec.capacity() << endl;

  // add elements to use up the excess capacity
  while (ivec.size() != ivec.capacity())
    ivec.push_back(0);

  // capacity should be unchanged and size and capacity are now equal
  cout << "ivec: size: " << ivec.size()
       << " capacity: "  << ivec.capacity() << endl;

  ivec.push_back(42);		// add one more element

  // size should be 51; capacity will be >= 51 and is implementation defined
  cout << "ivec: size: " << ivec.size()
       << " capacity: "  << ivec.capacity() << endl;

  ivec.shrink_to_fit();		// ask for the memory to be returned

  // size should be unchanged; capacity is implementation defined
  cout << "ivec: size: " << ivec.size()
       << " capacity: "  << ivec.capacity() << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.39
   #+BEGIN_QUOTE
   Explain what the following program fragment does:
   #+END_QUOTE
   #+BEGIN_SRC C++
vector<string> svec;
svec.reserve(1024);
string word;
while (cin >> word)
svec.push_back(word);
svec.resize(svec.size()+svec.size()/2);
   #+END_SRC

   The ~while~ loop will read words from ~cin~ and store them in our
   ~vector~. Although we initially reserved 1024 elements, if there are more
   words read from ~cin~, our ~vector~ 's capacity will be automatically
   increased (most implementations will double the previous capacity) to
   accommodate them.

   ~resize()~ is different from ~reserve()~. In this case ~resize()~ will add
   another ~svec.size()/2~ value initialized elements to ~svec~. If this
   exceeds ~svec.capacity()~, it will also automatically increase it to
   accommodate the new elements.

** Exercise 9.40
   #+BEGIN_QUOTE
   If the program in the previous exercise reads 256 words, what is its likely
   capacity after it is resized? What if it reads 512? 1,000? 1,048?
   #+END_QUOTE

   The likely capacity will be 1024, 1024, 1024, 2048.

* Exercises Section 9.5.1
** Exercise 9.41
   #+BEGIN_QUOTE
   Write a program that initializes a ~string~ from a ~vector<char>~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  vector<char> cvec = {'H', 'e', 'l', 'l', 'o'};
  string s(cvec.cbegin(), cvec.cend());

  cout << s << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.42
   #+BEGIN_QUOTE
   Given that you want to read a character at a time into a string, and you know
   that you need to read at least 100 characters, how might you improve the
   performance of your program?
   #+END_QUOTE
