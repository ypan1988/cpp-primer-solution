* Exercises Section 9.1
** Exercise 9.1
   #+BEGIN_QUOTE
   Which is the most appropriate—a ~vector~, a ~deque~, or a ~list~ — for the
   following program tasks? Explain the rationale for your choice. If there is
   no reason to prefer one or another container, explain why not.
   + (a) Read a fixed number of words, inserting them in the container
     alphabetically as they are entered. We’ll see in the next chapter that
     associative containers are better suited to this problem.
   + (b) Read an unknown number of words. Always insert new words at the back.
     Remove the next value from the front.
   + (c) Read an unknown number of integers from a file. Sort the numbers and
     then print them to standard output.
   #+END_QUOTE

   (a) ~list~, (b) ~deque~, (c) ~vector~.

* Exercises Section 9.2
** Exercise 9.2
   #+BEGIN_QUOTE
   Define a ~list~ that holds elements that are ~deque~ s that hold ~int~ s.
   #+END_QUOTE

   #+BEGIN_SRC C++
   list<deque<int>> v1;
   #+END_SRC

* Exercises Section 9.2.1
** Exercise 9.3
   #+BEGIN_QUOTE
   What are the constraints on the iterators that form iterator ranges?
   #+END_QUOTE

   The iterators ~begin~ and ~end~ must refer to the same container. The
   iterator ~end~ may be equal to ~begin~ but must not refer to an element
   before the one denoted by ~begin~.

** Exercise 9.4
   #+BEGIN_QUOTE
   Write a function that takes a pair of iterators to a ~vector<int>~ and an
   ~int~ value. Look for that value in the range and return a ~bool~ indicating
   whether it was found.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

bool CheckVal(int val, vector<int>::const_iterator begin, vector<int>::const_iterator end)
{
  while (begin != end) {
    if (*begin == val) return true;
    ++begin;
  }

  return false;
}

int main()
{
  vector<int> ivec = {1, 2, 3, 4, 5};
  cout << CheckVal(3, ivec.cbegin(), ivec.cend()) << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.5
   #+BEGIN_QUOTE
   Rewrite the previous program to return an iterator to the requested element.
   Note that the program must handle the case where the element is not found.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

vector<int>::const_iterator FindVal(int val, vector<int>::const_iterator begin, vector<int>::const_iterator end)
{
  while (begin != end) {
    if (*begin == val) return begin;
    ++begin;
  }

  return end;
}

int main()
{
  vector<int> ivec = {1, 2, 3, 4, 5};
  auto iter = FindVal(3, ivec.cbegin(), ivec.cend());
  cout << *iter << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.6
   #+BEGIN_QUOTE
   What is wrong with the following program? How might you correct it?
   #+END_QUOTE
   #+BEGIN_SRC C++
list<int> lst1;
list<int>::iterator iter1 = lst1.begin(),
                    iter2 = lst1.end();
while (iter1 < iter2) /* ... */
   #+END_SRC

   Fixed:
   #+BEGIN_SRC C++
while (iter1 != iter2) /* ... */
   #+END_SRC

   operator ~<~ is not implemented in ~std::list~.

* Exercises Section 9.2.2
** Exercise 9.7
   #+BEGIN_QUOTE
   What type should be used as the index into a ~vector~ of ~int~ s?
   #+END_QUOTE

   ~vector<int>::size_type~

** Exercise 9.8
   #+BEGIN_QUOTE
   What type should be used to read elements in a ~list~ of ~string~ s? To write
   them?
   #+END_QUOTE

   use ~list<string>::const_iterator~ to read, and use ~list<string>::iterator~
   to write.

* Exercises Section 9.2.3
** Exercise 9.9
   #+BEGIN_QUOTE
   What is the difference between the ~begin~ and ~cbegin~ functions?
   #+END_QUOTE

   ~begin~ returns ~iterator~ and ~cbegin~ returns ~const_iterator~.

** Exercise 9.10
   #+BEGIN_QUOTE
   What are the types of the following four objects?
   #+END_QUOTE
   #+BEGIN_SRC
vector<int> v1;
const vector<int> v2;
auto it1 = v1.begin();
auto it2 = v2.begin();
auto it3 = v1.cbegin();
auto it4 = v2.cbegin();
   #+END_SRC

   ~it1~ is a ~vector<int>::iterator~, ~it2~, ~it3~ and ~it4~ are
   ~vector<int>::const_iterator~.
