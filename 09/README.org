* Exercises Section 9.1
** Exercise 9.1
   #+BEGIN_QUOTE
   Which is the most appropriate—a ~vector~, a ~deque~, or a ~list~ — for the
   following program tasks? Explain the rationale for your choice. If there is
   no reason to prefer one or another container, explain why not.
   + (a) Read a fixed number of words, inserting them in the container
     alphabetically as they are entered. We’ll see in the next chapter that
     associative containers are better suited to this problem.
   + (b) Read an unknown number of words. Always insert new words at the back.
     Remove the next value from the front.
   + (c) Read an unknown number of integers from a file. Sort the numbers and
     then print them to standard output.
   #+END_QUOTE

   (a) ~list~, (b) ~deque~, (c) ~vector~.

* Exercises Section 9.2
** Exercise 9.2
   #+BEGIN_QUOTE
   Define a ~list~ that holds elements that are ~deque~ s that hold ~int~ s.
   #+END_QUOTE

   #+BEGIN_SRC C++
   list<deque<int>> v1;
   #+END_SRC

* Exercises Section 9.2.1
** Exercise 9.3
   #+BEGIN_QUOTE
   What are the constraints on the iterators that form iterator ranges?
   #+END_QUOTE

   The iterators ~begin~ and ~end~ must refer to the same container. The
   iterator ~end~ may be equal to ~begin~ but must not refer to an element
   before the one denoted by ~begin~.

** Exercise 9.4
   #+BEGIN_QUOTE
   Write a function that takes a pair of iterators to a ~vector<int>~ and an
   ~int~ value. Look for that value in the range and return a ~bool~ indicating
   whether it was found.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

bool CheckVal(int val, vector<int>::const_iterator begin, vector<int>::const_iterator end)
{
  while (begin != end) {
    if (*begin == val) return true;
    ++begin;
  }

  return false;
}

int main()
{
  vector<int> ivec = {1, 2, 3, 4, 5};
  cout << CheckVal(3, ivec.cbegin(), ivec.cend()) << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.5
   #+BEGIN_QUOTE
   Rewrite the previous program to return an iterator to the requested element.
   Note that the program must handle the case where the element is not found.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

vector<int>::const_iterator FindVal(int val, vector<int>::const_iterator begin, vector<int>::const_iterator end)
{
  while (begin != end) {
    if (*begin == val) return begin;
    ++begin;
  }

  return end;
}

int main()
{
  vector<int> ivec = {1, 2, 3, 4, 5};
  auto iter = FindVal(3, ivec.cbegin(), ivec.cend());
  cout << *iter << endl;

  return 0;
}
   #+END_SRC

** Exercise 9.6
   #+BEGIN_QUOTE
   What is wrong with the following program? How might you correct it?
   #+END_QUOTE
   #+BEGIN_SRC C++
list<int> lst1;
list<int>::iterator iter1 = lst1.begin(),
                    iter2 = lst1.end();
while (iter1 < iter2) /* ... */
   #+END_SRC

   Fixed:
   #+BEGIN_SRC C++
while (iter1 != iter2) /* ... */
   #+END_SRC

   operator ~<~ is not implemented in ~std::list~.

* Exercises Section 9.2.2
** Exercise 9.7
   #+BEGIN_QUOTE
   What type should be used as the index into a ~vector~ of ~int~ s?
   #+END_QUOTE

   ~vector<int>::size_type~

** Exercise 9.8
   #+BEGIN_QUOTE
   What type should be used to read elements in a ~list~ of ~string~ s? To write
   them?
   #+END_QUOTE

   use ~list<string>::const_iterator~ to read, and use ~list<string>::iterator~
   to write.

* Exercises Section 9.2.3
** Exercise 9.9
   #+BEGIN_QUOTE
   What is the difference between the ~begin~ and ~cbegin~ functions?
   #+END_QUOTE

   ~begin~ returns ~iterator~ and ~cbegin~ returns ~const_iterator~.

** Exercise 9.10
   #+BEGIN_QUOTE
   What are the types of the following four objects?
   #+END_QUOTE
   #+BEGIN_SRC
vector<int> v1;
const vector<int> v2;
auto it1 = v1.begin();
auto it2 = v2.begin();
auto it3 = v1.cbegin();
auto it4 = v2.cbegin();
   #+END_SRC

   ~it1~ is a ~vector<int>::iterator~, ~it2~, ~it3~ and ~it4~ are
   ~vector<int>::const_iterator~.

* Exercises Section 9.2.4
** Exercise 9.11
   #+BEGIN_QUOTE
   Show an example of each of the six ways to create and initialize a ~vector~.
   Explain what values each ~vector~ contains.
   #+END_QUOTE

   #+BEGIN_SRC C++
vector<int> vec1;                            // 0
vector<int> vec2(5);                         // 0, 0, 0, 0, 0
vector<int> vec3(5, 1);                      // 1, 1, 1, 1, 1
vector<int> vec4 = {1, 2, 3, 4, 5};          // 1, 2, 3, 4, 5
vector<int> vec5(vec4);                      // 1, 2, 3, 4, 5
vector<int> vec6(vec4.begin(), vec4.end());  // 1, 2, 3, 4, 5
   #+END_SRC

** Exercise 9.12
   #+BEGIN_QUOTE
   Explain the differences between the constructor that takes a container to
   copy and the constructor that takes two iterators.
   #+END_QUOTE

   To create a container as a copy of another container, the container and
   element types must match. When we pass iterators, there is no requirement
   that the container types be identical. Moreover, the element types in the new
   and original containers can differ as long as it is possible to convert the
   elements we’re copying to the element type of the container we are
   initializing.

** Exercise 9.13
   #+BEGIN_QUOTE
   How would you initialize a ~vector<double>~ from a ~list<int>~? From a
   ~vector<int>~? Write code to check your answers.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

#include <list>
using std::list;

int main()
{
  list<int> ilst = {1, 2, 3, 4, 5};
  vector<int> ivec = {6, 7, 8, 9, 10};

  vector<double> dvec1(ilst.begin(), ilst.end());
  vector<double> dvec2(ivec.begin(), ivec.end());

  cout << "dvec1 =" << endl;
  for (const auto &dval : dvec1)
    cout << dval << endl;

  cout << "dvec2 =" << endl;
  for (const auto &dval : dvec2)
    cout << dval << endl;

  return 0;
}
   #+END_SRC

* Exercises Section 9.2.5
** Exercise 9.14
   #+BEGIN_QUOTE
   Write a program to assign the elements from a ~list~ of ~char*~ pointers to
   C-style character strings to a ~vector~ of ~string~ s.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

#include <list>
using std::list;

int main()
{
  list<const char*> clst = {"C++", "primer", "5th"};
  vector<string> svec;
  svec.assign(clst.begin(), clst.end());

  for (const auto &str : svec)
    cout << str << endl;

  return 0;
}
   #+END_SRC

* Exercises Section 9.2.7
** Exercise 9.15
   #+BEGIN_QUOTE
   Write a program to determine whether two ~vector<int>~ s are equal.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  vector<int> v1 = {1, 3, 5, 7, 9, 12};
  vector<int> v2 = {1, 3, 9};

  std::cout << (v1 == v2 ? "v1 == v2" : "v1 != v2") << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 9.16
   #+BEGIN_QUOTE
   Repeat the previous program, but compare elements in a ~list<int>~ to a
   ~vector<int>~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

#include <list>
using std::list;

int main()
{
  vector<int> v1 = {1, 3, 5, 7, 9, 12};
  list<int> v2 = {1, 3, 9};

  std::cout << (v1 == vector<int>(v1.begin(), v1.end()) ? "v1 == v2" : "v1 != v2") << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 9.17
   #+BEGIN_QUOTE
   Assuming ~c1~ and ~c2~ are containers, what (if any) constraints does the
   following usage place on the types of ~c1~ and ~c2~?
   #+END_QUOTE
   #+BEGIN_SRC C++
if (c1 < c2)
   #+END_SRC

   Every container type supports the equality operators (== and !=); all the
   containers except the unordered associative containers also support the
   relational operators (>, >=, <, <=). The right- and left-hand operands must
   be the same kind of container and must hold elements of the same type.

   The container equality operators use the element’s == operator, and the
   relational operators use the element’s < operator. If the element type
   doesn’t support the required operator, then we cannot use the corresponding
   operations on containers holding that type.

* Exercises Section 9.3.1
** Exercise 9.18
   #+BEGIN_QUOTE
   Write a program to read a sequence of ~string~ s from the standard input into
   a ~deque~. Use iterators to write a loop to print the elements in the
   ~deque~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <deque>
using std::deque;

int main()
{
  string word;
  deque<string> sdeq;

  while (cin >> word)
    sdeq.push_back(word);

  for (const auto &str : sdeq) {
    cout << str << endl;
  }

  return 0;
}
   #+END_SRC

** Exercise 9.19
   #+BEGIN_QUOTE
   Rewrite the program from the previous exercise to use a list. List the
   changes you needed to make.
   #+END_QUOTE

** Exercise 9.20
   #+BEGIN_QUOTE
   Write a program to copy elements from a list<int> into two deques. The
   even-valued elements should go into one deque and the odd ones into the
   other.
   #+END_QUOTE

** Exercise 9.21
   #+BEGIN_QUOTE
   Explain how the loop from page 345 that used the return from insert to add
   elements to a list would work if we inserted into a vector instead.
   #+END_QUOTE

** Exercise 9.22
   #+BEGIN_QUOTE
   Assuming iv is a vector of ints, what is wrong with the following program?
   How might you correct the problem(s)?
   #+END_QUOTE
   #+BEGIN_SRC C++
vector<int>::iterator iter = iv.begin(),
mid = iv.begin() + iv.size()/2;
while (iter != mid)
if (*iter == some_val)
iv.insert(iter, 2 * some_val);
   #+END_SRC
