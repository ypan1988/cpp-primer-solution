#+STARTUP: content

* Exercises Section 5.1
** Exercise 5.1 
   #+BEGIN_QUOTE
   What is a null statement? When might you use a null statement?
   #+END_QUOTE
   
   A null statement is a single semicolon:
   #+BEGIN_SRC C++
; // null statement   
   #+END_SRC

   A null statement is useful where the language requires a statement but the
   program’s logic does not. Such usage is most common when a loop’s work can be
   done within its condition.

** Exercise 5.2
   #+BEGIN_QUOTE
   What is a block? When might you might use a block?
   #+END_QUOTE
    
   A compound statement, usually referred to as a block, is a (possibly empty)
   sequence of statements and declarations surrounded by a pair of curly
   braces. A block is a scope (§ 2.2.4, p. 48). Names introduced inside a block
   are accessible only in that block and in blocks nested inside that
   block. Names are visible from where they are defined until the end of the
   (immediately) enclosing block. Compound statements are used when the language
   requires a single statement but the logic of our program needs more than one.

** Exercise 5.3
   #+BEGIN_QUOTE
   Use the comma operator (§ 4.10, p. 157) to rewrite the while loop from §
   1.4.1 (p. 11) so that it no longer requires a block. Explain whether this
   rewrite improves or diminishes the readability of this code.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

int main()
{
  int sum = 0, val = 1;
  // keep executing the while as long as val is less than or equal to 10
  while (val <= 10) 
    sum += val, ++val;
  std::cout << "Sum of 1 to 10 inclusive is "
            << sum << std::endl;

  return 0;
}   
   #+END_SRC

   This rewrite diminishes the readability of this code.

* Exercises Section 5.2
** Exercise 5.4
   #+BEGIN_QUOTE
   Exercise 5.4: Explain each of the following examples, and correct any
   problems you detect.
   + (a) ~while (string::iterator iter != s.end()) { /* . . . */ }~ 
   + (b) ~while (bool status = find(word)) { /*. . . */ } if (!status)
     { /* . . . */ }~
   #+END_QUOTE

   + (a) illegal definition.
     #+BEGIN_SRC C++
string::iterator iter = s.begin();
while (iter != s.end()) { /* . . . */ }     
     #+END_SRC
   + (b) ~status~ is not accessible outside the loop.
     #+BEGIN_SRC C++
bool status; 
while (status = find(word)) { /*. . . */ } if (!status)    
     #+END_SRC

* Exercises Section 5.3.1
** Exercise 5.5
   #+BEGIN_QUOTE
   Using an ~if–else~ statement, write your own version of the program to
   generate the letter grade from a numeric grade.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  // read a set of scores from the input
  vector<unsigned> grades;
  unsigned grade;
  while (cin >> grade)
    grades.push_back(grade);

  const vector<string> scores = {"F", "D", "C", "B", "A", "A++"};
  
  // now process those grades
  for (auto it : grades) {	// for each grade we read
    cout << it << " ";		// print the grade
    string lettergrade;		// hold corresponding letter grade
    // if failing grade, no need to check for a plus or minus
    if (it < 60)
      lettergrade = scores[0];
    else {
      lettergrade = scores[(it - 50)/10]; // fetch the letter grade
      if (it != 100)			      // add plus or minus only if not
					      // already an A++
	if (it % 10 > 7)
	  lettergrade += '+';	// grades ending in 8 or 9 get a +
	else if (it % 10 < 3)
	  lettergrade += '-';	// grades ending in 0, 1 or 2 get a -
    }
    cout << lettergrade << endl;
  }
    
  return 0;
}   
   #+END_SRC

** Exercise 5.6 
   #+BEGIN_QUOTE
   Rewrite your grading program to use the conditional operator (§ 4.7, p. 151)
   in place of the ~if–else~ statement.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  // read a set of scores from the input
  vector<unsigned> grades;
  unsigned grade;
  while (cin >> grade)
    grades.push_back(grade);

  const vector<string> scores = {"F", "D", "C", "B", "A", "A++"};
  
  // now process those grades
  for (auto it : grades) {	// for each grade we read
    cout << it << " ";		// print the grade
    string lettergrade;		// hold corresponding letter grade

    lettergrade = it < 60 ? scores[0] : scores[(it - 50)/10];
    lettergrade += (it < 60 || it == 100) ? "" :
      (it % 10 > 7) ? "+" :
      (it % 10 < 3) ? "-" : "";
    
    cout << lettergrade << endl;
  }
    
  return 0;
}   
   #+END_SRC

** Exercise 5.7
   #+BEGIN_QUOTE
   Correct the errors in each of the following code fragments:
   + (a)
     #+BEGIN_SRC C++
if (ival1 != ival2)
  ival1 = ival2
else ival1 = ival2 = 0;
     #+END_SRC
   + (b) 
     #+BEGIN_SRC C++
if (ival < minval)
  minval = ival;
  occurs = 1;
     #+END_SRC
   + (c) 
     #+BEGIN_SRC C++
if (int ival = get_value())
  cout << "ival = " << ival << endl;
if (!ival)
  cout << "ival = 0\n";
     #+END_SRC
   + (d)
     #+BEGIN_SRC C++
if (ival = 0)
  ival = get_value();
     #+END_SRC
   #+END_QUOTE

   + (a)
     #+BEGIN_SRC C++
if (ival1 != ival2)
  ival1 = ival2;  // need to add a semicolon
else ival1 = ival2 = 0;
     #+END_SRC
   + (b)
     #+BEGIN_SRC C++
if (ival < minval) {  // brace should be used for multiple statements
  minval = ival;
  occurs = 1;
}
     #+END_SRC
   + (c) 
     #+BEGIN_SRC C++
if (int ival = get_value())  // second if statement should be else-if
  cout << "ival = " << ival << endl;
else if (!ival)
  cout << "ival = 0\n";     
     #+END_SRC
   + (d)
     #+BEGIN_SRC C++
if (ival == 0)  // should be == instead of =
  ival = get_value();     
     #+END_SRC

** Exercise 5.8
   #+BEGIN_QUOTE
    What is a "dangling ~else~"? How are else clauses resolved in C++?
   #+END_QUOTE

   When we nest an if inside another if, it is possible that there will be more
   if branches than else branches. Indeed, our grading program has four ifs and
   two elses. The question arises: How do we know to which if a given else
   belongs?  This problem, usually referred to as a dangling else, is common to
   many programming languages that have both if and if else
   statements. Different languages solve this problem in different ways. In C++
   the ambiguity is resolved by specifying that each else is matched with the
   closest preceding unmatched if.

* Exercises Section 5.3.2
** Exercise 5.9
   #+BEGIN_QUOTE
   Write a program using a series of ~if~ statements to count the number of
   vowels in text read from ~cin~.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  // initialize counters of each vowel
  unsigned aCnt = 0, eCnt = 0, iCnt = 0, oCnt = 0, uCnt = 0;
  char ch;
  while (cin >> ch) {
    // if ch is a vowel, invrement the appropriate
    if (ch == 'a') ++aCnt;
    else if (ch == 'e') ++eCnt;
    else if (ch == 'i') ++iCnt;
    else if (ch == 'o') ++oCnt;
    else if (ch == 'u') ++uCnt;
  }
  // print results
  cout << "Number of vowel a: \t" << aCnt << '\n'
       << "Number of vowel e: \t" << eCnt << '\n'
       << "Number of vowel i: \t" << iCnt << '\n'
       << "Number of vowel o: \t" << oCnt << '\n'
       << "Number of vowel u: \t" << uCnt << endl;

  return 0;
}   
   #+END_SRC

** Exercise 5.10
   #+BEGIN_QUOTE
   There is one problem with our vowel-counting program as we’ve implemented it:
   It doesn’t count capital letters as vowels. Write a program that counts both
   lower- and uppercase letters as the appropriate vowel—that is, your program
   should count both 'a' and 'A' as part of ~aCnt~, and so forth.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  // initialize counters of each vowel
  unsigned aCnt = 0, eCnt = 0, iCnt = 0, oCnt = 0, uCnt = 0;
  char ch;
  while (cin >> ch) {
    // if ch is a vowel, invrement the appropriate
    switch (ch) {
    case 'a':
    case 'A':
      ++aCnt;
      break;
    case 'e':
    case 'E':
      ++eCnt;
      break;
    case 'i':
    case 'I':
      ++iCnt;
      break;
    case 'o':
    case 'O':
      ++oCnt;
      break;
    case 'u':
    case 'U':
      ++uCnt;
      break;
    }
  }
  // print results
  cout << "Number of vowel a(A): \t" << aCnt << '\n'
       << "Number of vowel e(E): \t" << eCnt << '\n'
       << "Number of vowel i(I): \t" << iCnt << '\n'
       << "Number of vowel o(O): \t" << oCnt << '\n'
       << "Number of vowel u(U): \t" << uCnt << endl;

  return 0;
}   
   #+END_SRC

** Exercise 5.11
   #+BEGIN_QUOTE
   Modify our vowel-counting program so that it also counts the number of blank
   spaces, tabs, and newlines read.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  // initialize counters of each vowel
  unsigned aCnt = 0, eCnt = 0, iCnt = 0, oCnt = 0, uCnt = 0,
    spaceCnt = 0, tabCnt = 0, newlineCnt = 0;
  char ch;
  while (cin.get(ch)) {
    // if ch is a vowel, invrement the appropriate
    switch (ch) {
    case 'a':
    case 'A':
      ++aCnt;
      break;
    case 'e':
    case 'E':
      ++eCnt;
      break;
    case 'i':
    case 'I':
      ++iCnt;
      break;
    case 'o':
    case 'O':
      ++oCnt;
      break;
    case 'u':
    case 'U':
      ++uCnt;
      break;
    case ' ':
      ++spaceCnt;
      break;
    case '\t':
      ++tabCnt;
      break;
    case '\n':
      ++newlineCnt;
      break;
    }
  }
  // print results
  cout << "Number of vowel a(A): \t" << aCnt << '\n'
       << "Number of vowel e(E): \t" << eCnt << '\n'
       << "Number of vowel i(I): \t" << iCnt << '\n'
       << "Number of vowel o(O): \t" << oCnt << '\n'
       << "Number of vowel u(U): \t" << uCnt << '\n'
       << "Number of space: \t" << spaceCnt << '\n'
       << "Number of tab: \t" << tabCnt << '\n'
       << "Number of newline: \t" << newlineCnt << endl;

  return 0;
}   
   #+END_SRC
