#+STARTUP: content

* Exercises Section 5.1
** Exercise 5.1 
   #+BEGIN_QUOTE
   What is a null statement? When might you use a null statement?
   #+END_QUOTE
   
   A null statement is a single semicolon:
   #+BEGIN_SRC C++
; // null statement   
   #+END_SRC

   A null statement is useful where the language requires a statement but the
   program’s logic does not. Such usage is most common when a loop’s work can be
   done within its condition.

** Exercise 5.2
   #+BEGIN_QUOTE
   What is a block? When might you might use a block?
   #+END_QUOTE
    
   A compound statement, usually referred to as a block, is a (possibly empty)
   sequence of statements and declarations surrounded by a pair of curly
   braces. A block is a scope (§ 2.2.4, p. 48). Names introduced inside a block
   are accessible only in that block and in blocks nested inside that
   block. Names are visible from where they are defined until the end of the
   (immediately) enclosing block. Compound statements are used when the language
   requires a single statement but the logic of our program needs more than one.

** Exercise 5.3
   #+BEGIN_QUOTE
   Use the comma operator (§ 4.10, p. 157) to rewrite the while loop from §
   1.4.1 (p. 11) so that it no longer requires a block. Explain whether this
   rewrite improves or diminishes the readability of this code.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

int main()
{
  int sum = 0, val = 1;
  // keep executing the while as long as val is less than or equal to 10
  while (val <= 10) 
    sum += val, ++val;
  std::cout << "Sum of 1 to 10 inclusive is "
            << sum << std::endl;

  return 0;
}   
   #+END_SRC

   This rewrite diminishes the readability of this code.

* Exercises Section 5.2
** Exercise 5.4
   #+BEGIN_QUOTE
   Exercise 5.4: Explain each of the following examples, and correct any
   problems you detect.
   + (a) ~while (string::iterator iter != s.end()) { /* . . . */ }~ 
   + (b) ~while (bool status = find(word)) { /*. . . */ } if (!status)
     { /* . . . */ }~
   #+END_QUOTE

   + (a) illegal definition.
     #+BEGIN_SRC C++
string::iterator iter = s.begin();
while (iter != s.end()) { /* . . . */ }     
     #+END_SRC
   + (b) ~status~ is not accessible outside the loop.
     #+BEGIN_SRC C++
bool status; 
while (status = find(word)) { /*. . . */ } if (!status)    
     #+END_SRC

* Exercises Section 5.3.1
** Exercise 5.5
   #+BEGIN_QUOTE
   Using an ~if–else~ statement, write your own version of the program to
   generate the letter grade from a numeric grade.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  // read a set of scores from the input
  vector<unsigned> grades;
  unsigned grade;
  while (cin >> grade)
    grades.push_back(grade);

  const vector<string> scores = {"F", "D", "C", "B", "A", "A++"};
  
  // now process those grades
  for (auto it : grades) {	// for each grade we read
    cout << it << " ";		// print the grade
    string lettergrade;		// hold corresponding letter grade
    // if failing grade, no need to check for a plus or minus
    if (it < 60)
      lettergrade = scores[0];
    else {
      lettergrade = scores[(it - 50)/10]; // fetch the letter grade
      if (it != 100)			      // add plus or minus only if not
					      // already an A++
	if (it % 10 > 7)
	  lettergrade += '+';	// grades ending in 8 or 9 get a +
	else if (it % 10 < 3)
	  lettergrade += '-';	// grades ending in 0, 1 or 2 get a -
    }
    cout << lettergrade << endl;
  }
    
  return 0;
}   
   #+END_SRC

** Exercise 5.6 
   #+BEGIN_QUOTE
   Rewrite your grading program to use the conditional operator (§ 4.7, p. 151)
   in place of the ~if–else~ statement.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  // read a set of scores from the input
  vector<unsigned> grades;
  unsigned grade;
  while (cin >> grade)
    grades.push_back(grade);

  const vector<string> scores = {"F", "D", "C", "B", "A", "A++"};
  
  // now process those grades
  for (auto it : grades) {	// for each grade we read
    cout << it << " ";		// print the grade
    string lettergrade;		// hold corresponding letter grade

    lettergrade = it < 60 ? scores[0] : scores[(it - 50)/10];
    lettergrade += (it < 60 || it == 100) ? "" :
      (it % 10 > 7) ? "+" :
      (it % 10 < 3) ? "-" : "";
    
    cout << lettergrade << endl;
  }
    
  return 0;
}   
   #+END_SRC

** Exercise 5.7
   #+BEGIN_QUOTE
   Correct the errors in each of the following code fragments:
   + (a)
     #+BEGIN_SRC C++
if (ival1 != ival2)
  ival1 = ival2
else ival1 = ival2 = 0;
     #+END_SRC
   + (b) 
     #+BEGIN_SRC C++
if (ival < minval)
  minval = ival;
  occurs = 1;
     #+END_SRC
   + (c) 
     #+BEGIN_SRC C++
if (int ival = get_value())
  cout << "ival = " << ival << endl;
if (!ival)
  cout << "ival = 0\n";
     #+END_SRC
   + (d)
     #+BEGIN_SRC C++
if (ival = 0)
  ival = get_value();
     #+END_SRC
   #+END_QUOTE

   + (a)
     #+BEGIN_SRC C++
if (ival1 != ival2)
  ival1 = ival2;  // need to add a semicolon
else ival1 = ival2 = 0;
     #+END_SRC
   + (b)
     #+BEGIN_SRC C++
if (ival < minval) {  // brace should be used for multiple statements
  minval = ival;
  occurs = 1;
}
     #+END_SRC
   + (c) 
     #+BEGIN_SRC C++
if (int ival = get_value())  // second if statement should be else-if
  cout << "ival = " << ival << endl;
else if (!ival)
  cout << "ival = 0\n";     
     #+END_SRC
   + (d)
     #+BEGIN_SRC C++
if (ival == 0)  // should be == instead of =
  ival = get_value();     
     #+END_SRC

** Exercise 5.8
   #+BEGIN_QUOTE
    What is a "dangling ~else~"? How are else clauses resolved in C++?
   #+END_QUOTE

   When we nest an if inside another if, it is possible that there will be more
   if branches than else branches. Indeed, our grading program has four ifs and
   two elses. The question arises: How do we know to which if a given else
   belongs?  This problem, usually referred to as a dangling else, is common to
   many programming languages that have both if and if else
   statements. Different languages solve this problem in different ways. In C++
   the ambiguity is resolved by specifying that each else is matched with the
   closest preceding unmatched if.

* Exercises Section 5.3.2
** Exercise 5.9
   #+BEGIN_QUOTE
   Write a program using a series of ~if~ statements to count the number of
   vowels in text read from ~cin~.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  // initialize counters of each vowel
  unsigned aCnt = 0, eCnt = 0, iCnt = 0, oCnt = 0, uCnt = 0;
  char ch;
  while (cin >> ch) {
    // if ch is a vowel, invrement the appropriate
    if (ch == 'a') ++aCnt;
    else if (ch == 'e') ++eCnt;
    else if (ch == 'i') ++iCnt;
    else if (ch == 'o') ++oCnt;
    else if (ch == 'u') ++uCnt;
  }
  // print results
  cout << "Number of vowel a: \t" << aCnt << '\n'
       << "Number of vowel e: \t" << eCnt << '\n'
       << "Number of vowel i: \t" << iCnt << '\n'
       << "Number of vowel o: \t" << oCnt << '\n'
       << "Number of vowel u: \t" << uCnt << endl;

  return 0;
}   
   #+END_SRC

** Exercise 5.10
   #+BEGIN_QUOTE
   There is one problem with our vowel-counting program as we’ve implemented it:
   It doesn’t count capital letters as vowels. Write a program that counts both
   lower- and uppercase letters as the appropriate vowel—that is, your program
   should count both 'a' and 'A' as part of ~aCnt~, and so forth.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  // initialize counters of each vowel
  unsigned aCnt = 0, eCnt = 0, iCnt = 0, oCnt = 0, uCnt = 0;
  char ch;
  while (cin >> ch) {
    // if ch is a vowel, invrement the appropriate
    switch (ch) {
    case 'a':
    case 'A':
      ++aCnt;
      break;
    case 'e':
    case 'E':
      ++eCnt;
      break;
    case 'i':
    case 'I':
      ++iCnt;
      break;
    case 'o':
    case 'O':
      ++oCnt;
      break;
    case 'u':
    case 'U':
      ++uCnt;
      break;
    }
  }
  // print results
  cout << "Number of vowel a(A): \t" << aCnt << '\n'
       << "Number of vowel e(E): \t" << eCnt << '\n'
       << "Number of vowel i(I): \t" << iCnt << '\n'
       << "Number of vowel o(O): \t" << oCnt << '\n'
       << "Number of vowel u(U): \t" << uCnt << endl;

  return 0;
}   
   #+END_SRC

** Exercise 5.11
   #+BEGIN_QUOTE
   Modify our vowel-counting program so that it also counts the number of blank
   spaces, tabs, and newlines read.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  // initialize counters of each vowel
  unsigned aCnt = 0, eCnt = 0, iCnt = 0, oCnt = 0, uCnt = 0,
    spaceCnt = 0, tabCnt = 0, newlineCnt = 0;
  char ch;
  while (cin.get(ch)) {
    // if ch is a vowel, invrement the appropriate
    switch (ch) {
    case 'a':
    case 'A':
      ++aCnt;
      break;
    case 'e':
    case 'E':
      ++eCnt;
      break;
    case 'i':
    case 'I':
      ++iCnt;
      break;
    case 'o':
    case 'O':
      ++oCnt;
      break;
    case 'u':
    case 'U':
      ++uCnt;
      break;
    case ' ':
      ++spaceCnt;
      break;
    case '\t':
      ++tabCnt;
      break;
    case '\n':
      ++newlineCnt;
      break;
    }
  }
  // print results
  cout << "Number of vowel a(A): \t" << aCnt << '\n'
       << "Number of vowel e(E): \t" << eCnt << '\n'
       << "Number of vowel i(I): \t" << iCnt << '\n'
       << "Number of vowel o(O): \t" << oCnt << '\n'
       << "Number of vowel u(U): \t" << uCnt << '\n'
       << "Number of space: \t" << spaceCnt << '\n'
       << "Number of tab: \t" << tabCnt << '\n'
       << "Number of newline: \t" << newlineCnt << endl;

  return 0;
}   
   #+END_SRC

** Exercise 5.12
   #+BEGIN_QUOTE
   Modify our vowel-counting program so that it counts the number of occurrences
   of the following two-character sequences: ~ff~, ~fl~, and ~fi~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  // initialize counters of each vowel
  unsigned aCnt = 0, eCnt = 0, iCnt = 0, oCnt = 0, uCnt = 0,
    spaceCnt = 0, tabCnt = 0, newlineCnt = 0,
    ffCnt = 0, flCnt = 0, fiCnt = 0;
  char ch, ch2 = ' '; 
  while (cin.get(ch)) {
    // if ch is a vowel, invrement the appropriate
    switch (ch) {
    case 'a':
    case 'A':
      ++aCnt;
      break;
    case 'e':
    case 'E':
      ++eCnt;
      break;
    case 'i':
      if (ch2 == 'f') ++fiCnt;
    case 'I':
      ++iCnt;
      break;
    case 'o':
    case 'O':
      ++oCnt;
      break;
    case 'u':
    case 'U':
      ++uCnt;
      break;
    case ' ':
      ++spaceCnt;
      break;
    case '\t':
      ++tabCnt;
      break;
    case '\n':
      ++newlineCnt;
      break;
    case 'f':
      if (ch2 == 'f') ++ffCnt;
      break;
    case 'l':
      if (ch2 == 'l') ++flCnt;
      break;
    }
    ch2 = ch;
  }
  // print results
  cout << "Number of vowel a(A): \t" << aCnt << '\n'
       << "Number of vowel e(E): \t" << eCnt << '\n'
       << "Number of vowel i(I): \t" << iCnt << '\n'
       << "Number of vowel o(O): \t" << oCnt << '\n'
       << "Number of vowel u(U): \t" << uCnt << '\n'
       << "Number of space: \t" << spaceCnt << '\n'
       << "Number of tab: \t" << tabCnt << '\n'
       << "Number of newline: \t" << newlineCnt << '\n'
       << "Number of ff: \t" << ffCnt << '\n'
       << "Number of fl: \t" << flCnt << '\n'
       << "Number of fi: \t" << fiCnt << endl;

  return 0;
}   
   #+END_SRC

** Exercise 5.13
   #+BEGIN_QUOTE
   Each of the programs in the highlighted text on page 184 contains a common
   programming error. Identify and correct each error.
   #+END_QUOTE

   #+BEGIN_QUOTE
   + (a) 
     #+BEGIN_SRC C++
unsigned aCnt = 0, eCnt = 0, iouCnt = 0;
char ch = next_text();
switch (ch) {
case 'a': aCnt++;
case 'e': eCnt++;
default: iouCnt++;
}     
     #+END_SRC
   + (b)
     #+BEGIN_SRC C++
unsigned index = some_value();
switch (index) {
case 1:
  int ix = get_value();
  ivec[ ix ] = index;
  break;
default:
  ix = ivec.size()-1;
  ivec[ ix ] = index;
}     
     #+END_SRC
   + (c)
     #+BEGIN_SRC C++
unsigned evenCnt = 0, oddCnt = 0;
int digit = get_num() % 10;
switch (digit) {
case 1, 3, 5, 7, 9:
  oddcnt++;
  break;
case 2, 4, 6, 8, 10:
  evencnt++;
  break;
}     
     #+END_SRC
   + (d)
     #+BEGIN_SRC C++
unsigned ival=512, jval=1024, kval=4096;
unsigned bufsize;
unsigned swt = get_bufCnt();
switch(swt) {
case ival:
  bufsize = ival * sizeof(int);
  break;
case jval:
  bufsize = jval * sizeof(int);
  break;
case kval:
  bufsize = kval * sizeof(int);
  break;
}     
     #+END_SRC
   #+END_QUOTE
     
   + (a) Forgetting a break is a common source of bugs and it is a common
     misconception to think that only the statements associated with the matched
     case label are executed.
     #+BEGIN_SRC C++
unsigned aCnt = 0, eCnt = 0, iouCnt = 0;
char ch = next_text();
switch (ch) {
case 'a': aCnt++; break;
case 'e': eCnt++; break;
default: iouCnt++; break;
}          
     #+END_SRC

   + (b) It is illegal to jump from a place where a variable with an initializer
     is out of scope to a place where that variable is in scope. If we need to
     define and initialize a variable for a particular case, we can do so by
     defining the variable inside a block, thereby ensuring that the variable is
     out of scope at the point of any subsequent label.
     #+BEGIN_SRC C++
unsigned index = some_value();
switch (index) {
case 1:
  {
    int ix = get_value();
    ivec[ ix ] = index;
  }
  break;
default:
  {
    int ix = ivec.size()-1;
    ivec[ ix ] = index;
  }
}     
     #+END_SRC

   + (c) case label syntax error.
     #+BEGIN_SRC C++
unsigned evenCnt = 0, oddCnt = 0;
int digit = get_num() % 10;
switch (digit) {
case 1: case 3: case 5: case 7: case 9:
  oddcnt++;
  break;
case 2: case 4: case 6: case 8: case 10:
  evencnt++;
  break;
}          
     #+END_SRC

   + (d) Case labels must be integral constant expressions.
     #+BEGIN_SRC C++
const unsigned ival=512, jval=1024, kval=4096;
unsigned bufsize;
unsigned swt = get_bufCnt();
switch(swt) {
case ival:
  bufsize = ival * sizeof(int);
  break;
case jval:
  bufsize = jval * sizeof(int);
  break;
case kval:
  bufsize = kval * sizeof(int);
  break;
}          
     #+END_SRC

** Exercise 5.14
   #+BEGIN_QUOTE
   Write a program to read strings from standard input looking for duplicated
   words. The program should find places in the input where one word is followed
   immediately by itself. Keep track of the largest number of times a single
   repetition occurs and which word is repeated. Print the maximum number of
   duplicates, or else print a message saying that no word was repeated. For
   example, if the input is
   ~how now now now brown cow cow~
   the output should indicate that the word now occurred three times.
   #+END_QUOTE

* Exercises Section 5.4.2
** Exercise 5.15
   #+BEGIN_QUOTE
   Explain each of the following loops. Correct any problems you detect.
   + (a) 
     #+BEGIN_SRC C++
for (int ix = 0; ix != sz; ++ix) { /* . . . */ }
if (ix != sz)
// . . .     
     #+END_SRC
   + (b)
     #+BEGIN_SRC C++
int ix;
for (ix != sz; ++ix) { /* . . . */ }     
     #+END_SRC
   + (c)
     #+BEGIN_SRC C++
for (int ix = 0; ix != sz; ++ix, ++ sz) { /* . . . */ }     
     #+END_SRC
   #+END_QUOTE

   + (a) It is worth remembering that the visibility of any object defined
     within the ~for~ header is limited to the body of the ~for~ loop. Thus, in
     this example, ~ix~ is inaccessible after the for completes.
     #+BEGIN_SRC C++
int ix;
for (int ix; ix != sz; ++ix) { /* . . . */ }
if (ix != sz)
// . . .          
     #+END_SRC

   + (b) A null statement for init-statement should be used when an
     initialization is unnecessary.
     #+BEGIN_SRC c++
int ix;
for (; ix != sz; ++ix) { /* . . . */ }     
     #+END_SRC

   + (c) infinite loop.
     #+BEGIN_SRC C++
for (int ix = 0; ix != sz; ++ix) { /* . . . */ }      
     #+END_SRC

** Exercise 5.16
   #+BEGIN_QUOTE
   The ~while~ loop is particularly good at executing while some condition
   holds; for example, when we need to read values until end-of-file.  The ~for~
   loop is generally thought of as a step loop: An index steps through a range
   of values in a collection. Write an idiomatic use of each loop and then
   rewrite each using the other loop construct. If you could use only one loop,
   which would you choose? Why?
   #+END_QUOTE

   #+BEGIN_SRC C++
// idiomatic use of while loop 
int i;
while ( cin >> i )
    // ...

// corresponding for loop
for (int i = 0; cin >> i;)
    // ...

// idiomatic use of for loop
for (int i = 0; i != size; ++i)
    // ...

// corresponding while loop
int i = 0;
while (i != size)
{
    // ...
    ++i;
}   
   #+END_SRC
   ~while~ loop. With better readability.

** Exercise 5.17
   #+BEGIN_QUOTE
   Given two ~vectors~ of ~int~s, write a program to determine whether one
   ~vector~ is a prefix of the other. For ~vector~s of unequal length, compare
   the number of elements of the smaller ~vector~. For example, given the
   ~vector~s containing 0, 1, 1, and 2 and 0, 1, 1, 2, 3, 5, 8, respectively
   your program should return ~true~.
   #+END_QUOTE

* Exercises Section 5.4.4
** Exercise 5.18
   #+BEGIN_QUOTE
   Explain each of the following loops. Correct any problems you detect.
   + (a) 
     #+BEGIN_SRC C++
do
  int v1, v2;
  cout << "Please enter two numbers to sum:" ;
  if (cin >> v1 >> v2)
    cout << "Sum is: " << v1 + v2 << endl;
while (cin);     
     #+END_SRC
   + (b)
     #+BEGIN_SRC C++
do {
  // . . .
} while (int ival = get_response());     
     #+END_SRC
   + (c)
     #+BEGIN_SRC C++
do {
  int ival = get_response()
} while (ival);     
     #+END_SRC
   #+END_QUOTE
     
   + (a) Brackets are needed for the block.
     #+BEGIN_SRC C++
do {
  int v1, v2;
  cout << "Please enter two numbers to sum:" ;
  if (cin >> v1 >> v2)
    cout << "Sum is: " << v1 + v2 << endl;
} while (cin);          
     #+END_SRC

   + (b) Because the condition is not evaluated until after the statement or
     block is executed, the ~do while~ loop does not allow variable definitions
     inside the condition.
     #+BEGIN_SRC C++
int ival;
do {
  // . . .
} while (ival = get_response());          
     #+END_SRC

   + (c) ~ival~ is used in condition; can't be defined inside the do.
     #+BEGIN_SRC C++
int ival;
do {
  ival = get_response()
} while (ival);          
     #+END_SRC

** Exercise 5.19
   #+BEGIN_QUOTE
   Write a program that uses a ~do while~ loop to repetitively request two
   ~strings~ from the user and report which ~string~ is less than the other.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

int main()
{
  string rsp;
  do {
    cout << "please enter two strings: ";
    string s1, s2;
    cin >> s1 >> s2;

    if (s1 <= s2) cout << s1 << " is less than " << s2 << endl;
    else cout << s2 << " is less than " << s1 << endl;

    cout << "More? Enter yes or no: ";
    cin >> rsp;
  } while (!rsp.empty() && rsp[0] != 'n');

  return 0;
}   
   #+END_SRC
