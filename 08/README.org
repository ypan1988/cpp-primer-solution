* Exercises Section 8.1.2
** Exercise 8.1
   #+BEGIN_QUOTE
   Write a function that takes and returns an ~istream&~. The function should
   read the stream until it hits end-of-file. The function should print what it
   reads to the standard output. Reset the stream so that it is valid before
   returning the stream.
   #+END_QUOTE

   #+BEGIN_SRC C++
std::istream& func(std::istream &is)
{
  std::string buf;
  while (is >> buf) std::cout << buf << std::endl;
  is.clear();
  return is;
}
   #+END_SRC

** Exercise 8.2
   #+BEGIN_QUOTE
   Test your function by calling it, passing cin as an argument.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

std::istream& func(std::istream &is)
{
  std::string buf;
  while (is >> buf) std::cout << buf << std::endl;
  is.clear();
  return is;
}

int main()
{
  std::istream &is = func(std::cin);
  std::cout << is.rdstate() << std::endl;

  return 0;
}   
   #+END_SRC

** Exercise 8.3
   #+BEGIN_QUOTE
   What causes the following while to terminate?
   ~while (cin >> i) /* ...*/~
   #+END_QUOTE
   
   The ~cin~ is in an error state.

* Exercises Section 8.2.1
** Exercise 8.4
   #+BEGIN_QUOTE
   Write a function to open a file for input and read its contents into a
   ~vector~ of ~strings~, storing each line as a separate element in the
   ~vector~.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <vector>
#include <fstream>

using std::cout;
using std::endl;
using std::string;
using std::vector;
using std::getline;
using std::ifstream;

void read(std::istream &is, vector<string> &svec) 
{
  string buf;
  while (getline(is, buf))
    svec.push_back(buf);
}

int main()
{
  string ifile = "./data/book.txt";
  ifstream in(ifile);
  vector<string> svec;
  read(in, svec);
  
  for (const auto &str : svec)
    cout << str << endl;

  return 0;
}   
   #+END_SRC

** Exercise 8.5
   #+BEGIN_QUOTE
   Rewrite the previous program to store each word in separate element.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <vector>
#include <fstream>

using std::cout;
using std::endl;
using std::string;
using std::vector;
using std::getline;
using std::ifstream;

void read(std::istream &is, vector<string> &svec) 
{
  string buf;
  while (is >> buf)
    svec.push_back(buf);
}

int main()
{
  string ifile = "./data/book.txt";
  ifstream in(ifile);
  vector<string> svec;
  read(in, svec);
  
  for (const auto &str : svec)
    cout << str << endl;

  return 0;
}   
   #+END_SRC

** Exercise 8.6
   #+BEGIN_QUOTE
   Rewrite the bookstore program from ยง 7.1.1 (p. 256) to read its transactions
   from a file. Pass the name of the file as an argument to main (ยง 6.2.5,
   p. 218).
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <fstream>

struct Sales_data;
std::istream& read(std::istream &is, Sales_data &item);

struct Sales_data {
  // friend declarations for nonmember Sales_data operations added
  friend Sales_data add(const Sales_data &lhs, const Sales_data &rhs);
  friend std::istream& read(std::istream &is, Sales_data &item);
  friend std::ostream& print(std::ostream &os, const Sales_data &item);

  // other members and access specifiers as before
public:
  Sales_data() = default;
  Sales_data(const std::string &s): bookNo(s) { }
  Sales_data(const std::string &s, unsigned n, double p):
    bookNo(s), units_sold(n), revenue(p*n) { }
  Sales_data(std::istream &is) { read(is, *this); }

  // other members as before
  std::string isbn() const { return bookNo; }
  Sales_data& combine(const Sales_data&);
  double avg_price() const;

private:
  std::string bookNo;
  unsigned units_sold = 0;
  double revenue = 0.0;
};


// definitions for nonmember parts of the Sales_data interface
Sales_data
add(const Sales_data &lhs, const Sales_data &rhs) {
  Sales_data sum = lhs;		// copy data members from lhs into sum
  sum.combine(rhs);		// add data members from rhs into sum
  return sum;
}

// transactions contain ISBN, number of copies sold, and sales price
std::istream&
read(std::istream &is, Sales_data &item) {
  double price = 0.0;
  is >> item.bookNo >> item.units_sold >> price;
  item.revenue = price * item.units_sold;
  return is;
}

std::ostream&
print(std::ostream &os, const Sales_data &item) {
  os << item.isbn() << " " << item.units_sold << " "
     << item.revenue << " " << item.avg_price();
  return os;
}

// add the value of the given Sales_data into this object
Sales_data&
Sales_data::combine(const Sales_data &rhs) {
  units_sold += rhs.units_sold;	// add the members of rhs into
  revenue += rhs.revenue;	// the members of "this" object
  return *this;			// return the object on which the function was
  // called
}

double Sales_data::avg_price() const {
  if (units_sold)
    return revenue/units_sold;
  else
    return 0;
}

int main(int argc, char *argv[])
{
  std::ifstream in(argv[1]);

  Sales_data total(in); // variable to hold data for the next transaction

  // read the first transaction and ensure that there are data to process
  if (!total.isbn().empty()) {
    Sales_data trans;           // variable to hold the running sum
    // read and process the remaining transtraction
    while (read(in, trans)) {
      // if we're still processing the same book
      if (total.isbn() == trans.isbn()) {
        // update the running total
        total.combine(trans);
      } else {
        // print results for the previous book
        print(std::cout, total) << std::endl;
        total = trans;          // total now refers to the next book
      }
    }
    print(std::cout, total) << std::endl;
  } else {
    // no input! warn the user
    std::cerr << "No data?!" << std::endl;
    return -1;                  // indicate failure
  }

  return 0;
}   
   #+END_SRC

* Exercises Section 8.2.2
** Exercise 8.7
   #+BEGIN_QUOTE
   Revise the bookstore program from the previous section to write its output to
   a file. Pass the name of that file as a second argument to ~main~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <fstream>

struct Sales_data;
std::istream& read(std::istream &is, Sales_data &item);

struct Sales_data {
  // friend declarations for nonmember Sales_data operations added
  friend Sales_data add(const Sales_data &lhs, const Sales_data &rhs);
  friend std::istream& read(std::istream &is, Sales_data &item);
  friend std::ostream& print(std::ostream &os, const Sales_data &item);

  // other members and access specifiers as before
public:
  Sales_data() = default;
  Sales_data(const std::string &s): bookNo(s) { }
  Sales_data(const std::string &s, unsigned n, double p):
    bookNo(s), units_sold(n), revenue(p*n) { }
  Sales_data(std::istream &is) { read(is, *this); }

  // other members as before
  std::string isbn() const { return bookNo; }
  Sales_data& combine(const Sales_data&);
  double avg_price() const;

private:
  std::string bookNo;
  unsigned units_sold = 0;
  double revenue = 0.0;
};


// definitions for nonmember parts of the Sales_data interface
Sales_data
add(const Sales_data &lhs, const Sales_data &rhs) {
  Sales_data sum = lhs;		// copy data members from lhs into sum
  sum.combine(rhs);		// add data members from rhs into sum
  return sum;
}

// transactions contain ISBN, number of copies sold, and sales price
std::istream&
read(std::istream &is, Sales_data &item) {
  double price = 0.0;
  is >> item.bookNo >> item.units_sold >> price;
  item.revenue = price * item.units_sold;
  return is;
}

std::ostream&
print(std::ostream &os, const Sales_data &item) {
  os << item.isbn() << " " << item.units_sold << " "
     << item.revenue << " " << item.avg_price();
  return os;
}

// add the value of the given Sales_data into this object
Sales_data&
Sales_data::combine(const Sales_data &rhs) {
  units_sold += rhs.units_sold;	// add the members of rhs into
  revenue += rhs.revenue;	// the members of "this" object
  return *this;			// return the object on which the function was
  // called
}

double Sales_data::avg_price() const {
  if (units_sold)
    return revenue/units_sold;
  else
    return 0;
}

int main(int argc, char *argv[])
{
  std::ifstream in(argv[1]);
  std::ofstream out(argv[2]);

  Sales_data total(in); // variable to hold data for the next transaction

  // read the first transaction and ensure that there are data to process
  if (!total.isbn().empty()) {
    Sales_data trans;           // variable to hold the running sum
    // read and process the remaining transtraction
    while (read(in, trans)) {
      // if we're still processing the same book
      if (total.isbn() == trans.isbn()) {
        // update the running total
        total.combine(trans);
      } else {
        // print results for the previous book
        print(out, total) << std::endl;
        total = trans;          // total now refers to the next book
      }
    }
    print(out, total) << std::endl;
  } else {
    // no input! warn the user
    std::cerr << "No data?!" << std::endl;
    return -1;                  // indicate failure
  }

  return 0;
}   
   #+END_SRC

** Exercise 8.8
   #+BEGIN_QUOTE
   Revise the program from the previous exercise to append its output to its
   given file. Run the program on the same output file at least twice to ensure
   that the data are preserved.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <fstream>

struct Sales_data;
std::istream& read(std::istream &is, Sales_data &item);

struct Sales_data {
  // friend declarations for nonmember Sales_data operations added
  friend Sales_data add(const Sales_data &lhs, const Sales_data &rhs);
  friend std::istream& read(std::istream &is, Sales_data &item);
  friend std::ostream& print(std::ostream &os, const Sales_data &item);

  // other members and access specifiers as before
public:
  Sales_data() = default;
  Sales_data(const std::string &s): bookNo(s) { }
  Sales_data(const std::string &s, unsigned n, double p):
    bookNo(s), units_sold(n), revenue(p*n) { }
  Sales_data(std::istream &is) { read(is, *this); }

  // other members as before
  std::string isbn() const { return bookNo; }
  Sales_data& combine(const Sales_data&);
  double avg_price() const;

private:
  std::string bookNo;
  unsigned units_sold = 0;
  double revenue = 0.0;
};


// definitions for nonmember parts of the Sales_data interface
Sales_data
add(const Sales_data &lhs, const Sales_data &rhs) {
  Sales_data sum = lhs;		// copy data members from lhs into sum
  sum.combine(rhs);		// add data members from rhs into sum
  return sum;
}

// transactions contain ISBN, number of copies sold, and sales price
std::istream&
read(std::istream &is, Sales_data &item) {
  double price = 0.0;
  is >> item.bookNo >> item.units_sold >> price;
  item.revenue = price * item.units_sold;
  return is;
}

std::ostream&
print(std::ostream &os, const Sales_data &item) {
  os << item.isbn() << " " << item.units_sold << " "
     << item.revenue << " " << item.avg_price();
  return os;
}

// add the value of the given Sales_data into this object
Sales_data&
Sales_data::combine(const Sales_data &rhs) {
  units_sold += rhs.units_sold;	// add the members of rhs into
  revenue += rhs.revenue;	// the members of "this" object
  return *this;			// return the object on which the function was
  // called
}

double Sales_data::avg_price() const {
  if (units_sold)
    return revenue/units_sold;
  else
    return 0;
}

int main(int argc, char *argv[])
{
  std::ifstream in(argv[1]);
  std::ofstream out(argv[2], std::ofstream::app);

  Sales_data total(in); // variable to hold data for the next transaction

  // read the first transaction and ensure that there are data to process
  if (!total.isbn().empty()) {
    Sales_data trans;           // variable to hold the running sum
    // read and process the remaining transtraction
    while (read(in, trans)) {
      // if we're still processing the same book
      if (total.isbn() == trans.isbn()) {
        // update the running total
        total.combine(trans);
      } else {
        // print results for the previous book
        print(out, total) << std::endl;
        total = trans;          // total now refers to the next book
      }
    }
    print(out, total) << std::endl;
  } else {
    // no input! warn the user
    std::cerr << "No data?!" << std::endl;
    return -1;                  // indicate failure
  }

  return 0;
}   
   #+END_SRC

* Exercises Section 8.3.1
** Exercise 8.9
   #+BEGIN_QUOTE
   Use the function you wrote for the first exercise in ยง 8.1.2 (p. 314) to
   print the contents of an ~istringstream~ object.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <iostream>
#include <sstream>

std::istream& func(std::istream &is)
{
  std::string buf;
  while (is >> buf) std::cout << buf << std::endl;
  is.clear();
  return is;
}

int main()
{
  std::istringstream in("hello world");
  std::istream &is = func(in);
  std::cout << is.rdstate() << std::endl;

  return 0;
}   
   #+END_SRC

** Exercise 8.10
   #+BEGIN_QUOTE
   Write a program to store each line from a file in a vector<string>. Now use
   an istringstream to read each element from the vector a word at a time.
   #+END_QUOTE

** Exercise 8.11
   #+BEGIN_QUOTE
   The program in this section defined its istringstream object inside the outer
   while loop. What changes would you need to make if record were defined
   outside that loop? Rewrite the program, moving the definition of record
   outside the while, and see whether you thought of all the changes that are
   needed.
   #+END_QUOTE

** Exercise 8.12
   #+BEGIN_QUOTE
   Why didnโt we use in-class initializers in PersonInfo?
   #+END_QUOTE

* Exercises Section 8.3.2
** Exercise 8.13
   #+BEGIN_QUOTE
   Rewrite the phone number program from this section to read from a named file
   rather than from cin.
   #+END_QUOTE

** Exercise 8.14
   #+BEGIN_QUOTE
   Why did we declare ~entry~ and ~nums~ as ~const auto &~?
   #+END_QUOTE

   + they are all class type, not the built-in type, so reference will be more
     effective;
   + the output shouldn't change their values, so we added the const.
