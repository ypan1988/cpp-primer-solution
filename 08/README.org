* Exercises Section 8.1.2
** Exercise 8.1
   #+BEGIN_QUOTE
   Write a function that takes and returns an ~istream&~. The function should
   read the stream until it hits end-of-file. The function should print what it
   reads to the standard output. Reset the stream so that it is valid before
   returning the stream.
   #+END_QUOTE

   #+BEGIN_SRC C++
std::istream& func(std::istream &is)
{
  std::string buf;
  while (is >> buf) std::cout << buf << std::endl;
  is.clear();
  return is;
}
   #+END_SRC

** Exercise 8.2
   #+BEGIN_QUOTE
   Test your function by calling it, passing cin as an argument.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

std::istream& func(std::istream &is)
{
  std::string buf;
  while (is >> buf) std::cout << buf << std::endl;
  is.clear();
  return is;
}

int main()
{
  std::istream &is = func(std::cin);
  std::cout << is.rdstate() << std::endl;

  return 0;
}   
   #+END_SRC

** Exercise 8.3
   #+BEGIN_QUOTE
   What causes the following while to terminate?
   ~while (cin >> i) /* ...*/~
   #+END_QUOTE
   
   The ~cin~ is in an error state.

* Exercises Section 8.2.1
** Exercise 8.4
   #+BEGIN_QUOTE
   Write a function to open a file for input and read its contents into a
   ~vector~ of ~strings~, storing each line as a separate element in the
   ~vector~.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <vector>
#include <fstream>

using std::cout;
using std::endl;
using std::string;
using std::vector;
using std::getline;
using std::ifstream;

void read(std::istream &is, vector<string> &svec) 
{
  string buf;
  while (getline(is, buf))
    svec.push_back(buf);
}

int main()
{
  string ifile = "./data/book.txt";
  ifstream in(ifile);
  vector<string> svec;
  read(in, svec);
  
  for (const auto &str : svec)
    cout << str << endl;

  return 0;
}   
   #+END_SRC

** Exercise 8.5
   #+BEGIN_QUOTE
   Rewrite the previous program to store each word in separate element.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <vector>
#include <fstream>

using std::cout;
using std::endl;
using std::string;
using std::vector;
using std::getline;
using std::ifstream;

void read(std::istream &is, vector<string> &svec) 
{
  string buf;
  while (is >> buf)
    svec.push_back(buf);
}

int main()
{
  string ifile = "./data/book.txt";
  ifstream in(ifile);
  vector<string> svec;
  read(in, svec);
  
  for (const auto &str : svec)
    cout << str << endl;

  return 0;
}   
   #+END_SRC

** Exercise 8.6
   #+BEGIN_QUOTE
   Rewrite the bookstore program from ยง 7.1.1 (p. 256) to read its transactions
   from a file. Pass the name of the file as an argument to main (ยง 6.2.5,
   p. 218).
   #+END_QUOTE
