* Exercises Section 12.1.1
** Exercise 12.1
#+BEGIN_QUOTE
How many elements do ~b1~ and ~b2~ have at the end of this code?
#+END_QUOTE

#+BEGIN_SRC 
StrBlob b1;
{
    StrBlob b2 = {"a", "an", "the"};
    b1 = b2;
    b2.push_back("about");
}
#+END_SRC

At the end of this code, ~b1~ has four elements and ~b2~ has been destroyed.

** Exercise 12.2
#+BEGIN_QUOTE
Write your own version of the ~StrBlob~ class including the ~const~ versions of
~front~ and ~back~.
#+END_QUOTE

StrBlob.h
#+BEGIN_SRC C++
#ifndef STRBLOB_H
#define STRBLOB_H

#include <vector>
#include <string>
#include <initializer_list>
#include <memory>
#include <exception>

// forward declaration needed for friend declaration in StrBlob
class StrBlobPtr;

class StrBlob {
    friend class StrBlobPtr;

  public:
    typedef std::vector<std::string>::size_type size_type;

    // constructors
    StrBlob();
    StrBlob(std::initializer_list<std::string> il);

    //size operations
    size_type size() const { return data->size(); }
    bool empty() const { return data->empty(); }

    // add and remove elements
    void push_back(const std::string &t) { data->push_back(t); }
    void pop_back();

    // element access
    std::string& front();
    std::string& back();
    const std::string& front() const;
    const std::string& back() const;


    // interface to StrBlobPtr
    StrBlobPtr begin();         // can't be defined until StrBlobPtr is
    StrBlobPtr end();

  private:
    std::shared_ptr<std::vector<std::string>> data;
    // throws msg if data[i] isn't valid
    void check(size_type i, const std::string &msg) const;
};

// constructor
inline StrBlob::StrBlob():
               data(std::make_shared<std::vector<std::string>>()) { }
inline StrBlob::StrBlob(std::initializer_list<std::string> il):
               data(std::make_shared<std::vector<std::string>>(il)) { }

std::string& StrBlob::front()
{
    // if the vector is empty, check will throws
    check(0, "front on empty StrBlob");
    return data->front();
}

std::string& StrBlob::back()
{
    check(0, "back on empty StrBlob");
    return data->back();
}

const std::string& StrBlob::front() const
{
    // if the vector is empty, check will throws
    check(0, "front on empty StrBlob");
    return data->front();
}

const std::string& StrBlob::back() const
{
    check(0, "back on empty StrBlob");
    return data->back();
}


void StrBlob::pop_back()
{
    check(0, "pop_back on empty StrBlob");
    data->pop_back();
}

void StrBlob::check(size_type i, const std::string &msg) const
{
    if (i >= data->size())
      throw std::out_of_range(msg);
}

#endif
#+END_SRC

#+BEGIN_SRC C++
#include <iostream>
using std::cout;
using std::endl;

#include "StrBlob.h"

int main()
{
  const StrBlob b1 = {"a", "an", "the"};
  StrBlob b2 = {"Hello", "World", "!"};

  cout << b1.front() << " " << b1.back() << endl;
  b2.back() = "!!!";
  cout << b2.front() << " " << b2.back() << endl;

  return 0;
}
#+END_SRC
** Exercise 12.3
#+BEGIN_QUOTE
Does this class need ~const~ versions of ~push_back~ and ~pop_back~? If so, add
them. If not, why aren’t they needed?
#+END_QUOTE

No. "You can certainly do this if you want to, but there doesn't seem to be any
logical reason. The compiler doesn't complain because this doesn't modify ~data~
(which is a pointer) but rather the thing ~data~ points to, which is perfectly
legal to do with a ~const~ pointer."

** Exercise 12.4
#+BEGIN_QUOTE
In our ~check~ function we didn’t check whether ~i~ was greater than zero. Why
is it okay to omit that check?
#+END_QUOTE
Because the type of ~i~ is ~std::vector<std::string>::size_type~ which is an
~unsigned~, and it will ensure ~i~ is a positive number or 0.
* Exercises Section 12.1.2
** Exercise 12.6
#+BEGIN_QUOTE
Write a function that returns a dynamically allocated ~vector~ of ~int~s. Pass
that ~vector~ to another function that reads the standard input to give values
to the elements. Pass the ~vector~ to another function to print the values that
were read. Remember to ~delete~ the ~vector~ at the appropriate time.
#+END_QUOTE

#+BEGIN_SRC C++
#include <iostream>
using std::cin;
using std::cout;
using std::endl;

#include <vector>
using std::vector;

vector<int>* factory()
{
  return new vector<int>{};
}

vector<int>* read_factory(vector<int>* vec)
{
  int value;
  while (cin >> value) {
    vec->push_back(value);
  }

  return vec;
}

void print_factory(vector<int>* vec)
{
  for (auto i : *vec)
    cout << i << endl;
}

int main()
{
  vector<int>* vec = read_factory(factory());
  print_factory(vec);
  delete vec;

  return 0;
}
#+END_SRC

** Exercise 12.7
#+BEGIN_QUOTE
Redo the previous exercise, this time using ~shared_ptr~.
#+END_QUOTE

#+BEGIN_SRC C++
#include <iostream>
using std::cin;
using std::cout;
using std::endl;

#include <vector>
using std::vector;

#include <memory>
using std::make_shared;
using std::shared_ptr;

shared_ptr<vector<int>> factory()
{
  return make_shared<vector<int>>();
}

shared_ptr<vector<int>> read_factory(shared_ptr<vector<int>> vec)
{
  int value;
  while (cin >> value) {
    vec->push_back(value);
  }

  return vec;
}

void print_factory(shared_ptr<vector<int>> vec)
{
  for (auto i : *vec)
    cout << i << endl;
}

int main()
{
  shared_ptr<vector<int>> vec = read_factory(factory());
  print_factory(vec);

  return 0;
}
#+END_SRC
** Exercise 12.8
#+BEGIN_QUOTE
Explain what if anything is wrong with the following function.
#+END_QUOTE

#+BEGIN_SRC C++
bool b() {
    int* p = new int;
    // ...
    return p;
}
#+END_SRC

In this question, ~p~ was the only pointer to the memory allocated. Once
function ~b~ returns, ~p~ will be converted to a ~bool~ and the program has no
way to free that memory. As a result, "memory leak" will occur.

* Exercises Section 12.1.3
** Exercise 12.10
#+BEGIN_QUOTE
Explain whether the following call to the ~process~ function defined on page 464
is correct. If not, how would you correct the call?
#+END_QUOTE

#+BEGIN_SRC C++
shared_ptr<int> p(new int(42));
process(shared_ptr<int>(p));
#+END_SRC

Correct.

** Exercise 12.11
#+BEGIN_QUOTE
What would happen if we called ~process~ as follows?
#+END_QUOTE

#+BEGIN_SRC C++
process(shared_ptr<int>(p.get()));
#+END_SRC

In this call, we passed a temporary ~shared_ptr~ to ~process~. That temporary is
destroyed when the expression in which the call appears finishes. The memory to
which the temporary points is freed when the temporary is destroyed.

** Exercise 12.12
#+BEGIN_QUOTE
Using the declarations of ~p~ and ~sp~ explain each of the following calls to
~process~. If the call is legal, explain what it does. If the call is illegal,
explain why:
#+END_QUOTE

#+BEGIN_SRC C++
auto p = new int();
auto sp = make_shared<int>();
#+END_SRC

#+BEGIN_QUOTE
1. process(sp);
2. process(new int());
3. process(p);
4. process(shared_ptr<int>(p));
#+END_QUOTE
