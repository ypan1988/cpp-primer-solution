* Exercises Section 12.1.1
** Exercise 12.1
   #+BEGIN_QUOTE
   How many elements do ~b1~ and ~b2~ have at the end of this code?
   #+END_QUOTE
   #+BEGIN_SRC C++
StrBlob b1;
{
    StrBlob b2 = {"a", "an", "the"};
    b1 = b2;
    b2.push_back("about");
}
   #+END_SRC

At the end of this code, ~b1~ has four elements and ~b2~ has been destroyed.

** Exercise 12.2
   #+BEGIN_QUOTE
   Write your own version of the ~StrBlob~ class including the ~const~ versions
   of ~front~ and ~back~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <vector>
#include <string>
#include <initializer_list>
#include <exception>
#include <memory>

class StrBlob {
public:
  typedef std::vector<std::string>::size_type size_type;

  // constructors
  StrBlob();
  StrBlob(std::initializer_list<std::string> il);

  // size operations
  size_type size() const { return data->size(); }
  bool empty() const { return data->empty(); }

  // add and remove elements
  void push_back(const std::string &t) { data->push_back(t); }
  void pop_back();

  // element access
  std::string& front();
  std::string& back();

  const std::string& front() const;
  const std::string& back() const;

private:
  std::shared_ptr<std::vector<std::string>> data;
  // throws msg if data[i] isn't valid
  void check(size_type i, const std::string &msg) const;
};

// constructor
inline StrBlob::StrBlob(): data(std::make_shared<std::vector<std::string>>()) { }
inline StrBlob::StrBlob(std::initializer_list<std::string> il):
  data(std::make_shared<std::vector<std::string>>(il)) { }

std::string& StrBlob::front()
{
  // if the vector is empty, check will throw
  check(0, "front on empty StrBlob");
  return data->front();
}

const std::string& StrBlob::front() const
{
  // if the vector is empty, check will throws
  check(0, "front on empty StrBlob");
  return data->front();
}

std::string& StrBlob::back()
{
  check(0, "back on empty StrBlob");
  return data->back();
}

const std::string& StrBlob::back() const
{
  check(0, "back on empty StrBlob");
  return data->back();
}

void StrBlob::pop_back()
{
  check(0, "pop_back on empty StrBlob");
  data->pop_back();
}

void StrBlob::check(size_type i, const std::string &msg) const
{
  if (i >= data->size())
    throw std::out_of_range(msg);
}

int main()
{
  const StrBlob b1 = {"a", "an", "the"};
  StrBlob b2 = {"Hello", "World", "!"};

  std::cout << b1.front() << " " << b1.back() << std::endl;
  b2.back() = "!!!";
  std::cout << b2.front() << " " << b2.back() << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 12.3
   #+BEGIN_QUOTE
   Does this class need ~const~ versions of ~push_back~ and ~pop_back~? If so,
   add them. If not, why aren’t they needed?
   #+END_QUOTE

   No. "You can certainly do this if you want to, but there doesn't seem to be
   any logical reason. The compiler doesn't complain because this doesn't modify
   ~data~ (which is a pointer) but rather the thing ~data~ points to, which is
   perfectly legal to do with a ~const~ pointer."

** Exercise 12.4
   #+BEGIN_QUOTE
   In our ~check~ function we didn’t check whether ~i~ was greater than
   zero. Why is it okay to omit that check?
   #+END_QUOTE

   Because the type of ~i~ is ~std::vector<std::string>::size_type~ which is an
   ~unsigned~, and it will ensure ~i~ is a positive number or 0.

** Exercise 12.5
   #+BEGIN_QUOTE
   We did not make the constructor that takes an ~initializer_list~ ~explicit~
   (§ 7.5.4, p. 296). Discuss the pros and cons of this design choice.
   #+END_QUOTE

   If we make the constructor ~explicit~, then program will prevents automatic
   conversion from an ~initializer_list~ to ~StrBlob~ which makes it easy to
   debug but hard to use.

* Exercises Section 12.1.2
** Exercise 12.6
   #+BEGIN_QUOTE
   Write a function that returns a dynamically allocated ~vector~ of
   ~int~s. Pass that ~vector~ to another function that reads the standard input
   to give values to the elements. Pass the ~vector~ to another function to
   print the values that were read. Remember to ~delete~ the ~vector~ at the
   appropriate time.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin;
using std::cout;
using std::endl;

#include <vector>
using std::vector;

vector<int>* factory()
{
  return new vector<int>{};
}

vector<int>* read_factory(vector<int> *vec)
{
  int value;
  while (cin >> value) {
    vec->push_back(value);
  }

  return vec;
}

void print_factory(vector<int> *vec)
{
  for (auto i : *vec)
    cout << i << endl;
}

int main()
{
  vector<int>* vec = read_factory(factory());
  print_factory(vec);
  delete vec;

  return 0;
}
   #+END_SRC

** Exercise 12.7
   #+BEGIN_QUOTE
   Redo the previous exercise, this time using ~shared_ptr~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin;
using std::cout;
using std::endl;

#include <vector>
using std::vector;

#include <memory>
using std::make_shared;
using std::shared_ptr;

shared_ptr<vector<int>> factory()
{
  return make_shared<vector<int>>();
}

shared_ptr<vector<int>> read_factory(shared_ptr<vector<int>> vec)
{
  int value;
  while (cin >> value) {
    vec->push_back(value);
  }

  return vec;
}

void print_factory(shared_ptr<vector<int>> vec)
{
  for (auto i : *vec)
    cout << i << endl;
}

int main()
{
  shared_ptr<vector<int>> vec = read_factory(factory());
  print_factory(vec);

  return 0;
}
   #+END_SRC

** Exercise 12.8
   #+BEGIN_QUOTE
   Explain what if anything is wrong with the following function.
   #+END_QUOTE
   #+BEGIN_SRC C++
bool b() {
    int* p = new int;
    // ...
    return p;
}
   #+END_SRC

   In this question, ~p~ was the only pointer to the memory allocated. Once
   function ~b~ returns, ~p~ will be converted to a ~bool~ and the program has
   no way to free that memory. As a result, "memory leak" will occur.

}

** Exercise 12.9
   #+BEGIN_QUOTE
   Explain what happens in the following code:
   #+END_QUOTE
   #+BEGIN_SRC C++
int *q = new int(42), *r = new int(100);
r = q;
auto q2 = make_shared<int>(42),
r2 = make_shared<int>(100);
r2 = q2;
   #+END_SRC

   After ~r = q;~ , both ~r~ and ~q~ will points to the same memory and the
   program has no way to free the memory to which ~r~ had pointed (result in
   memory leak).

   ~r2 = q2;~ assign ~q2~ to ~r2~, increase the use count for the object to
   which ~q2~ points, and reduce the use count of the object to which ~r2~ had
   pointed. Now the object ~r2~ had pointed to has no users, and that object is
   automatically freed.

* Exercises Section 12.1.3
** Exercise 12.10
   #+BEGIN_QUOTE
   Explain whether the following call to the ~process~ function defined on page
   464 is correct. If not, how would you correct the call?
   #+END_QUOTE
   #+BEGIN_SRC C++
shared_ptr<int> p(new int(42));
process(shared_ptr<int>(p));
   #+END_SRC

   Correct.

** Exercise 12.11
   #+BEGIN_QUOTE
   What would happen if we called ~process~ as follows?
   #+END_QUOTE
   #+BEGIN_SRC C++
process(shared_ptr<int>(p.get()));
   #+END_SRC

   In this call, we passed a temporary ~shared_ptr~ to ~process~. That temporary
   is destroyed when the expression in which the call appears finishes. The
   memory to which the temporary points is freed when the temporary is
   destroyed.

** Exercise 12.12
   #+BEGIN_QUOTE
   Using the declarations of ~p~ and ~sp~ explain each of the following calls to
   ~process~. If the call is legal, explain what it does. If the call is
   illegal, explain why:
   #+END_QUOTE
   #+BEGIN_SRC C++
auto p = new int();
auto sp = make_shared<int>();
   #+END_SRC
   #+BEGIN_QUOTE
   + (a) ~process(sp);~
   + (b) ~process(new int());~
   + (c) ~process(p);~
   + (d) ~process(shared_ptr<int>(p));~
   #+END_QUOTE

   + (a) legal. copying ~sp~ increments its count; in process the reference
     count is 2.
   + (b) illegal. cannot convert ~int *~ to ~shared_ptr<int>~.
   + (c) illegal. cannot convert ~int *~ to ~shared_ptr<int>~.
   + (d) legal, but the memory will be deleted!

** Exercise 12.13
   #+BEGIN_QUOTE
   What happens if we execute the following code?
   #+END_QUOTE
   #+BEGIN_SRC C++
auto sp = make_shared<int>();
auto p = sp.get();
delete p;
   #+END_SRC

   In this case, both ~sp~ and ~p~ point to the same memory. Destroying ~p~
   frees the memory to which ~p~ points. When ~sp~ is also destroyed, the
   pointer to that memory will be deleted a second time.

* Exercises Section 12.1.4
** Exercise 12.14
   #+BEGIN_QUOTE
   Write your own version of a function that uses a ~shared_ptr~ to manage a
   ~connection~.
   #+END_QUOTE

   #+BEGIN_SRC C++
struct destination;
struct connection;
connection connect(destination*);
void disconnect(connection);
void end_connection(connection *p) { disconnect(*p); }
void f(destination &d) {
  shared_ptr<connection> c(&d, end_connection);
  // use the connection
  // when f exits, even if by an exception, the connection will be properly closed
}
   #+END_SRC

** Exercise 12.15
   #+BEGIN_QUOTE
   Rewrite the first exercise to use a lambda (§ 10.3.2, p.388) in place of the
   ~end_connection~ function.
   #+END_QUOTE

   #+BEGIN_SRC C++
struct destination;
struct connection;
connection connect(destination*);
void disconnect(connection);
void f(destination &d) {
  shared_ptr<connection> c(&d, [](connnection *c) { disconnect(*c); });
  // use the connection
  // when f exits, even if by an exception, the connection will be properly closed
}
   #+END_SRC

* Exercises Section 12.1.5
** Exercise 12.16
   #+BEGIN_QUOTE
   Compilers don’t always give easy-to-understand error messages if we attempt
   to copy or assign a ~unique_ptr~. Write a program that contains these errors
   to see how your compiler diagnoses them.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <string>
using std::string;

#include <memory>
using std::unique_ptr;

int main()
{
  unique_ptr<string> p1(new string("Stegosaurus"));
  //unique_ptr<string> p2(p1); // error: no copy for unique_ptr
  unique_ptr<string> p3;
  //p3 = p2; // error: no assign for unique_ptr

  return 0;
}
   #+END_SRC

** Exercise 12.17
   #+BEGIN_QUOTE
   Which of the following unique_ptr declarations are illegal or likely to
   result in subsequent program error? Explain what the problem is with each
   one.
   #+END_QUOTE
   #+BEGIN_SRC C++
int ix = 1024, *pi = &ix, *pi2 = new int(2048);
typedef unique_ptr<int> IntP;
   #+END_SRC
   #+BEGIN_QUOTE
   + (a) ~IntP p0(ix);~
   + (b) ~IntP p1(pi);~
   + (c) ~IntP p2(pi2);~
   + (d) ~IntP p3(&ix);~
   + (e) ~IntP p4(new int(2048));~
   + (f) ~IntP p5(p2.get());~
   #+END_QUOTE

   When we define a ~unique_ptr~, we bind it to a pointer returned by ~new~. As
   with ~shared_ptr~ s, we must use the direct form of initialization. Only (d)
   and (e) will be illegal.

** Exercise 12.18
   #+BEGIN_QUOTE
   Why doesn’t ~shared_ptr~ have a ~release~ member?
   #+END_QUOTE

   ~shared_ptr~ cannot give away ownership unless it's unique() because the
   other copy will still destroy the object.

* Exercises Section 12.1.6
** Exercise 12.19
   #+BEGIN_QUOTE
   Define your own version of ~StrBlobPtr~ and update your ~StrBlob~ class with
   the appropriate ~friend~ declaration and ~begin~ and ~end~ members.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <vector>
#include <string>
#include <initializer_list>
#include <memory>
#include <stdexcept>

// forward declaration needed for friend declaration in StrBlob
class StrBlobPtr;

class StrBlob {
  friend class StrBlobPtr;
public:
  typedef std::vector<std::string>::size_type size_type;

  // constructors
  StrBlob();
  StrBlob(std::initializer_list<std::string> il);

  // size operation
  size_type size() const { return data->size(); }
  bool empty() const { return data->empty(); }

  // add and remove elements
  void push_back(const std::string &t) { data->push_back(t); }
  void pop_back();

  // element access
  std::string& front();
  std::string& back();

  // interface to StrBlobPtr
  StrBlobPtr begin();
  StrBlobPtr end();

private:
  std::shared_ptr<std::vector<std::string>> data;
  // throws msg if data[i] isn't valid
  void check(size_type i, const std::string &msg) const;
};

StrBlob::StrBlob(): data(std::make_shared<std::vector<std::string>>()) { }
StrBlob::StrBlob(std::initializer_list<std::string> il):
  data(std::make_shared<std::vector<std::string>>(il)) { };

void StrBlob::check(size_type i, const std::string &msg) const
{
  if (i >= data->size())
    throw std::out_of_range(msg);
}

std::string& StrBlob::front()
{
  // if the vector is empty, check will throw
  check(0, "front on empty StrBlob");
  return data->front();
}

std::string& StrBlob::back()
{
  check(0, "back on empty StrBlob");
  return data->back();
}

void StrBlob::pop_back()
{
  check(0, "pop_back on empty StrBlob");
  data->pop_back();
}

// StrBlobPtr throws an exception on attempts to access a nonexistent element
class StrBlobPtr {
  friend bool eq(const StrBlobPtr &, const StrBlobPtr &);
public:
  StrBlobPtr(): curr(0) { }
  StrBlobPtr(StrBlob &a, size_t sz = 0): wptr(a.data), curr(sz) { }

  std::string& deref() const;
  StrBlobPtr& incr();		// prefix version

private:
  // check returns a shared_ptr to the vector if the check succeeds
  std::shared_ptr<std::vector<std::string>>
  check(std::size_t, const std::string &) const;

  // store a weak_ptr, which means the underlying vector might be destroyed
  std::weak_ptr<std::vector<std::string>> wptr;
  std::size_t curr;		// current position within the array
};

std::shared_ptr<std::vector<std::string>>
StrBlobPtr::check(std::size_t i, const std::string &msg)
  const
{
  auto ret = wptr.lock();	// is the vector still around
  if (!ret)
    throw std::runtime_error("unbound StrBlobPtr");

  if (i >= ret->size())
    throw std::out_of_range(msg);

  return ret;			// otherwise, return a shared_ptr to the vector
}

std::string& StrBlobPtr::deref() const
{
  auto p = check(curr, "dereference past end");
  return (*p)[curr];		// (*p) is the vector to which this object points
}

// prefix: return a reference to the incremented object
StrBlobPtr& StrBlobPtr::incr()
{
  // if curr already points past the end of the container, can't increment it
  check(curr, "increment past end of StrBlobPtr");
  ++curr;			// advance the current state
  return *this;
}

StrBlobPtr
StrBlob::begin() { return StrBlobPtr(*this); }

StrBlobPtr
StrBlob::end() {
  auto ret = StrBlobPtr(*this, data->size());
  return ret;
}

// named equality operators for StrBlobPtr
bool eq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)
{
	auto l = lhs.wptr.lock(), r = rhs.wptr.lock();
	// if the underlying vector is the same
	if (l == r)
		// then they're equal if they're both null or
		// if they point to the same element
		return (!r || lhs.curr == rhs.curr);
	else
		return false; // if they point to difference vectors, they're not equal
}

bool neq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)
{
	return !eq(lhs, rhs);
}

int main()
{
	StrBlob b1;
	{
    StrBlob b2 = { "a", "an", "the" };
    b1 = b2;
    b2.push_back("about");
    std::cout << b2.size() << std::endl;
	}
	std::cout << b1.size() << std::endl;

	for (auto it = b1.begin(); neq(it, b1.end()); it.incr())
		std::cout << it.deref() << std::endl;

	return 0;
}
   #+END_SRC

** Exercise 12.20
   #+BEGIN_QUOTE
   Write a program that reads an input file a line at a time into a ~StrBlob~
   and uses a ~StrBlobPtr~ to print each element in that ~StrBlob~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <initializer_list>
#include <memory>
#include <stdexcept>

// forward declaration needed for friend declaration in StrBlob
class StrBlobPtr;

class StrBlob {
  friend class StrBlobPtr;
public:
  typedef std::vector<std::string>::size_type size_type;

  // constructors
  StrBlob();
  StrBlob(std::initializer_list<std::string> il);

  // size operation
  size_type size() const { return data->size(); }
  bool empty() const { return data->empty(); }

  // add and remove elements
  void push_back(const std::string &t) { data->push_back(t); }
  void pop_back();

  // element access
  std::string& front();
  std::string& back();

  // interface to StrBlobPtr
  StrBlobPtr begin();
  StrBlobPtr end();

private:
  std::shared_ptr<std::vector<std::string>> data;
  // throws msg if data[i] isn't valid
  void check(size_type i, const std::string &msg) const;
};

StrBlob::StrBlob(): data(std::make_shared<std::vector<std::string>>()) { }
StrBlob::StrBlob(std::initializer_list<std::string> il):
  data(std::make_shared<std::vector<std::string>>(il)) { };

void StrBlob::check(size_type i, const std::string &msg) const
{
  if (i >= data->size())
    throw std::out_of_range(msg);
}

std::string& StrBlob::front()
{
  // if the vector is empty, check will throw
  check(0, "front on empty StrBlob");
  return data->front();
}

std::string& StrBlob::back()
{
  check(0, "back on empty StrBlob");
  return data->back();
}

void StrBlob::pop_back()
{
  check(0, "pop_back on empty StrBlob");
  data->pop_back();
}

// StrBlobPtr throws an exception on attempts to access a nonexistent element
class StrBlobPtr {
  friend bool eq(const StrBlobPtr &, const StrBlobPtr &);
public:
  StrBlobPtr(): curr(0) { }
  StrBlobPtr(StrBlob &a, size_t sz = 0): wptr(a.data), curr(sz) { }

  std::string& deref() const;
  StrBlobPtr& incr();		// prefix version

private:
  // check returns a shared_ptr to the vector if the check succeeds
  std::shared_ptr<std::vector<std::string>>
  check(std::size_t, const std::string &) const;

  // store a weak_ptr, which means the underlying vector might be destroyed
  std::weak_ptr<std::vector<std::string>> wptr;
  std::size_t curr;		// current position within the array
};

std::shared_ptr<std::vector<std::string>>
StrBlobPtr::check(std::size_t i, const std::string &msg)
  const
{
  auto ret = wptr.lock();	// is the vector still around
  if (!ret)
    throw std::runtime_error("unbound StrBlobPtr");

  if (i >= ret->size())
    throw std::out_of_range(msg);

  return ret;			// otherwise, return a shared_ptr to the vector
}

std::string& StrBlobPtr::deref() const
{
  auto p = check(curr, "dereference past end");
  return (*p)[curr];		// (*p) is the vector to which this object points
}

// prefix: return a reference to the incremented object
StrBlobPtr& StrBlobPtr::incr()
{
  // if curr already points past the end of the container, can't increment it
  check(curr, "increment past end of StrBlobPtr");
  ++curr;			// advance the current state
  return *this;
}

StrBlobPtr
StrBlob::begin() { return StrBlobPtr(*this); }

StrBlobPtr
StrBlob::end() {
  auto ret = StrBlobPtr(*this, data->size());
  return ret;
}

// named equality operators for StrBlobPtr
bool eq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)
{
	auto l = lhs.wptr.lock(), r = rhs.wptr.lock();
	// if the underlying vector is the same
	if (l == r)
		// then they're equal if they're both null or
		// if they point to the same element
		return (!r || lhs.curr == rhs.curr);
	else
		return false; // if they point to difference vectors, they're not equal
}

bool neq(const StrBlobPtr &lhs, const StrBlobPtr &rhs)
{
	return !eq(lhs, rhs);
}

int main()
{
  std::string ifile("data/book.txt");
  std::ifstream in(ifile);

  StrBlob b;
  std::string s;
  while (std::getline(in, s)) b.push_back(s);

	for (auto it = b.begin(); neq(it, b.end()); it.incr())
		std::cout << it.deref() << std::endl;

	return 0;
}
   #+END_SRC

** Exercise 12.21
   #+BEGIN_QUOTE
   We could have written ~StrBlobPtr~ ’s ~deref~ member as follows:
   #+END_QUOTE
   #+BEGIN_SRC C++
std::string& deref() const
{ return (*check(curr, "dereference past end"))[curr]; }
   #+END_SRC
   #+BEGIN_QUOTE
   Which version do you think is better and why?
   #+END_QUOTE

   The original one is better, because the code is more readable.

** Exercise 12.22
   #+BEGIN_QUOTE
   What changes would need to be made to ~StrBlobPtr~ to create a class that can
   be used with a ~const StrBlob~? Define a class named ~ConstStrBlobPtr~ that
   can point to a ~const StrBlob~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <vector>
#include <string>
#include <initializer_list>
#include <memory>
#include <stdexcept>

// forward declaration needed for friend declaration in StrBlob
class ConstStrBlobPtr;

class StrBlob {
  friend class ConstStrBlobPtr;
public:
  typedef std::vector<std::string>::size_type size_type;

  // constructors
  StrBlob();
  StrBlob(std::initializer_list<std::string> il);

  // size operation
  size_type size() const { return data->size(); }
  bool empty() const { return data->empty(); }

  // add and remove elements
  void push_back(const std::string &t) { data->push_back(t); }
  void pop_back();

  // element access
  std::string& front();
  std::string& back();

  // interface to ConstStrBlobPtr
  ConstStrBlobPtr begin() const;
  ConstStrBlobPtr end() const;

private:
  std::shared_ptr<std::vector<std::string>> data;
  // throws msg if data[i] isn't valid
  void check(size_type i, const std::string &msg) const;
};

StrBlob::StrBlob(): data(std::make_shared<std::vector<std::string>>()) { }
StrBlob::StrBlob(std::initializer_list<std::string> il):
  data(std::make_shared<std::vector<std::string>>(il)) { };

void StrBlob::check(size_type i, const std::string &msg) const
{
  if (i >= data->size())
    throw std::out_of_range(msg);
}

std::string& StrBlob::front()
{
  // if the vector is empty, check will throw
  check(0, "front on empty StrBlob");
  return data->front();
}

std::string& StrBlob::back()
{
  check(0, "back on empty StrBlob");
  return data->back();
}

void StrBlob::pop_back()
{
  check(0, "pop_back on empty StrBlob");
  data->pop_back();
}

// ConstStrBlobPtr throws an exception on attempts to access a nonexistent element
class ConstStrBlobPtr {
  friend bool eq(const ConstStrBlobPtr &, const ConstStrBlobPtr &);
public:
  ConstStrBlobPtr(): curr(0) { }
  ConstStrBlobPtr(const StrBlob &a, size_t sz = 0): wptr(a.data), curr(sz) { }

  const std::string& deref() const;
  ConstStrBlobPtr& incr();		// prefix version

private:
  // check returns a shared_ptr to the vector if the check succeeds
  std::shared_ptr<std::vector<std::string>>
  check(std::size_t, const std::string &) const;

  // store a weak_ptr, which means the underlying vector might be destroyed
  std::weak_ptr<std::vector<std::string>> wptr;
  std::size_t curr;		// current position within the array
};

std::shared_ptr<std::vector<std::string>>
ConstStrBlobPtr::check(std::size_t i, const std::string &msg)
  const
{
  auto ret = wptr.lock();	// is the vector still around
  if (!ret)
    throw std::runtime_error("unbound ConstStrBlobPtr");

  if (i >= ret->size())
    throw std::out_of_range(msg);

  return ret;			// otherwise, return a shared_ptr to the vector
}

const std::string& ConstStrBlobPtr::deref() const
{
  auto p = check(curr, "dereference past end");
  return (*p)[curr];		// (*p) is the vector to which this object points
}

// prefix: return a reference to the incremented object
ConstStrBlobPtr& ConstStrBlobPtr::incr()
{
  // if curr already points past the end of the container, can't increment it
  check(curr, "increment past end of ConstStrBlobPtr");
  ++curr;			// advance the current state
  return *this;
}

ConstStrBlobPtr
StrBlob::begin() const {
  return ConstStrBlobPtr(*this);
}

ConstStrBlobPtr
StrBlob::end() const {
  auto ret = ConstStrBlobPtr(*this, data->size());
  return ret;
}

// named equality operators for ConstStrBlobPtr
bool eq(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)
{
	auto l = lhs.wptr.lock(), r = rhs.wptr.lock();
	// if the underlying vector is the same
	if (l == r)
		// then they're equal if they're both null or
		// if they point to the same element
		return (!r || lhs.curr == rhs.curr);
	else
		return false; // if they point to difference vectors, they're not equal
}

bool neq(const ConstStrBlobPtr &lhs, const ConstStrBlobPtr &rhs)
{
	return !eq(lhs, rhs);
}

int main()
{
	const StrBlob b = { "a", "an", "the", "about" };

	for (auto it = b.begin(); neq(it, b.end()); it.incr())
		std::cout << it.deref() << std::endl;

	return 0;
}
   #+END_SRC

* Exercises Section 12.2.1
** Exercise 12.23
   #+BEGIN_QUOTE
   Write a program to concatenate two string literals, putting the result in a
   dynamically allocated array of ~char~. Write a program to concatenate two
   library ~string~ s that have the same value as the literals used in the first
   program.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

#include <cstring>

int main()
{
  string s1 = "hello ";
  string s2 = "world!";

  char *c = new char[s1.size() + s2.size() + 1];
  strcat(c, s1.c_str());
  strcat(c, s2.c_str());
  cout << c << endl;
  delete [] c;

  cout << s1 + s2 << endl;

  return 0;
}
   #+END_SRC

** Exercise 12.24
   #+BEGIN_QUOTE
   Write a program that reads a ~string~ from the standard input into a
   dynamically allocated character array. Describe how your program handles
   varying size inputs. Test your program by giving it a ~string~ of data that
   is longer than the array size you’ve allocated.
   #+END_QUOTE
 
   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int main()
{
  int size;
  cout << "Input your string length: ";
  cin >> size;

  char *str = new char[size+1]();
  cout << "Input your string: ";
  cin >> str;

  cout << str << endl;
  delete [] str;

  return 0;
}   
   #+END_SRC

** Exercise 12.25
   #+BEGIN_QUOTE
   Given the following new expression, how would you delete pa?
   #+END_QUOTE
   #+BEGIN_SRC C++
int *pa = new int[10];   
   #+END_SRC
 
   ~delete [] pa;~

* Exercises Section 12.2.2
** Exercise 12.26
   #+BEGIN_QUOTE
   Rewrite the program on page 481 using an ~allocator~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <memory>
using std::allocator;

int main()
{
  size_t n = 10;

  allocator<string> alloc;
  auto const p = alloc.allocate(n);
  string s;
  auto q = p;
  while (cin >> s && q != p + n) {
    alloc.construct(q++, s);
  }
  
  while (q != p) {
    cout << *(q - 1) << " will be destroyed." << endl;
    alloc.destroy(--q);
  }

  alloc.deallocate(p, n);
  
  return 0;
}   
   #+END_SRC

* Exercises Section 12.3.1
** Exercise 12.27
   #+BEGIN_QUOTE
   The ~TextQuery~ and ~QueryResult~ classes use only capabilities that we have
   already covered. Without looking ahead, write your own versions of these
   classes.
   #+END_QUOTE

   #+BEGIN_SRC C++
class QueryResult {
  friend std::ostream& print(std::ostream&, const QueryResult&);
 public:
  typedef std::vector<std::string>::size_type line_no;
  typedef std::set<line_no>::const_iterator line_it;
 QueryResult(std::string s,
	     std::shared_ptr<std::set<line_no>> p,
	     std::shared_ptr<std::vector<std::string>> f):
  sought(s), lines(p), file(f) { }

  std::set<line_no>::size_type size() const { return lines->size(); }
  line_it begin() const { return lines->cbegin(); }
  line_it end() const { return lines->cend(); }

  std::shared_ptr<std::vector<std::string>> get_file() { return file; }
 private:
  std::string sought;		// word this query represents
  std::shared_ptr<std::set<line_no>> lines; // lines it's on
  std::shared_ptr<std::vector<std::string>> file; // input file
};

class TextQuery {
 public:
  using line_no = std::vector<std::string>::size_type;
  TextQuery(std::ifstream&);
  QueryResult query(const std::string&) const;
  void display_map();		// debugging aid: print the map
 private:
  std::shared_ptr<std::vector<std::string>> file; // input file
  // map each word to the set of the lines in which that word appears
  std::map<std::string,
    std::shared_ptr<std::set<line_no>>> wm;

  // canonicalizes text: removes punctuation and makes everything lower case
  static std::string cleanup_str(const std::string&);
};   

// read the input file and build the map of lines to line numbers
TextQuery::TextQuery(ifstream &is): file(new vector<string>)
{
  string text;
  while (getline(is, text)) {   // for each line in the file
    file->push_back(text);      // remember this line of text
    int n = file->size() - 1;   // the current line number
    istringstream line(text);   // separate the line into words
    string word;
    while (line >> word) {      // for each word in that line
      word = cleanup_str(word);
      // if word isn't already in wm, subscripting adds a new entry
      auto &lines = wm[word];   // lines is a shared_ptr
      if (!lines)               // that pointer is null the first time we see word
        lines.reset(new set<line_no>); // allocate a new set
      lines->insert(n);                // insert this line number
    }
  }
}

// not covered in the book -- cleanup_str removes
// punctuation and converts all text to lowercase so that
// the queries operate in a case insensitive manner
string TextQuery::cleanup_str(const string &word)
{
  string ret;
  for (auto it = word.begin(); it != word.end(); ++it) {
    if (!ispunct(*it))
      ret += tolower(*it);
  }
  return ret;
}

QueryResult
TextQuery::query(const string &sought) const
{
  // we'll return a pointer to this set if we don't find sought
  static shared_ptr<set<line_no>> nodata(new set<line_no>);

  // use find and not a subscript to avoid adding words to wm!
  auto loc = wm.find(cleanup_str(sought));
  if (loc == wm.end())
    return QueryResult(sought, nodata, file); // not found
  else
    return QueryResult(sought, loc->second, file);
}

ostream &print(ostream &os, const QueryResult &qr)
{
  // if the word was found, print the count and all occurrences
  os << qr.sought << " occurs " << qr.lines->size() << " "
     << (qr.lines->size() ? "time" : "times") << endl;

  // print each line in which the word appeared
  for (auto num : *qr.lines)	// for every element in the set
    // don't confound the user with text lines starting at 0
    os << "\t(line " << num + 1 << ") "
       << *(qr.file->begin() + num) << endl;

  return os;
}

// debugging routine, not covered in the book
void TextQuery::display_map()
{
  auto iter = wm.cbegin(), iter_end = wm.cend();

  // for each word in the map
  for ( ; iter != iter_end; ++iter) {
    cout << "word: " << iter->first << " {";

    // fetch location vector as a const reference to avoid copying it
    auto text_locs = iter->second;
    auto loc_iter = text_locs->cbegin(),
      loc_iter_end = text_locs->cend();

    // print all line numbers for this word
    while (loc_iter != loc_iter_end) {
      cout << *loc_iter;

      if (++loc_iter != loc_iter_end)
	cout << ", ";
    }

    cout << "}\n";		// end list of output this word
  }
  cout << endl;			// finished printing entire map
}
   #+END_SRC

** Exercise 12.28
   #+BEGIN_QUOTE
   Write a program to implement text queries without defining classes to manage
   the data. Your program should take a file and interact with a user to query
   for words in that file. Use vector, map, and set containers to hold the data
   for the file and to generate the results for the queries.
   #+END_QUOTE

** Exercise 12.29
   #+BEGIN_QUOTE
   We could have written the loop to manage the interaction with the user as a
   do while (§ 5.4.4, p. 189) loop. Rewrite the loop to use a do while. Explain
   which version you prefer and why.
   #+END_QUOTE
