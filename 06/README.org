#+STARTUP: content

* Exercises Section 6.1
** Exercise 6.1
   #+BEGIN_QUOTE
   What is the difference between a parameter and an argument?
   #+END_QUOTE

   Arguments are the initializers for a function’s parameters.

** Exercise 6.2
   #+BEGIN_QUOTE
   Indicate which of the following functions are in error and why. Suggest how
   you might correct the problems.
   + (a) ~int f() { string s; // ...
     return s;}~
   + (b) ~f2(int i) { /* ... */ }~
   + (c) ~int calc(int v1, int v1) /* ... */ }~
   + (d) ~double square(double x) return x * x;~
   #+END_QUOTE

   + (a) function return type should be ~string~
     #+BEGIN_SRC C++
int f() {
  string s;
  // ...
  return s;
}     
     #+END_SRC

   + (b) The function return type should be ~void~, which means that the function
     does not return a value.
     #+BEGIN_SRC C++
void f2(int i) {
  /* ... */
}     
     #+END_SRC

   + (c) The left curly brace is missing.
     #+BEGIN_SRC C++
int calc(int v1, int v1) {
  /* ... */ 
}     
     #+END_SRC

   + (d) The curly braces are needed for function body.
     #+BEGIN_SRC C++
double square(double x) {
  return x * x;
}     
     #+END_SRC

** Exercise 6.3
   #+BEGIN_QUOTE
   Write and test your own version of ~fact~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

// factorial of val is val*(val-1)*(val-2)...*2*1
int fact(int val)
{
  int ret = 1;			// local variable to hold the results as we
				// calculate it
  while (val > 1)
    ret *= val--;		// assign ret * val to ret and decrement val
  return ret;			// return the result;
}

int main()
{
  int j = fact(5);		// j equals 120, i.e., the result of fact(5)
  cout << "5! is " << j << endl;

  return 0;
}   
   #+END_SRC

** Exercise 6.4
   #+BEGIN_QUOTE
   Write a function that interacts with the user, asking for a number and
   generating the factorial of that number. Call this function from ~main~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

// factorial of val is val*(val-1)*(val-2)...*2*1
int fact(int val)
{
  int ret = 1;			// local variable to hold the results as we
				// calculate it
  while (val > 1)
    ret *= val--;		// assign ret * val to ret and decrement val
  return ret;			// return the result;
}

int main()
{
  cout << "please enter an integer: ";
  int i;
  cin >> i;
  int j = fact(i);
  cout << i << "! is " << j << endl;

  return 0;
}   
   #+END_SRC

** Exercise 6.5
   #+BEGIN_QUOTE
   Write a function to return the absolute value of its argument.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

int abs(int val) {
  return val >= 0 ? val : -val;
}

int main()
{
  cout << "please enter an integer: ";
  int i;
  cin >> i;
  int j = abs(i);
  cout << "The absolute value of " << i
       << " is " << j << endl;

  return 0;
}   
   #+END_SRC

* Exercises Section 6.1.1
** Exercise 6.6 
   #+BEGIN_QUOTE
   Explain the differences between a parameter, a local variable, and a local
   ~static~ variable. Give an example of a function in which each might be
   useful.
   #+END_QUOTE
   
   Parameters and variables defined inside a function body are referred to as
   local variables. They are “local” to that function and hide declarations of
   the same name made in an outer scope.
    
   It can be useful to have a local variable whose lifetime continues across
   calls to the function. We obtain such objects by defining a local variable as
   static. Each local static object is initialized before the first time
   execution passes through the object’s definition. Local statics are not
   destroyed when a function ends; they are destroyed when the program
   terminates.

   #+BEGIN_SRC C++
size_t count_calls(bool trace)  // trace is a parameter
{
  static size_t ctr = 0;  // ctr is a local static variable
  size_t result = ++ctr;  // result is a local variable
  return result;
}   
   #+END_SRC

** Exercise 6.7
   #+BEGIN_QUOTE
   Write a function that returns 0 when it is first called and then generates
   numbers in sequence each time it is called again.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <cstddef>
using std::size_t;

size_t count()
{
  static size_t ctr = 0;	// value will persist across calls
  return ctr++;
}

int main()
{
  for (size_t i = 0; i != 10; ++i)
    cout << count() << endl;
  
  return 0;
}   
   #+END_SRC

* Exercises Section 6.1.2
** Exercise 6.8
   #+BEGIN_QUOTE
   Write a header file named ~Chapter6.h~ that contains declarations for the
   functions you wrote for the exercises in § 6.1 (p. 205).
   #+END_QUOTE
   
   Chapter6.h
   #+BEGIN_SRC C++
int fact(int val);   
   #+END_SRC

* Exercises Section 6.1.3
** Exercise 6.9
   #+BEGIN_QUOTE
   Write your own versions of the ~fact.cc~ and ~factMain.cc~ files. These files
   should include your ~Chapter6.h~ from the exercises in the previous
   section. Use these files to understand how your compiler supports separate
   compilation.
   #+END_QUOTE

   fact.cc
   #+BEGIN_SRC C++
#include "Chapter6.h"

// factorial of val is val*(val-1)*(val-2)...*2*1
int fact(int val)
{
  int ret = 1;			// local variable to hold the results as we
				// calculate it
  while (val > 1)
    ret *= val--;		// assign ret * val to ret and decrement val
  return ret;			// return the result;
}   
   #+END_SRC

   factMain.cc
   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include "Chapter6.h"

int main()
{
  int j = fact(5);		// j equals 120, i.e., the result of fact(5)
  cout << "5! is " << j << endl;

  return 0;
}   
   #+END_SRC

* Exercises Section 6.2.1
** Exercise 6.10
   #+BEGIN_QUOTE
   Using pointers, write a function to swap the values of two ~int~s. Test the
   function by calling it and printing the swapped values.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

void swap(int *ip1, int *ip2) {
  int temp = *ip1;
  *ip1 = *ip2;
  *ip2 = temp;
}

int main()
{
  cout << "please enter two integers: ";

  int ival1, ival2;
  cin >> ival1 >> ival2;

  swap(&ival1, &ival2);
  
  cout << ival1 << " "
       << ival2 << endl;

  return 0;
}   
   #+END_SRC

* Exercises Section 6.2.2
** Exercise 6.11
   #+BEGIN_QUOTE
   Write and test your own version of ~reset~ that takes a reference.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

// function that takes a reference to an int and sets the given object to zero
void reset(int &i)  // i is just another name for the object passed to reset
{
  i = 0; // changes the value of the object to which i refers
}

int main()
{
  int j = 42;
  reset(j); // j is passed by reference; the vlaue in j is changed
  cout << "j = " << j << endl;	// prints j = 0

  return 0;
}   
   #+END_SRC

** Exercise 6.12
   #+BEGIN_QUOTE
   Rewrite the program from exercise 6.10 in § 6.2.1 (p. 210) to use references
   instead of pointers to swap the value of two ~int~s. Which version do you
   think would be easier to use and why?
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

void swap(int &ip1, int &ip2) {
  int temp = ip1;
  ip1 = ip2;
  ip2 = temp;
}

int main()
{
  cout << "please enter two integers: ";

  int ival1, ival2;
  cin >> ival1 >> ival2;

  swap(ival1, ival2);
  
  cout << ival1 << " "
       << ival2 << endl;

  return 0;
}   
   #+END_SRC

   this version would be easier to use. Programmers accustomed to programming in
   C often use pointer parameters to access objects outside a function. In C++,
   programmers generally use reference parameters instead.

** Exercise 6.13
   #+BEGIN_QUOTE
   Assuming ~T~ is the name of a type, explain the difference between a function
   declared as ~void f(T)~ and ~void f(T&)~.
   #+END_QUOTE

   When the function is defined as ~void f(T)~, the parameter is not a reference
   and the argument is passed by value; When the function is defined as ~void
   f(T&)~, the parameter is a reference and the argument is passed by reference.

** Exercise 6.14
   #+BEGIN_QUOTE
   Give an example of when a parameter should be a reference type. Give an
   example of when a parameter should not be a reference.
   #+END_QUOTE

   #+BEGIN_SRC C++
void process(string& text);  // inefficient to copy large object, use reference
void process(int value);     // it is not necessary to use reference
   #+END_SRC

** Exercise 6.15
   #+BEGIN_QUOTE
   Explain the rationale for the type of each of ~find_char~’s parameters In
   particular, why is ~s~ a reference to ~const~ but ~occurs~ is a plain
   reference? Why are these parameters references, but the ~char~ parameter ~c~
   is not? What would happen if we made ~s~ a plain reference?  What if we made
   ~occurs~ a reference to ~const~?
   #+END_QUOTE

   ~s~ can be a large string and should not be changed so it is defined as a
   reference to ~const~ while the value of ~occurs~ will be changed by the
   function hence it is defined as a plain reference. 

   ~char~ parameter ~c~ should not be a reference and is copied by value.

   Obviously the value of ~s~ might be changed in the function if we made it a
   plain reference while we are not able to change the value of ~occurs~ if it
   is defined as a reference to ~const~.

   
* Exercises Section 6.2.3
** Exercise 6.16
   #+BEGIN_QUOTE
   The following function, although legal, is less useful than it might
   be. Identify and correct the limitation on this function:

   ~bool is_empty(string& s) { return s.empty(); }~
   #+END_QUOTE

   Using a reference instead of a reference to ~const~ unduly limits the type of
   arguments that can be used with the function.  We cannot pass a ~const~
   object, or a literal, or an object that requires conversion to a plain
   reference parameter. It can be corrected as

   ~bool is_empty(const string &s) { return s.empty(); }~

** Exercise 6.17
   #+BEGIN_QUOTE
   Write a function to determine whether a ~string~ contains any capital
   letters. Write a function to change a ~string~ to all lowercase. Do the
   parameters you used in these functions have the same type? If so, why?  If
   not, why not?
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout;
using std::endl;

#include <string>
using std::string;

#include <cctype>
using std::isupper;
using std::tolower;

bool has_capital_letters(const string &s) {
  bool check = false;
  for (auto c : s) {
    if (isupper(c))
      check = true;
  }

  return check;
}

void to_lower(string &s) {
  for (auto &c : s) {
    if (isupper(c))
      c = tolower(c);
  }
}

int main()
{
  cout << has_capital_letters("Hello World") << endl;
  cout << has_capital_letters("hello world") << endl;

  string s("HELLO WORLD");
  to_lower(s);
  cout << s << endl;
  
  return 0;
}
   #+END_SRC

   The parameters in the two functions do not have the same type. For function
   ~has_capital_letters~, the parameter is defined as reference to ~const~ and
   it will not be changed by the function. For function ~to_lower~, ~const~
   should not be used since the parameter will be changed in the function.

** Exercise 6.18
   #+BEGIN_QUOTE
   Write declarations for each of the following functions. When you write these
   declarations, use the name of the function to indicate what the function
   does.
 
   + (a) A function named ~compare~ that returns a ~bool~ and has two parameters
     that are references to a class named ~matrix~.
   + (b) A function named ~change_val~ that returns a ~vector<int>~ iterator and
     takes two parameters: One is an ~int~ and the other is an iterator for a
     ~vector<int>~.
   #+END_QUOTE

   + (a) ~bool compare(const matrix &m1, const matrix &m2) { }~
   + (b) ~vector<int>::iterator change_val(int ival, vector<int>::iterator it) { }~

** Exercise 6.19
   #+BEGIN_QUOTE
   Given the following declarations, determine which calls are legal and which
   are illegal. For those that are illegal, explain why.
   #+END_QUOTE
   #+BEGIN_SRC C++
double calc(double);
int count(const string &, char);
int sum(vector<int>::iterator, int);
vector<int> vec(10);   
   #+END_SRC
   #+BEGIN_QUOTE
   + (a) ~calc(23.4, 55.1);~
   + (b) ~count("abcda", 'a');~
   + (c) ~calc(66);~
   + (d) ~sum(vec.begin(), vec.end(), 3.8);~
   #+END_QUOTE
   
   + (a) illegal. too many parameters.
   + (b) legal.
   + (c) legal. int will be converted to double.
   + (d) legal???

** Exercise 6.20
   #+BEGIN_QUOTE
   When should reference parameters be references to ~const~?  What happens if
   we make a parameter a plain reference when it could be a reference to
   ~const~?
   #+END_QUOTE
   
   Reference parameters be references to ~const~ when function does not its
   value. Using a reference instead of a reference to ~const~ unduly limits the
   type of arguments that can be used with the function. As we’ve just seen, we
   cannot pass a ~const~ object, or a literal, or an object that requires
   conversion to a plain reference parameter.
