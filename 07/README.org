* Exercises Section 7.1.1
** Exercise 7.1
   #+BEGIN_QUOTE
   Write a version of the transaction-processing program from § 1.6 (p. 24)
   using the ~Sales_data~ class you defined for the exercises in § 2.6.1 (p.
   72).
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

struct Sales_data {
  std::string bookNo;
  unsigned units_sold = 0;
  double revenue = 0.0;
};

int main()
{
  Sales_data total; // variable to hold data for the next transaction

  // read the first transaction and ensure that there are data to process
  if (std::cin >> total.bookNo >> total.units_sold >> total.revenue) {
    Sales_data trans;           // variable to hold the running sum
    // read and process the remaining transtraction
    while (std::cin >> trans.bookNo >> trans.units_sold >> trans.revenue) {
      // if we're still processing the same book
      if (total.bookNo == trans.bookNo) {
        // update the running total
        total.units_sold += trans.units_sold;
        total.revenue += trans.revenue;
      } else {
        // print results for the previous book
        std::cout << total.bookNo << " "
                  << total.units_sold << " "
                  << total.revenue << std::endl;
        total = trans;          // total now refers to the next book
      }
    }
    std::cout << total.bookNo << " "
              << total.units_sold << " "
              << total.revenue << std::endl;
  } else {
    // no input! warn the user
    std::cerr << "No data?!" << std::endl;
    return -1;                  // indicate failure
  }

  return 0;
}
   #+END_SRC
   
* Exercises Section 7.1.2
** Exercise 7.2
   #+BEGIN_QUOTE
   Add the ~combine~ and ~isbn~ members to the ~Sales_data~ class you wrote for
   the exercises in § 2.6.2 (p. 76).
   #+END_QUOTE

   #+BEGIN_SRC C++
// add the value of the given Sales_data into this object
Sales_data&
Sales_data::combine(const Sales_data &rhs) {
  units_sold += rhs.units_sold;	// add the members of rhs into
  revenue += rhs.revenue;	// the members of "this" object
  return *this;			// return the object on which the function was called
}

std::string 
Sales_data::isbn() const { 
  return bookNo; 
}   
   #+END_SRC

** Exercise 7.3
   #+BEGIN_QUOTE
   Revise your transaction-processing program from § 7.1.1 (p. 256) to use these
   members.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

struct Sales_data {
  std::string bookNo;
  unsigned units_sold = 0;
  double revenue = 0.0;

  // operations on Sales_data objects
  std::string isbn() const { return bookNo; }
  Sales_data& combine(const Sales_data&);
};

// add the value of the given Sales_data into this object
Sales_data&
Sales_data::combine(const Sales_data &rhs) {
  units_sold += rhs.units_sold;	// add the members of rhs into
  revenue += rhs.revenue;	// the members of "this" object
  return *this;			// return the object on which the function was called
}

int main()
{
  Sales_data total; // variable to hold data for the next transaction

  // read the first transaction and ensure that there are data to process
  if (std::cin >> total.bookNo >> total.units_sold >> total.revenue) {
    Sales_data trans;           // variable to hold the running sum
    // read and process the remaining transtraction
    while (std::cin >> trans.bookNo >> trans.units_sold >> trans.revenue) {
      // if we're still processing the same book
      if (total.isbn() == trans.isbn()) {
        // update the running total
        total.combine(trans);
      }
      else {
        // print results for the previous book
        std::cout << total.bookNo << " "
                  << total.units_sold << " "
                  << total.revenue << std::endl;
        total = trans;          // total now refers to the next book
      }
    }
    std::cout << total.bookNo << " "
              << total.units_sold << " "
              << total.revenue << std::endl;
  } else {
    // no input! warn the user
    std::cerr << "No data?!" << std::endl;
    return -1;                  // indicate failure
  }

  return 0;
}
   #+END_SRC

** Exercise 7.4
   #+BEGIN_QUOTE
   Write a class named ~Person~ that represents the name and address of a
   person. Use a ~string~ to hold each of these elements. Subsequent exercises
   will incrementally add features to this class.
   #+END_QUOTE

   #+BEGIN_SRC C++
class Person {
 private:
  std::string name;
  std::string address;
};   
   #+END_SRC

** Exercise 7.5
   #+BEGIN_QUOTE
   Provide operations in your ~Person~ class to return the name and address.
   Should these functions be ~const~? Explain your choice.
   #+END_QUOTE

   #+BEGIN_SRC C++
class Person {
 private:
  std::string name;
  std::string address;
 public:
  std::string get_name() const { return name; }
  std::string get_addr() const { return address; }
};   
   #+END_SRC

   The body of ~get_name~ and ~get_addr~ will not change the object to which
   ~this~ points, so these functions should be ~const~.

* Exercises Section 7.1.3
** Exercise 7.6
   #+BEGIN_QUOTE
   Define your own versions of the add, read, and print functions.
   #+END_QUOTE

   #+BEGIN_SRC C++
// add the value of the given Sales_data into this object
Sales_data&
Sales_data::combine(const Sales_data &rhs) {
  units_sold += rhs.units_sold;	// add the members of rhs into
  revenue += rhs.revenue;	// the members of "this" object
  return *this;			// return the object on which the function was
				// called
}

Sales_data
add(const Sales_data &lhs, const Sales_data &rhs) {
  Sales_data sum = lhs;		// copy data members from lhs into sum
  sum.combine(rhs);		// add data members from rhs into sum
  return sum;
}

// transactions contain ISBN, number of copies sold, and sales price
std::istream&
read(std::istream &is, Sales_data &item) {
  double price = 0.0;
  is >> item.bookNo >> item.units_sold >> price;
  item.revenue = price * item.units_sold;
  return is;
}

std::ostream&
print(std::ostream &os, const Sales_data &item) {
  os << item.isbn() << " " << item.units_sold << " "
     << item.revenue << " " << item.avg_price();
  return os;
}
   #+END_SRC
 
** Exercise 7.7
   #+BEGIN_QUOTE
   Rewrite the transaction-processing program you wrote for the exercises in §
   7.1.2 (p. 260) to use these new functions.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

struct Sales_data {
  std::string bookNo;
  unsigned units_sold = 0;
  double revenue = 0.0;

  // operations on Sales_data objects
  std::string isbn() const { return bookNo; }
  Sales_data& combine(const Sales_data&);
  double avg_price() const;
};

// add the value of the given Sales_data into this object
Sales_data&
Sales_data::combine(const Sales_data &rhs) {
  units_sold += rhs.units_sold;	// add the members of rhs into
  revenue += rhs.revenue;	// the members of "this" object
  return *this;			// return the object on which the function was
				// called
}

double Sales_data::avg_price() const {
  if (units_sold)
    return revenue/units_sold;
  else
    return 0;
}

Sales_data
add(const Sales_data &lhs, const Sales_data &rhs) {
  Sales_data sum = lhs;		// copy data members from lhs into sum
  sum.combine(rhs);		// add data members from rhs into sum
  return sum;
}

// transactions contain ISBN, number of copies sold, and sales price
std::istream&
read(std::istream &is, Sales_data &item) {
  double price = 0.0;
  is >> item.bookNo >> item.units_sold >> price;
  item.revenue = price * item.units_sold;
  return is;
}

std::ostream&
print(std::ostream &os, const Sales_data &item) {
  os << item.isbn() << " " << item.units_sold << " "
     << item.revenue << " " << item.avg_price();
  return os;
}   

int main()
{
  Sales_data total; // variable to hold data for the next transaction

  // read the first transaction and ensure that there are data to process
  if (read(std::cin, total)) {
    Sales_data trans;           // variable to hold the running sum
    // read and process the remaining transtraction
    while (read(std::cin, trans)) {
      // if we're still processing the same book
      if (total.isbn() == trans.isbn()) {
	// update the running total
	total.combine(trans);	
      }
      else {
        // print results for the previous book
	print(std::cout, total);
        std::cout << std::endl;
        total = trans;          // total now refers to the next book
      }
    }
    print(std::cout, total);
    std::cout << std::endl;
  } else {
    // no input! warn the user
    std::cerr << "No data?!" << std::endl;
    return -1;                  // indicate failure
  }

  return 0;
}   
   #+END_SRC

** Exercise 7.8
   #+BEGIN_QUOTE
   Why does ~read~ define its ~Sales_data~ parameter as a plain reference and
   ~print~ define its parameter as a reference to ~const~?
   #+END_QUOTE
   
   ~Sales_data~ is defined as a plain reference in ~read~ since we may change
   its data members while it is defined as a reference to ~const~ in ~print~
   since we don't want to write to its data members.

** Exercise 7.9
   #+BEGIN_QUOTE
   Add operations to read and print ~Person~ objects to the code you wrote for
   the exercises in § 7.1.2 (p. 260).
   #+END_QUOTE

   #+BEGIN_SRC C++
std::istream&
read(std::istream &is, Person &person) {
  is >> person.name >> person.address;
  return is;
}

std::ostream&
print(std::ostream &os, Person &person) {
  os << person.name << " "
     << person.address << " " 
     << std::endl;
}   
   #+END_SRC

** Exercise 7.6
   #+BEGIN_QUOTE
   Define your own versions of ~add~, ~read~, and ~print~ functions.
   #+END_QUOTE

   #+BEGIN_SRC C++
Sales_data add(const Sales_data &lhs, const Sales_data &rhs)
{
  Sales_data sum = lhs;  // copy data members from lhs into sum
  sum.combine(rhs);      // add data members from rhs into sum
  return sum;
}

// input transactions contain ISBN, number of copies sold, and sales price
istream &read(istream &is, Sales_data &item)
{
  double price = 0;
  is >> item.bookNo >> item.units_sold >> price;
  item.revenue = price * item.units_sold;
  return is;
}

ostream &print(ostream &os, const Sales_data &item)
{
  os << item.isbn() << " " << item.units_sold << " "
     << item.revenue << " " << item.avg_price();
  return os;
}
   #+END_SRC

** Exercise 7.10
   #+BEGIN_QUOTE
   What does the condition in the following if statement do?

   ~if (read(read(cin, data1), data2))~
   #+END_QUOTE

* Exercises Section 7.3.3
** Exercise 7.31
   #+BEGIN_QUOTE
   Define a pair of classes ~X~ and ~Y~, in which ~X~ has a pointer to ~Y~, and
   ~Y~ has an object of type ~X~.
   #+END_QUOTE

   #+BEGIN_SRC C++
class Y;  // forward declaration
class X {
  Y *py;
};   
class Y {
  X x;
};
   #+END_SRC

