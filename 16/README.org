* Exercises Section 16.1.1
** Exercise 16.1
   #+BEGIN_QUOTE
   Define instantiation.
   #+END_QUOTE

   When the compiler instantiates a template, it creates a new “instance” of the
   template using the actual template argument(s) in place of the corresponding
   template parameter(s). These compiler-generated functions are generally
   referred to as an instantiation of the template.

** Exercise 16.2
   #+BEGIN_QUOTE
   Write and test your own versions of the compare functions.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

template <typename T>
int compare(const T &v1, const T &v2)
{
  if (v1 < v2) return -1;
  if (v2 < v1) return 1;
  return 0;
}

int main()
{
  cout << compare(1, 0) << endl;

  vector<int> vec1{1, 2, 3}, vec2{4, 5, 6};
  cout << compare(vec1, vec2) << endl;

  return 0;
}
   #+END_SRC

** Exercise 16.3
   #+BEGIN_QUOTE
   Call your ~compare~ function on two ~Sales_data~ objects to see how your
   compiler handles errors during instantiation.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

class Sales_data { };

template <typename T>
int compare(const T &v1, const T &v2)
{
  if (v1 < v2) return -1;
  if (v2 < v1) return 1;
  return 0;
}

int main()
{
  Sales_data data1, data2;
  // cout << compare(data1, data2) << endl;

  // error: no match for 'operator<' (operand types are 'const Sales_data' and
  // 'const Sales_data')

  return 0;
}
   #+END_SRC

** Exercise 16.4
   #+BEGIN_QUOTE
   Write a template that acts like the library ~find~ algorithm. The function
   will need two template type parameters, one to represent the function’s
   iterator parameters and the other for the type of the value. Use your
   function to find a given value in a ~vector<int>~ and in a ~list<string>~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

#include <list>
using std::list;

template <typename iterator, typename value_type>
iterator find(iterator first, iterator last, const value_type &value)
{
  while (*first != value && first != last) ++first;
  return first;
}

int main()
{
  vector<int> ivec = {1, 2, 3, 4, 5, 6, 7, 8, 9};
  cout << (ivec.cend() != find(ivec.begin(), ivec.end(), 5) ? "found" : "not found")
       << endl;

  list<string> slst = {"aa", "bb", "cc", "dd", "ee", "ff", "gg"};
  cout << (slst.cend() != find(slst.begin(), slst.end(), "zz") ? "found" : "not found")
       << endl;

  return 0;
}
   #+END_SRC

** Exercise 16.5
   #+BEGIN_QUOTE
   Write a template version of the ~print~ function from § 6.2.4 (p. 217) that
   takes a reference to an array and can handle arrays of any size and any
   element type.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <string>

template <typename Array>
void print(const Array &a){
  for (const auto &elem : a)
    std::cout << elem << std::endl;
  std::cout << std::endl;
}

int main()
{
  int i[] = {1, 2, 3, 4, 5};
  char c[] = {'a', 'b', 'c', 'd', 'e'};
  std::string s[] = {"aa", "bb", "cc", "dd", "ee"};

  print(i);
  print(c);
  print(s);

  return 0;
}
   #+END_SRC

** Exercise 16.6
   #+BEGIN_QUOTE
   How do you think the library ~begin~ and ~end~ functions that take an array
   argument work? Define your own versions of these functions.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

template <typename T, unsigned N>
T* array_begin(T (&arr)[N])
{
  return arr;
}

template <typename T, unsigned N>
T* array_end(T (&arr)[N])
{
  return arr + N;
}

int main()
{
  string sa[] = {"aa", "bb", "cc", "dd"};
  cout << *(array_begin(sa) + 1) << endl;
  cout << *(array_end(sa) - 1) << endl;

  return 0;
}
   #+END_SRC

** Exercise 16.7
   #+BEGIN_QUOTE
   Write a ~constexpr~ template that returns the size of a given array.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <string>
using std::string;

template <typename T, unsigned N>
constexpr unsigned get_array_size(const T (&arr)[N])
{
  return N;
}

int main()
{
  char ca[] = "abcd";
  cout << get_array_size(ca) << endl; // 5

  string sa[] = {"aa", "bb", "cc", "dd"};
  cout << get_array_size(sa) << endl; // 4

  return 0;
}
   #+END_SRC

** Exercise 16.8
   #+BEGIN_QUOTE
   In the “Key Concept” box on page 108, we noted that as a matter of habit C++
   programmers prefer using != to using <. Explain the rationale for this habit.
   #+END_QUOTE

   The reason is that more class defines "!=" rather than "<". Doing so can
   reduce the number of requirement of the class used with a template class.

* Exercises Section 16.1.2
** Exercise 16.9
   #+BEGIN_QUOTE
   What is a function template? What is a class template?
   #+END_QUOTE

   A *function template* is a formula from which we can generate type-specific
   versions of that function. A *class template* is a blueprint for generating
   classes. Class templates diff from function template in that the compiler
   cannot deduce the template parameter type(s) for a class template. Instead,
   to use a class template we must supply additional information inside angle
   brackets following the template's name. That extra information is the list of
   template arguments to use in place of the template parameters.

** Exercise 16.10
   #+BEGIN_QUOTE
   What happens when a class template is instantiated?
   #+END_QUOTE

   The compiler uses the template arguments to instantiate a specific class from
   the template.

** Exercise 16.11
   #+BEGIN_QUOTE
   The following definition of List is incorrect. How would you fix it?
   #+END_QUOTE
   #+BEGIN_SRC C++
template <typename elemType> class ListItem;
template <typename elemType> class List {
 public:
  List<elemType>();
  List<elemType>(const List<elemType> &);
  List<elemType>& operator=(const List<elemType> &);
  ~List();
  void insert(ListItem *ptr, elemType value);
 private:
  ListItem *front, *end;
};
   #+END_SRC

   Replace ~ListItem~ with ~ListItem<elemType>~ inside class template ~List~
   since template ~ListItem~ is not the name of a type.

** Exercise 16.12
   #+BEGIN_QUOTE
   Write your own version of the ~Blob~ and ~BlobPtr~ templates. including the
   various ~const~ members that were not shown in the text.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <string>
#include <vector>
#include <memory>
#include <initializer_list>

template <typename T> class BlobPtr;
template <typename T> class Blob {
  friend class BlobPtr<T>;
 public:
  typedef T value_type;
  typedef typename std::vector<T>::size_type size_type;

  // constructors
  Blob();
  Blob(std::initializer_list<T> il);

  // number of elements in the Blob
  size_type size() const { return data->size(); }
  bool empty() const { return data->empty(); }

  // add and remove elements
  void push_back(const T &t) { data->push_back(t); }
  void push_back(T &&t) { data->push_back(std::move(t)); }
  void pop_back();

  // element access
  T& back();
  T& operator[](size_type i);

  // return BlobPtr to the first and one past the last element
  BlobPtr<T> begin() { return BlobPtr<T>(*this); }
  BlobPtr<T> end() { return BlobPtr<T>(*this, data->size()); }

 private:
  std::shared_ptr<std::vector<T>> data;

  // throws msg if data[i] isn't valid
  void check(size_type i, const std::string &msg) const;
};

template <typename T>
Blob<T>::Blob(): data(std::make_shared<std::vector<T>>()) { }

template <typename T>
Blob<T>::Blob(std::initializer_list<T> il):
data(std::make_shared<std::vector<T>>(il)) { }

template <typename T>
void Blob<T>::pop_back()
{
  check(0, "pop_back on empty Blob");
  data->pop_back();
}

template <typename T>
T& Blob<T>::back()
{
  check(0, "back on empty Blob");
  return data->back();
}

template <typename T>
T& Blob<T>::operator[](size_type i)
{
  // if i is too big, check will throw, preventing access to a nonexistent
  // element
  check(i, "subscript out of range");
  return (*data)[i];
}

template <typename T>
void Blob<T>::check(size_type i, const std::string &msg) const
{
  if (i >= data->size())
    throw std::out_of_range(msg);
}

template <typename T>
bool operator==(const BlobPtr<T>&, const BlobPtr<T>&);

// BlobPtr throws an exception an attempts to access a nonexistent element
template <typename T> class BlobPtr
{
  friend bool operator==<T>(const BlobPtr<T>&, const BlobPtr<T>&);
 public:
 BlobPtr(): curr(0) { }
 BlobPtr(Blob<T> &a, size_t sz = 0): wptr(a.data), curr(sz) { }

  T& operator*() const {
    auto p = check(curr, "dereference past end");
    return (*p)[curr];		// (*p) is the vector to which this object points
  }

  // increment and decrement
  BlobPtr& operator++();	// prefix operators
  BlobPtr& operator--();
  BlobPtr operator++(int);	// postfix operators
  BlobPtr operator--(int);

 private:
  // check returns a shared_ptr to the vector if the check succeeds
  std::shared_ptr<std::vector<T>>
    check(std::size_t, const std::string &msg) const;
  // store a weak_ptr, which means the underlying vector might be destroyed
  std::weak_ptr<std::vector<T>> wptr;
  std::size_t curr;		// current position within the array
};

// equality operators
template <typename T>
bool operator==(const BlobPtr<T> &lhs, const BlobPtr<T> &rhs)
{
  return lhs.wptr.lock().get() == rhs.wptr.lock().get() &&
         lhs.curr == rhs.curr;
}

template <typename T>
bool operator!=(const BlobPtr<T> &lhs, const BlobPtr<T> &rhs)
{
  return !(lhs == rhs);
}

// prefix: return a reference to the incremented/decremented object
template <typename T>
BlobPtr<T>& BlobPtr<T>::operator++()
{
  // if curr already points past the end of the container, can't increment it
  check(curr, "increment past end of BlobPtr");
  ++curr;			// advance the current state
  return *this;
}

template <typename T>
BlobPtr<T>& BlobPtr<T>::operator--()
{
  // if curr is zero, decrementing it will yield an invalid subscript
  --curr;			// move the current state back one element
  check(curr, "decrement past begin of BlobPtr");
  return *this;
}

// postfix: increment/decrement the object but return the unchanged value
template <typename T>
BlobPtr<T> BlobPtr<T>::operator++(int)
{
  // no check needed here; the call to prefix increment will do the check
  BlobPtr ret = *this;		// save the current value
  ++*this;			// advance one element; prefix ++ checks the increment
  return ret;			// return the saved state
}

template <typename T>
BlobPtr<T> BlobPtr<T>::operator--(int)
{
  // no check needed here; the call to prefix decrement will do the check
  BlobPtr ret = *this;		// save the current value
  --*this;			// move backward one element; prefix -- checks the increment
  return ret;			// return the saved state
}


// check member
template <typename T>
std::shared_ptr<std::vector<T>>
BlobPtr<T>::check(std::size_t i, const std::string &msg) const
{
  auto ret = wptr.lock();  // is the vector still around?
  if (!ret) throw std::runtime_error("unbound BlobPtr");
  if (i >= ret->size()) throw std::out_of_range(msg);
  return ret;  // otherwise, return a shared_ptr to the vector
}

int main()
{
  Blob<std::string> b1;		// empty Blob
  std::cout << b1.size() << std::endl;
  {  // new scope
    Blob<std::string> b2 = {"a", "an", "the"};
    b1 = b2;  // b1
    b2.push_back("about");
    std::cout << b1.size() << " " << b2.size() << std::endl;
  }  // b2 is destroyed, but the elements it points to must not be destroyed
  std::cout << b1.size() << std::endl;
  for(auto p = b1.begin(); p != b1.end(); ++p)
    std::cout << *p << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 16.13
   #+BEGIN_QUOTE
   Explain which kind of friendship you chose for the equality and relational
   operators for ~BlobPtr~.
   #+END_QUOTE

   One-to-One friendship.

** Exercise 16.14
   #+BEGIN_QUOTE
   Write a Screen class template that uses nontype parameters to define the
   height and width of the Screen.
   #+END_QUOTE

** Exercise 16.15
   #+BEGIN_QUOTE
   Implement input and output operators for your Screen template. Which, if any,
   friends are necessary in class Screen to make the input and output operators
   work? Explain why each friend declaration, if any, was needed.
   #+END_QUOTE

** Exercise 16.16
   #+BEGIN_QUOTE
   Rewrite the ~StrVec~ class (§ 13.5, p. 526) as a template named Vec.
   #+END_QUOTE

* Exercises Section 16.1.3
** Exercise 16.17
   #+BEGIN_QUOTE
   What, if any, are the differences between a type parameter that is declared
   as a ~typename~ and one that is declared as a ~class~? When must ~typename~
   be used?
   #+END_QUOTE

   The key word ~class~ or ~typename~ have the same meaning and can be used
   interchangeably inside a template parameter list.

   When we want to inform the compiler that a name represents a type, we must
   use the keyword ~typename~, not ~class~.

** Exercise 16.18
   #+BEGIN_QUOTE
   Explain each of the following function template declarations and identify
   whether any are illegal. Correct each error that you find.
   + (a) ~template <typename T, U, typename V> void f1(T, U, V);~
   + (b) ~template <typename T> T f2(int &T);~
   + (c) ~inline template <typename T> T foo(T, unsigned int*);~
   + (d) ~template <typename T> f4(T, T);~
   + (e) ~typedef char Ctype; template <typename Ctype> Ctype f5(Ctype a);~
   #+END_QUOTE

** Exercise 16.19
   #+BEGIN_QUOTE
   Write a function that takes a reference to a container and prints the
   elements in that container. Use the container’s size_type and size members to
   control the loop that prints the elements.
   #+END_QUOTE

** Exercise 16.20
   #+BEGIN_QUOTE
   Rewrite the function from the previous exercise to use iterators returned
   from begin and end to control the loop.
   #+END_QUOTE

* Exercises Section 16.4
** Exercise 16.51
   #+BEGIN_QUOTE
   Determine what ~sizeof...(Args)~ and ~sizeof...(rest)~ return for each call
   to ~foo~ in this section.
   #+END_QUOTE

   #+BEGIN_SRC C++
foo(i, s, 42, d);  // 3 3
foo(s, 42, "hi");  // 2 2
foo(d, s);         // 1 1
foo("hi");         // 0 0
   #+END_SRC

** Exercise 16.52
   #+BEGIN_QUOTE
   Write a program to check your answer to the previous question.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>

template <typename T, typename... Args>
void foo(const T &t, const Args& ... rest)
{
  std::cout << sizeof...(Args) << " "
	    << sizeof...(rest) << std::endl;
}

int main()
{
  int i = 0; double d = 3.14; std::string s = "how now brown cow";
  foo(i, s, 42, d);
  foo(s, 42, "hi");
  foo(d, s);
  foo("hi");

  return 0;
}
   #+END_SRC

* Exercises Section 16.4.1
** Exercise 16.53
   #+BEGIN_QUOTE
   Write your own version of the ~print~ functions and test them by printing one,
   two, and five arguments, each of which should have different types.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <string>

// function to end the recursion and print the last element. this function must
// be declared before the variadic version of print is defined
template <typename T>
std::ostream& print(std::ostream &os, const T &t)
{
  return os << t;  // no separator after the last element in the pack
}

// this version of print will be called for all but the last element in the pack
template <typename T, typename... Args>
std::ostream& print(std::ostream &os, const T &t, const Args& ... rest)
{
  os << t << ", ";
  return print(os, rest...);
}

int main()
{
  int i = 0;
  double d = 3.14;
  char c = 'c';
  std::string s = "Hello world";
  bool b = true;

  print(std::cout, s) << std::endl;
  print(std::cout, d, s) << std::endl;
  print(std::cout, i, d, c, s, b) << std::endl;

  return 0;
}
   #+END_SRC

** Exercise 16.54
   #+BEGIN_QUOTE
   What happens if we call ~print~ on a type that doesn’t have an ~<<~ operator?
   #+END_QUOTE

   it won't compile.

** Exercise 16.55
   #+BEGIN_QUOTE
   Explain how the variadic version of ~print~ would execute if we declared the
   nonvariadic version of ~print~ after the definition of the variadic version.
   #+END_QUOTE

   A declaration for the nonvariadic version of ~print~ must be in scope when
   the variadic version is defined. Otherwise, the variadic function will
   recurse indefinitely.

* Exercises Section 16.4.2
** Exercise 16.56
   #+BEGIN_QUOTE
   Write and test a variadic version of ~errorMsg~.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
#include <sstream>
#include <string>

// print any type we don't otherwise handle
template <typename T>
std::string debug_rep(const T &t)
{
  std::ostringstream ret;
  ret << t;
  return ret.str();
}

// print pointers as their pointer value, followed by the object to which the
// pointer points
//
// NB: this function will not work properly with char*
template <typename T>
std::string debug_rep(T *p)
{
  std::ostringstream ret;
  ret << "pointer: " << p;  // print the pointer's own value
  if (p) ret << " " << debug_rep(*p);  // print the value to which p points
  else ret << " null pointer";  // or indicate that the p is null
  return ret.str();  // return a copy of the string to which ret is bound
}

// print strings inside double quotes
std::string debug_rep(const std::string &s)
{
  return '"' + s + '"';
}

// convert the character pointers to string and call the string version of
// debug_rep
std::string debug_rep(char *p)
{
  return debug_rep(std::string(p));
}

std::string debug_rep(const char *p)
{
  return debug_rep(std::string(p));
}


// function to end the recursion and print the last element. this function must
// be declared before the variadic version of print is defined
template <typename T>
std::ostream& print(std::ostream &os, const T &t)
{
  return os << t;  // no separator after the last element in the pack
}

// this version of print will be called for all but the last element in the pack
template <typename T, typename... Args>
std::ostream& print(std::ostream &os, const T &t, const Args& ... rest)
{
  os << t << ", ";
  return print(os, rest...);
}

// call debug_rep on each argument in the call to print
template <typename... Args>
std::ostream& errorMsg(std::ostream &os, const Args& ... rest)
{
  // print(os, debug_rep(a1), debug_rep(a2),...,debug_rep(an))
  return print(os, debug_rep(rest)...);
}


int main()
{
  int i = 0;
  double d = 3.14;
  char c[] = "hello";
  std::string s = "Hello world";
  bool b = true;

  errorMsg(std::cout, i, d, c, s, b);

  return 0;
}
   #+END_SRC

** Exercise 16.57
   #+BEGIN_QUOTE
   Compare your variadic version of ~errorMsg~ to the ~error_msg~ function in §
   6.2.6 (p. 220). What are the advantages and disadvantages of each approach?
   #+END_QUOTE

   In § 6.2.6 (p. 220) we saw that we can use an ~initializer_list~ to define a
   function that can take a varying number of arguments. However, the arguments
   must have the same type (or types that are convertible to a common
   type). Variadic functions are used when we know neither the number nor the
   types of the arguments we want to process. As an example, we’ll define a
   function like our earlier error_msg function, only this time we’ll allow the
   argument types to vary as well.
