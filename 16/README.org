
* Exercises Section 16.1.1
** Exercise 16.1
   #+BEGIN_QUOTE
   Define instantiation.
   #+END_QUOTE
   
   When the compiler instantiates a template, it creates a new “instance” of the
   template using the actual template argument(s) in place of the corresponding
   template parameter(s). These compiler-generated functions are generally
   referred to as an instantiation of the template.

** Exercise 16.2
   #+BEGIN_QUOTE
   Write and test your own versions of the compare functions.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

template <typename T>
int compare(const T &v1, const T &v2)
{
  if (v1 < v2) return -1;
  if (v2 < v1) return 1;
  return 0;
}

int main()
{
  cout << compare(1, 0) << endl;

  vector<int> vec1{1, 2, 3}, vec2{4, 5, 6};
  cout << compare(vec1, vec2) << endl;
  
  return 0;
}
   #+END_SRC

** Exercise 16.3
   #+BEGIN_QUOTE
   Call your compare function on two Sales_data objects to see how your compiler
   handles errors during instantiation.
   #+END_QUOTE

** Exercise 16.4
   #+BEGIN_QUOTE
   Write a template that acts like the library find algorithm.  The function
   will need two template type parameters, one to represent the function’s
   iterator parameters and the other for the type of the value. Use your
   function to find a given value in a vector<int> and in a list<string>.
   #+END_QUOTE

** Exercise 16.5
   #+BEGIN_QUOTE
   Write a template version of the print function from § 6.2.4 (p. 217) that
   takes a reference to an array and can handle arrays of any size and any
   element type.
   #+END_QUOTE

** Exercise 16.6
   #+BEGIN_QUOTE
   How do you think the library begin and end functions that take an array
   argument work? Define your own versions of these functions.
   #+END_QUOTE

** Exercise 16.7
   #+BEGIN_QUOTE
   Write a constexpr template that returns the size of a given array.
   #+END_QUOTE

** Exercise 16.8
   #+BEGIN_QUOTE
   In the “Key Concept” box on page 108, we noted that as a matter of habit C++
   programmers prefer using != to using <. Explain the rationale for this habit.
   #+END_QUOTE
