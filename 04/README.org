* Exercises Section 4.1.2
** Exercise 4.1
   #+BEGIN_QUOTE
   What is the value returned by ~5 + 10 * 20/2~?
   #+END_QUOTE

   105.

** Exercise 4.2
   #+BEGIN_QUOTE
   Using Table 4.12 (p. 166), parenthesize the following expressions
   to indicate the order in which the operands are grouped:
   + (a) ~* vec.begin()~
   + (b) ~* vec.begin() + 1~
   #+END_QUOTE

   + (a) ~*(vec.begin())~
   + (b) ~(*(vec.begin())) + 1~

* Exercises Section 4.1.3
** Exercise 4.3
   #+BEGIN_QUOTE
   Order of evaluation for most of the binary operators is left undefined to
   give the compiler opportunities for optimization. This strategy presents a
   trade-off between efficient code generation and potential pitfalls in the use
   of the language by the programmer. Do you consider that an acceptable
   trade-off? Why or why not?
   #+END_QUOTE

   Yes.

* Exercises Section 4.2
** Exercise 4.4
   #+BEGIN_QUOTE
   Parenthesize the following expression to show how it is evaluated. Test your
   answer by compiling the expression (without parentheses) and printing its
   result.
   ~12 / 3 * 4 + 5 * 15 + 24 % 4 / 2~
   #+END_QUOTE
   
   ~((12 / 3) * 4) + (5 * 15) + ((24 % 4) / 2)~
   
   result: 91

** Exercise 4.5
   #+BEGIN_QUOTE
   Determine the result of the following expressions.
   + (a) -30 * 3 + 21 / 5
   + (b) -30 + 3 * 21 / 5
   + (c) 30 / 3 * 21 % 5
   + (d) -30 / 3 * 21 % 4
   #+END_QUOTE

   + (a) -86
   + (b) -18
   + (c) 0
   + (d) -2

** Exercise 4.6
   #+BEGIN_QUOTE
   Write an expression to determine whether an ~int~ value is even or odd.
   #+END_QUOTE
   
   ival % 2 // zero means the int value is even, otherwise it is odd

** Exercise 4.7
   #+BEGIN_QUOTE
   What does overflow mean? Show three expressions that will overflow.
   #+END_QUOTE

   Overflow happens when a value is computed that is outside the range of values
   that the type can represent.
   #+BEGIN_SRC C++
short sval = 32767; ++sval;
unsigned uival = 0; --uival;
unsigned short usval = 65535; ++usval;
   #+END_SRC

* Exercises Section 4.3
** Exercise 4.8
   #+BEGIN_QUOTE
   Explain when operands are evaluated in the logical AND , logical OR , and
   equality operators.
   #+END_QUOTE

   The logical AND and OR operators always evaluate their left operand before
   the right.  Moreover, the right operand is evaluated if and only if the left
   operand does not determine the result. This strategy is known as
   short-circuit evaluation: 
   + The right side of an && is evaluated if and only if the left side is
     ~true~.
   + The right side of an || is evaluated if and only if the left side is
     ~false~.

   The operands will always be evaluated in equality operators.

** Exercise 4.9
   #+BEGIN_QUOTE
   Explain the behavior of the condition in the following ~if~:
   #+END_QUOTE
   #+BEGIN_SRC C++
const char *cp = "Hello World";
if (cp && *cp)
   #+END_SRC

   The condition is true. ~cp~ is a pointer to const char *, and it's not a
   nullptr. So the first operand is true. ~*cp~ is a const char with value 'H',
   and it is a nonzero value. So the second operad is true.

** Exercise 4.10
   #+BEGIN_QUOTE
   Write the condition for a ~while~ loop that would read ~int~s from the
   standard input and stop when the value read is equal to 42.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
int ival;
while (cin >> ival && ival != 42)   
   #+END_SRC

** Exercise 4.11
   #+BEGIN_QUOTE
   Write an expression that tests four values, ~a~, ~b~, ~c~, and ~d~, and
   ensures that ~a~ is greater than ~b~, which is greater than ~c~, which is
   greater than ~d~.
   #+END_QUOTE

   #+BEGIN_SRC C++
   a > b && b > c && c > d 
   #+END_SRC

** Exercise 4.12
   #+BEGIN_QUOTE
   Assuming ~i~, ~j~, and ~k~ are all ~int~s, explain what ~i != j < k~ means.
   #+END_QUOTE

   ~i != (j < k)~

* Exercises Section 4.4
** Exercise 4.13
   #+BEGIN_QUOTE
   What are the values of i and d after each assignment?  ~int i;
   double d;~
   + (a) ~d = i = 3.5;~
   + (b) ~i = d = 3.5;~
   #+END_QUOTE

   + (a) i = 3; d = 3.0.
   + (b) d = 3.5; i = 3.0.
