* Exercises Section 4.1.2
** Exercise 4.1
   #+BEGIN_QUOTE
   What is the value returned by ~5 + 10 * 20/2~?
   #+END_QUOTE

   105.

** Exercise 4.2
   #+BEGIN_QUOTE
   Using Table 4.12 (p. 166), parenthesize the following expressions
   to indicate the order in which the operands are grouped:
   + (a) ~* vec.begin()~
   + (b) ~* vec.begin() + 1~
   #+END_QUOTE

   + (a) ~*(vec.begin())~
   + (b) ~(*(vec.begin())) + 1~

* Exercises Section 4.1.3
** Exercise 4.3
   #+BEGIN_QUOTE
   Order of evaluation for most of the binary operators is left undefined to
   give the compiler opportunities for optimization. This strategy presents a
   trade-off between efficient code generation and potential pitfalls in the use
   of the language by the programmer. Do you consider that an acceptable
   trade-off? Why or why not?
   #+END_QUOTE

   Yes.

* Exercises Section 4.2
** Exercise 4.4
   #+BEGIN_QUOTE
   Parenthesize the following expression to show how it is evaluated. Test your
   answer by compiling the expression (without parentheses) and printing its
   result.
   ~12 / 3 * 4 + 5 * 15 + 24 % 4 / 2~
   #+END_QUOTE
   ~((12 / 3) * 4) + (5 * 15) + ((24 % 4) / 2)~
   result: 91
