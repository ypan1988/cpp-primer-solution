* Exercises Section 4.1.2
** Exercise 4.1
   #+BEGIN_QUOTE
   What is the value returned by ~5 + 10 * 20/2~?
   #+END_QUOTE

   105.

** Exercise 4.2
   #+BEGIN_QUOTE
   Using Table 4.12 (p. 166), parenthesize the following expressions
   to indicate the order in which the operands are grouped:
   + (a) ~* vec.begin()~
   + (b) ~* vec.begin() + 1~
   #+END_QUOTE

   + (a) ~*(vec.begin())~
   + (b) ~(*(vec.begin())) + 1~

* Exercises Section 4.1.3
** Exercise 4.3
   #+BEGIN_QUOTE
   Order of evaluation for most of the binary operators is left undefined to
   give the compiler opportunities for optimization. This strategy presents a
   trade-off between efficient code generation and potential pitfalls in the use
   of the language by the programmer. Do you consider that an acceptable
   trade-off? Why or why not?
   #+END_QUOTE

   Yes.

* Exercises Section 4.2
** Exercise 4.4
   #+BEGIN_QUOTE
   Parenthesize the following expression to show how it is evaluated. Test your
   answer by compiling the expression (without parentheses) and printing its
   result.
   ~12 / 3 * 4 + 5 * 15 + 24 % 4 / 2~
   #+END_QUOTE
   
   ~((12 / 3) * 4) + (5 * 15) + ((24 % 4) / 2)~
   
   result: 91

** Exercise 4.5
   #+BEGIN_QUOTE
   Determine the result of the following expressions.
   + (a) -30 * 3 + 21 / 5
   + (b) -30 + 3 * 21 / 5
   + (c) 30 / 3 * 21 % 5
   + (d) -30 / 3 * 21 % 4
   #+END_QUOTE

   + (a) -86
   + (b) -18
   + (c) 0
   + (d) -2

** Exercise 4.6
   #+BEGIN_QUOTE
   Write an expression to determine whether an ~int~ value is even or odd.
   #+END_QUOTE
   
   ival % 2 // zero means the int value is even, otherwise it is odd

** Exercise 4.7
   #+BEGIN_QUOTE
   What does overflow mean? Show three expressions that will overflow.
   #+END_QUOTE

   Overflow happens when a value is computed that is outside the range of values
   that the type can represent.
   #+BEGIN_SRC C++
short sval = 32767; ++sval;
unsigned uival = 0; --uival;
unsigned short usval = 65535; ++usval;
   #+END_SRC

* Exercises Section 4.3
** Exercise 4.8
   #+BEGIN_QUOTE
   Explain when operands are evaluated in the logical AND , logical OR , and
   equality operators.
   #+END_QUOTE

   The logical AND and OR operators always evaluate their left operand before
   the right.  Moreover, the right operand is evaluated if and only if the left
   operand does not determine the result. This strategy is known as
   short-circuit evaluation: 
   + The right side of an && is evaluated if and only if the left side is
     ~true~.
   + The right side of an || is evaluated if and only if the left side is
     ~false~.

   The operands will always be evaluated in equality operators.

** Exercise 4.9
   #+BEGIN_QUOTE
   Explain the behavior of the condition in the following ~if~:
   #+END_QUOTE
   #+BEGIN_SRC C++
const char *cp = "Hello World";
if (cp && *cp)
   #+END_SRC

   The condition is true. ~cp~ is a pointer to const char *, and it's not a
   nullptr. So the first operand is true. ~*cp~ is a const char with value 'H',
   and it is a nonzero value. So the second operad is true.

** Exercise 4.10
   #+BEGIN_QUOTE
   Write the condition for a ~while~ loop that would read ~int~s from the
   standard input and stop when the value read is equal to 42.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
int ival;
while (cin >> ival && ival != 42)   
   #+END_SRC

** Exercise 4.11
   #+BEGIN_QUOTE
   Write an expression that tests four values, ~a~, ~b~, ~c~, and ~d~, and
   ensures that ~a~ is greater than ~b~, which is greater than ~c~, which is
   greater than ~d~.
   #+END_QUOTE

   #+BEGIN_SRC C++
   a > b && b > c && c > d 
   #+END_SRC

** Exercise 4.12
   #+BEGIN_QUOTE
   Assuming ~i~, ~j~, and ~k~ are all ~int~s, explain what ~i != j < k~ means.
   #+END_QUOTE

   ~i != (j < k)~

* Exercises Section 4.4
** Exercise 4.13
   #+BEGIN_QUOTE
   What are the values of i and d after each assignment?  ~int i;
   double d;~
   + (a) ~d = i = 3.5;~
   + (b) ~i = d = 3.5;~
   #+END_QUOTE

   + (a) i = 3; d = 3.0.
   + (b) d = 3.5; i = 3.0.

** Exercise 4.14
   #+BEGIN_QUOTE
   Explain what happens in each of the ~if~ tests:
   #+END_QUOTE
   #+BEGIN_SRC C++
if (42 = i)   //  ...
if (i = 42)   //  ...   
   #+END_SRC
   
   It is an error for the condition in the first ~if~ since literals are
   rvalues; The condition in second ~if~ assigns 42 to i and then tests the
   result of the assignment (The condition will be true since 42 is not zero).

** Exercise 4.15
   #+BEGIN_QUOTE
   The following assignment is illegal. Why? How would you correct it?
   #+END_QUOTE
   #+BEGIN_SRC C++
double dval; int ival; int *pi;
dval = ival = pi = 0;   
   #+END_SRC
   
   The assignment is illegal because ival and pi have different types and there
   is no conversion from the type of pi (int*) to the type of ival (int). It is
   illegal even though zero is a value that can be assigned to either object.

** Exercise 4.16
   #+BEGIN_QUOTE
   Although the following are legal, they probably do not behave as the
   programmer expects. Why? Rewrite the expressions as you think they should be.
   + (a) if (p = getPtr() != 0)
   + (b) if (i = 1024)
   #+END_QUOTE
   + (a) if ((p = getPtr()) != 0) // Because assignment has lower precedence
     than the relational operators, parentheses are usually needed around
     assignments in conditions.
   + (b) if (i == 1024) // The author of this code almost surely intended to
     test whether i is equal to 1024.

* Exercises Section 4.5
** Exercise 4.17
   #+BEGIN_QUOTE
   Explain the difference between prefix and postfix increment.
   #+END_QUOTE

   The prefix operators increments (or decrements) its operand and yields the
   changed object as its result. The postfix operators increment (or decrement)
   the operand but yield a copy of the original, unchanged value as its result.

** Exercise 4.18
   #+BEGIN_QUOTE
   What would happen if the ~while~ loop on page 148 that prints the elements
   from a ~vector~ used the prefix increment operator?
   #+END_QUOTE
   
   It will print from the second element and dereference ~v.end()~ at last,
   which is a undefined behaviour.

** Exercise 4.19
   #+BEGIN_QUOTE
   Given that ~ptr~ points to an ~int~, that ~vec~ is a ~vector<int>~, and that
   ~ival~ is an ~int~, explain the behavior of each of these expressions. Which,
   if any, are likely to be incorrect? Why? How might each be corrected?
   + (a) ~ptr != 0 && *ptr++~
   + (b) ~ival++ && ival~
   + (c) ~vec[ival++] <= vec[ival]~
   #+END_QUOTE
   (c) is incorrect. It should be ~vec[ival] <= vec[ival+1]~.

* Exercises Section 4.6
** Exercise 4.20
   #+BEGIN_QUOTE
   Assuming that ~iter~ is a ~vector<string>::iterator~, indicate which, if any,
   of the following expressions are legal. Explain the behavior of the legal
   expressions and why those that arenâ€™t legal are in error.
   + (a) ~*iter++;~
   + (b) ~(*iter)++;~
   + (c) ~*iter.empty();~
   + (d) ~iter->empty();~
   + (e) ~++*iter;~
   + (f) ~iter++->empty();~
   #+END_QUOTE

   + (a) legal. return current ~string~, advance ~iter~.
   + (b) illegal. increment operator is not defined for ~string~. 
   + (c) illegal. it should be ~(*iter).empty();~.
   + (d) legal. run the ~empty~ member of a ~string~.
   + (e) illegal. increment operator is not defined for ~string~.
   + (f) legal. run the ~empty~ member of a ~string~, advance ~iter~.

* Exercises Section 4.7
** Exercise 4.21
   #+BEGIN_QUOTE
   Write a program to use a conditional operator to find the elements in a
   ~vector<int>~ that have odd value and double the value of each such element.
   #+END_QUOTE
   
   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

#include <vector>
using std::vector;

int main()
{
  vector<int> ivec = {0, 1, 2, 3, 4};

  for (auto i : ivec) cout << i << " ";
  cout << endl;
  
  for (auto &i : ivec) {
    i = (!(i % 2) ? (2 * i) : i);
  }

  for (auto i : ivec) cout << i << " ";
  cout << endl;

  return 0;
}   
   #+END_SRC

** Exercise 4.22
   #+BEGIN_QUOTE
   Extend the program that assigned high pass, pass, and fail grades to also
   assign low pass for grades between 60 and 75 inclusive. Write two versions:
   One version that uses only conditional operators; the other should use one or
   more ~if~ statements. Which version do you think is easier to understand and
   why?
   #+END_QUOTE
   
   ex04_22a.cc
   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  vector<unsigned> grades;
  unsigned i;

  while (cin >> i)
    grades.push_back(i);

  for (auto grade : grades) {	// for each grade in grades
    string finalgrade = (grade > 90) ? "high pass"
      : (grade < 60) ? "fail"
      : (grade <= 75) ? "low pass" : "pass";

    cout << grade << " " + finalgrade << endl; 
  }
  
  return 0;
}   
   #+END_SRC

   ex04_22b.cc
   #+BEGIN_SRC C++
#include <iostream>
using std::cin; using std::cout; using std::endl;

#include <string>
using std::string;

#include <vector>
using std::vector;

int main()
{
  vector<unsigned> grades;
  unsigned i;

  while (cin >> i)
    grades.push_back(i);

  for (auto grade : grades) {	// for each grade in grades
    string finalgrade;

    if (grade > 90) finalgrade = "high pass";
    else if (grade > 75) finalgrade = "pass";
    else if (grade >= 60) finalgrade = "low pass";
    else finalgrade = "fail";

    cout << grade << " " + finalgrade << endl; 
  }
  
  return 0;
}   
   #+END_SRC

** Exercise 4.23
   #+BEGIN_QUOTE
   The following expression fails to compile due to operator precedence. Using
   Table 4.12 (p. 166), explain why it fails. How would you fix it?
   #+END_QUOTE
   #+BEGIN_SRC C++ 
string s = "word";
string pl = s + s[s.size() - 1] == 's' ? "" : "s" ;   
   #+END_SRC
   
   The conditional operator has fairly low precedence. When we embed a
   conditional expression in a larger expression, we usually must parenthesize
   the conditional subexpression. 

   correct form:
   #+BEGIN_SRC C++
string s = "word";
string pl = s + (s[s.size() - 1] == 's' ? "" : "s") ;      
   #+END_SRC

** Exercise 4.24
   #+BEGIN_QUOTE
   Our program that distinguished between high pass, pass, and fail depended on
   the fact that the conditional operator is right associative. Describe how
   that operator would be evaluated if the operator were left associative.
   #+END_QUOTE

   if the operator were left associative, then
   
   ~finalgrade = (grade > 90) ? "high pass" : (grade < 60) ? "fail" : "pass";~

   would same as :

   ~finalgrade = ((grade > 90) ? "high pass" : (grade < 60)) ? "fail" : "pass";~

   if grade > 90, first conditional operator's result is ~high pass~, and
   ~finalgrade~ will always fail.

* Exercises Section 4.8
** Exercise 4.25
   #+BEGIN_QUOTE
   What is the value of ~'q' << 6 on a machine with 32-bit ints and 8 bit chars,
   that uses Latin-1 character set in which 'q' has the bit pattern 01110001?
   #+END_QUOTE
   
   The operator ~ performs integral promotions on its operand. Which means it
   will convert the char to int before doing the complement. So it will go like
   this:
   #+BEGIN_SRC C++
'q' == 01110001
~ 'q' == ~ 00000000000000000000000001110001
~ 'q' == 11111111111111111111111110001110
~ 'q' << 6 == 11111111111111111110001110000000   
   #+END_SRC

** Exercise 4.26
   #+BEGIN_QUOTE
   In our grading example in this section, what would happen if we used
   ~unsigned int~ as the type for ~quiz1~?
   #+END_QUOTE
   
   The C++ standard does not specify the size of integral types in bytes, but it
   specifies minimum ranges they must be able to hold. Minimum mange of
   ~unsigned int~ is 0 to 65535. Thus if unsigned int adopted, the result is
   undefined.

** Exercise 4.27
   #+BEGIN_QUOTE
   What is the result of each of these expressions?

   ~unsigned long ul1 = 3, ul2 = 7;~
   + (a) ul1 & ul2
   + (b) ul1 | ul2
   + (c) ul1 && ul2
   + (d) ul1 || ul2
   #+END_QUOTE

   + (a) 3
   + (b) 7
   + (c) true
   + (d) true

* Exercises Section 4.9
** Exercise 4.28
   #+BEGIN_QUOTE
   Write a program to print the size of each of the built-in types.
   #+END_QUOTE

   #+BEGIN_SRC C++
#include <iostream>
using std::cout; using std::endl;

int main()
{   
    // void type
    cout << "void: nullptr_t\t" << sizeof(std::nullptr_t) << " bytes" << endl << endl;
    
    // boolean type
    cout << "bool:\t\t" << sizeof(bool) << " bytes" << endl << endl;
    
    // charactor type
    cout << "char:\t\t" << sizeof(char) << " bytes" << endl;
    cout << "wchar_t:\t" << sizeof(wchar_t) << " bytes" << endl;
    cout << "char16_t:\t" << sizeof(char16_t) << " bytes" << endl;
    cout << "char32_t:\t" << sizeof(char32_t) << " bytes" << endl << endl;
    
    // integers type
    cout << "short:\t\t" << sizeof(short) << " bytes" << endl;
    cout << "int:\t\t" << sizeof(int) << " bytes" << endl;
    cout << "long:\t\t" << sizeof(long) << " bytes" << endl;
    cout << "long long:\t" << sizeof(long long) << " bytes" << endl << endl;
    
    // floating point type
    cout << "float:\t\t" << sizeof(float) << " bytes" << endl;
    cout << "double:\t\t" << sizeof(double) << " bytes" << endl;
    cout << "long double:\t" << sizeof(long double) << " bytes" << endl << endl;
	
    // Fixed width integers
    cout << "int8_t:\t\t" << sizeof(int8_t) << " bytes" << endl;
    cout << "uint8_t:\t" << sizeof(uint8_t) << " bytes" << endl;
    cout << "int16_t:\t" << sizeof(int16_t) << " bytes" << endl;
    cout << "uint16_t:\t" << sizeof(uint16_t) << " bytes" << endl;
    cout << "int32_t:\t" << sizeof(int32_t) << " bytes" << endl;
    cout << "uint32_t:\t" << sizeof(uint32_t) << " bytes" << endl;
    cout << "int64_t:\t" << sizeof(int64_t) << " bytes" << endl;
    cout << "uint64_t:\t" << sizeof(uint64_t) << " bytes" << endl;
    	
    return 0;
}   
   #+END_SRC

** Exercise 4.29
   #+BEGIN_QUOTE
   Predict the output of the following code and explain your reasoning. Now run
   the program. Is the output what you expected? If not, figure out why.
   #+END_QUOTE
   #+BEGIN_SRC C++
int x[10];   int *p = x;
cout << sizeof(x)/sizeof(*x) << endl;
cout << sizeof(p)/sizeof(*p) << endl;   
   #+END_SRC

   The first will print 10 which is size of array ~x~ and the second is
   undefined.

** Exercise 4.30
   #+BEGIN_QUOTE
   Using Table 4.12 (p. 166), parenthesize the following expressions to match
   the default evaluation:
   + (a) ~sizeof x + y~
   + (b) ~sizeof p->mem[i]~
   + (c) ~sizeof a < b~
   + (d) ~sizeof f()~
   #+END_QUOTE

   + (a) ~(sizeof x) + y~
   + (b) ~sizeof (p->mem[i])~
   + (c) ~(sizeof a) < b~
   + (d) ~(sizeof f())~

* Exercises Section 4.10
** Exercise 4.31
   #+BEGIN_QUOTE
   The program in this section used the prefix increment and decrement
   operators. Explain why we used prefix and not postfix. What changes would
   have to be made to use the postfix versions? Rewrite the program using
   postfix operators.
   #+END_QUOTE

   Advice: Use Postfix Operators only When Necessary. 

   Readers from a C background might be surprised that we use the prefix
   increment in the programs weâ€™ve written. The reason is simple: The prefix
   version avoids unnecessary work. It increments the value and returns the
   incremented version. The postfix operator must store the original value so
   that it can return the unincremented value as its result. If we donâ€™t need
   the unincremented value, thereâ€™s no need for the extra work done by the
   postfix operator.

   For ~int~s and pointers, the compiler can optimize away this extra work. For
   more complicated iterator types, this extra work potentially might be more
   costly. By habitually using the prefix versions, we do not have to worry
   about whether the performance difference matters. Moreoverâ€”and perhaps more
   importantlyâ€”we can express the intent of our programs more directly.

   #+BEGIN_SRC C++
vector<int>::size_type cnt = ivec.size();
// assign values from size... 1 to the elements in ivec
for(vector<int>::size_type ix = 0; ix != ivec.size(); ix++, cnt--)
    ivec[ix] = cnt;   
   #+END_SRC

** Exercise 4.32
   #+BEGIN_QUOTE
   Explain the following loop.
   #+END_QUOTE
   #+BEGIN_SRC C++
constexpr int size = 5;
int ia[size] = {1,2,3,4,5};
for (int *ptr = ia, ix = 0;
     ix != size && ptr != ia+size;
     ++ix, ++ptr)   { /* ...   */ }   
   #+END_SRC

   Either ~ptr~ or ~ix~ can be used to go through the all elements in the array
   where ~ptr~ is used as a pointer for the array and ~ix~ is an int index of
   the array.
